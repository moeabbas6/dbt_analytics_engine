version: 2

sources:
  - name: raw
    database: moes-dbt-layer
    schema: zzz_sources
    tables:
      - name: customers
        columns:
          - name: customer_id
            data_type: string
            description: "Unique identifier for each customer."
            data_tests:
              - unique
              - not_null
              - dbt_expectations.expect_column_value_lengths_to_equal:
                  name: source_customers_unexpected_customer_id_length
                  value: 36

          - name: first_name
            data_type: string
            description: "The first name of the customer."
            data_tests:
              - not_null
              - dbt_utils.not_constant
              - dbt_expectations.expect_column_value_lengths_to_be_between:
                  name: source_customers_unexpected_first_name_length
                  min_value: 1
                  max_value: 16
                  config: 
                    severity: warn
                    error_if: ">20"
                    warn_if: ">10"

          - name: last_name
            data_type: string
            description: "The last name of the customer."
            data_tests:
              - not_null
              - dbt_utils.not_constant
              - dbt_expectations.expect_column_value_lengths_to_be_between:
                  name: source_customers_unexpected_last_name_length
                  min_value: 1
                  max_value: 16
                  config: 
                    severity: warn
                    error_if: ">20"
                    warn_if: ">10"


      - name: nps
        freshness: 
          warn_after: {count: 6, period: day}
          error_after: {count: 12, period: day}
        loaded_at_field: _loaded_at
        columns:
          - name: order_id
            data_type: string
            description: "Unique identifier for each order in the NPS feedback."
            data_tests:
              - unique
              - not_null
              - dbt_expectations.expect_column_value_lengths_to_equal:
                  name: source_nps_unexpected_order_id_length
                  value: 36

          - name: customer_id
            data_type: string
            description: "Unique identifier for the customer providing the NPS feedback."
            data_tests:
              - not_null
              - dbt_utils.not_constant
              - dbt_expectations.expect_column_value_lengths_to_equal:
                  name: source_nps_unexpected_customer_id_length
                  value: 36

          - name: is_nps
            data_type: boolean
            description: "Indicates whether the customer provided an NPS (Net Promoter Score) score (TRUE if provided, FALSE otherwise)."
            data_tests:
              - not_null
              - dbt_utils.not_constant
              - accepted_values:
                  name: source_nps_unexpected_is_nps_bool
                  values: [TRUE, FALSE]
                  quote: false

          - name: nps_score
            data_type: int64
            description: "The Net Promoter Score (NPS) provided by the customer, ranging from 0 to 10, which indicates customer satisfaction and loyalty."
            data_tests:
              - not_null
              - dbt_utils.not_constant
              - dbt_utils.accepted_range:
                  name: source_nps_unexpected_nps_score
                  min_value: 0
                  max_value: 10

          - name: nps_date
            data_type: datetime
            description: "The date on which the customer provided their Net Promoter Score (NPS)."
            data_tests:
              - not_null
              - dbt_utils.not_constant




      - name: orders
        freshness: 
          warn_after: {count: 3, period: day}
          error_after: {count: 6, period: day}
        loaded_at_field: _loaded_at
        columns:
          - name: order_id
            data_type: string
            description: "Unique identifier for the order."
            data_tests:
              - unique
              - not_null
              - dbt_expectations.expect_column_value_lengths_to_equal:
                  name: source_orders_unexpected_order_id_length
                  value: 36

          - name: customer_id
            data_type: string
            description: "Unique identifier for the customer placing the order."
            data_tests:
              - not_null
              - dbt_utils.not_constant
              - dbt_expectations.expect_column_value_lengths_to_equal:
                  name: source_orders_unexpected_custoemr_id_length
                  value: 36

          - name: order_status
            data_type: string
            description: '{{ doc("orders_status") }}'
            data_tests:
              - not_null
              - dbt_utils.not_constant
              - accepted_values:
                  name: source_orders_unexpected_order_status
                  values: ['completed', 'failed']

          - name: order_date
            data_type: datetime
            description: "The date on which the order was created."
            data_tests:
              - not_null
              - dbt_utils.not_constant

          - name: product_category_id
            data_type: int64
            description: "Unique identifier for the product's category."
            data_tests:
              - not_null
              - dbt_utils.not_constant
              - dbt_utils.accepted_range:
                  name: source_orders_unexpected_product_category_id
                  min_value: 0
                  max_value: 5

          - name: product_id
            data_type: int64
            description: "Unique identifier for the product."
            data_tests:
              - not_null
              - dbt_utils.not_constant
              - dbt_utils.accepted_range:
                  name: source_orders_unexpected_product__id
                  min_value: 0
                  max_value: 5




      - name: payments
        freshness: 
          warn_after: {count: 3, period: day}
          error_after: {count: 6, period: day}
        loaded_at_field: _loaded_at
        columns:
          - name: order_id
            data_type: string
            description: "Unique identifier for the order."
            data_tests:
              - not_null
              - dbt_utils.not_constant
              - dbt_expectations.expect_column_value_lengths_to_equal:
                  name: source_payments_unexpected_order_id_length
                  value: 36

          - name: payment_id
            data_type: int64
            description: "Unique identifier for the payment."
            data_tests:
              - not_null
              - dbt_utils.not_constant

          - name: payment_method
            data_type: string
            description: "The payment method used for the order."
            data_tests:
              - not_null
              - dbt_utils.not_constant
              - accepted_values:
                  name: source_payments_unexpected_payment_method
                  values: ['amazon_pay', 'stripe', 'apple_pay', 'bitcoin']

          - name: payment_amount
            data_type: float64
            description: "The total gross amount paid by the customer, including tax and shipping."
            data_tests:
              - not_null
              - dbt_utils.expression_is_true:
                  name: source_payments_assert_positive_payment_amount
                  expression: "> 0"

          - name: payment_country_id
            data_type: string
            description: "Identifier for the country from which the payment originated."
            data_tests:
              - not_null
              - dbt_utils.not_constant
              - dbt_utils.accepted_range:
                  name: source_payments_unexpected_country_id
                  min_value: 0
                  max_value: 10

          - name: payment_status
            data_type: string
            description: "The current status of the payment (e.g., pending, completed, failed)."
            data_tests:
              - not_null
              - dbt_utils.not_constant
              - accepted_values:
                  name: source_payments_unexpected_payment_status
                  values: ['successful', 'failed']

          - name: created_at
            data_type: datetime
            description: "The timestamp when the payment was created."
            data_tests:
              - not_null
              - dbt_utils.not_constant




      - name: returns
        freshness: 
          warn_after: {count: 6, period: day}
          error_after: {count: 12, period: day}
        loaded_at_field: _loaded_at
        columns:
          - name: order_id
            data_type: string
            description: "Unique identifier for the order."
            data_tests:
              - unique
              - not_null
              - dbt_expectations.expect_column_value_lengths_to_equal:
                  name: source_returns_unexpected_order_id_length
                  value: 36

          - name: return_id
            data_type: string
            description: "Unique identifier for the return."
            data_tests:
              - unique
              - not_null
              - dbt_expectations.expect_column_value_lengths_to_equal:
                  name: source_returns_unexpected_return_id_length
                  value: 36

          - name: is_returned
            data_type: boolean
            description: "Indicates whether the order was returned (TRUE if returned, FALSE otherwise)."
            data_tests:
              - not_null
              - dbt_utils.not_constant
              - accepted_values:
                  name: source_returns_unexpected_is_returned_bool
                  values: [TRUE, FALSE]
                  quote: false

          - name: return_date
            data_type: datetime
            description: "The date on which the order was returned, if applicable."
            data_tests:
              - not_null
              - dbt_utils.not_constant

          - name: return_reason
            data_type: string
            description: '{{ doc("return_reason") }}'
            data_tests:
              - not_null
              - dbt_utils.not_constant
              - accepted_values:
                  name: source_returns_unexpected_return_reason
                  values: ['Not as Described', 'Compatibility Issues', 'Quality Concerns', 'Technical Difficulties']




      - name: shipping
        freshness: 
          warn_after: {count: 3, period: day}
          error_after: {count: 6, period: day}
        loaded_at_field: _loaded_at
        columns:
          - name: order_id
            data_type: string
            description: "Unique identifier for the order."
            data_tests:
              - unique
              - not_null
              - dbt_expectations.expect_column_value_lengths_to_equal:
                  name: source_shipping_unexpected_order_id_length
                  value: 36

          - name: shipping_id
            data_type: string
            description: >
              A unique identifier for each shipping transaction. This field ensures that each shipment is 
              tracked individually and is essential for linking sales orders to their corresponding shipping details.
            data_tests:
              - unique
              - dbt_utils.not_constant
              - dbt_expectations.expect_column_value_lengths_to_equal:
                  name: source_shipping_unexpected_shipping_id_length
                  value: 36

          - name: is_shipped
            data_type: boolean
            description: "Indicates whether the order has been shipped (TRUE if shipped, FALSE otherwise)."
            data_tests:
              - not_null
              - dbt_utils.not_constant
              - accepted_values:
                  name: source_shipping_unexpected_is_shipped_bool
                  values: [TRUE, FALSE]
                  quote: false

          - name: shipping_date
            data_type: datetime
            description: "The date on which the order was shipped."
            data_tests:
              - dbt_utils.not_constant

          - name: shipping_amount
            data_type: float64
            description: "The total gross amount charged for shipping the order."
            data_tests:
              - dbt_utils.not_constant
              - dbt_utils.expression_is_true:
                  name: source_shipping_assert_positive_shipping_amount
                  expression: "> 0"
                  config:
                    where: "shipping_amount IS NOT NULL"