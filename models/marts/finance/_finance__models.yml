version: 2

models:
  - name: fct_payment_methods
    config:
      contract:
        enforced: true
      enabled: false
    description: "Fact table containing details of payment methods used in customer orders."
    data_tests:
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          expression: sum(total_gross_revenue)
          compare_model: ref("int_payments_lvl_joined")
          compare_expression: sum(gross_revenue)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          expression: sum(total_payment_fees)
          compare_model: ref("int_payments_lvl_joined")
          compare_expression: sum(payment_fee)


    columns:
      - name: country_id
        data_type: int64
        constraints: 
          - type: not_null
        description: '{{ doc("country_id") }}'
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 22


      - name: country
        data_type: string
        constraints: 
          - type: not_null
        description: '{{ doc("country") }}'
        data_tests:
          - dbt_utils.not_constant


      - name: order_id
        data_type: string
        constraints: 
          - type: not_null
          - type: primary_key
            warn_unenforced: false
        description: '{{ doc("order_id") }}'
        data_tests:
          - unique
          - dbt_utils.not_constant
          - relationships:
              to: ref('int_payments_lvl_joined')
              field: order_id


      - name: nb_payments
        data_type: int64
        constraints: 
          - type: not_null
        description: '{{ doc("nb_payments") }}'
        data_tests:
          - dbt_utils.expression_is_true:
              expression: "> 0"


      - name: payment_methods
        data_type: string
        constraints: 
          - type: not_null
        description: '{{ doc("payment_methods") }}'


      - name: order_date
        data_type: datetime
        constraints: 
          - type: not_null
        description: '{{ doc("order_date") }}'
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.accepted_range:
              max_value: "current_datetime()"


      - name: order_status
        data_type: string
        constraints: 
          - type: not_null
        description: '{{ doc("orders_status") }}'
        data_tests:
          - accepted_values:
              values: ['completed', 'failed']


      - name: total_gross_revenue
        data_type: float64
        constraints: 
          - type: not_null
        description: '{{ doc("total_gross_revenue") }}'
        data_tests:
          - dbt_utils.expression_is_true:
              expression: "> 0"


      - name: total_payment_fees
        data_type: float64
        constraints: 
          - type: not_null
        description: '{{ doc("total_payment_fees") }}'
        data_tests:
          - dbt_utils.expression_is_true:
              expression: "> 0"


      - name: amazon_pay_payment_fees
        data_type: float64
        constraints: 
          - type: not_null
        description: '{{ doc("amazon_pay_payment_fees") }}'
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              expression: ">= 0"


      - name: apple_pay_payment_fees
        data_type: float64
        constraints: 
          - type: not_null
        description: '{{ doc("apple_pay_payment_fees") }}'
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              expression: ">= 0"


      - name: bitcoin_payment_fees
        data_type: float64
        constraints: 
          - type: not_null
        description: '{{ doc("bitcoin_payment_fees") }}'
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              expression: ">= 0"


      - name: stripe_payment_fees
        data_type: float64
        constraints: 
          - type: not_null
        description: '{{ doc("stripe_payment_fees") }}'
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              expression: ">= 0"


      - name: amazon_pay_amount
        data_type: float64
        constraints: 
          - type: not_null
        description: '{{ doc("amazon_pay_amount") }}'
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              expression: ">= 0"


      - name: apple_pay_amount
        data_type: float64
        constraints: 
          - type: not_null
        description: '{{ doc("apple_pay_amount") }}'
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              expression: ">= 0"


      - name: bitcoin_amount
        data_type: float64
        constraints: 
          - type: not_null
        description: '{{ doc("bitcoin_amount") }}'
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              expression: ">= 0"


      - name: stripe_amount
        data_type: float64
        constraints: 
          - type: not_null
        description: '{{ doc("stripe_amount") }}'
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              expression: ">= 0"


