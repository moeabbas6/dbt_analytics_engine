version: 2

models:
  - name: dim_customers
    description: "This table contains information about customers and their related metrics such as order history, revenue, and segmentation."
    data_tests:
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: dim_customers_unequal_agg_total_gross_revenue
          expression: sum(total_gross_revenue)
          compare_model: ref("fct_orders")
          compare_expression: sum(gross_revenue)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: dim_customers_unequal_agg_total_tax_amount
          expression: sum(total_tax_amount)
          compare_model: ref("fct_orders")
          compare_expression: sum(tax_amount)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: dim_customers_unequal_agg_total_net_revenue_before_tax
          expression: sum(total_net_revenue_before_tax)
          compare_model: ref("fct_orders")
          compare_expression: sum(net_revenue_before_tax)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: dim_customers_unequal_agg_total_net_revenue_after_tax
          expression: sum(total_net_revenue_after_tax)
          compare_model: ref("fct_orders")
          compare_expression: sum(net_revenue_after_tax)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: dim_customers_unequal_agg_total_cogs
          expression: sum(total_cogs)
          compare_model: ref("fct_orders")
          compare_expression: sum(cogs)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: dim_customers_unequal_agg_total_returned_cogs
          expression: sum(total_returned_cogs)
          compare_model: ref("fct_orders")
          compare_expression: sum(returned_cogs)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: dim_customers_unequal_agg_total_refund_amount
          expression: sum(total_refund_amount)
          compare_model: ref("fct_orders")
          compare_expression: sum(refund_amount)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: dim_customers_unequal_agg_total_payment_fee
          expression: sum(total_payment_fee)
          compare_model: ref("fct_orders")
          compare_expression: sum(payment_fee)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: dim_customers_unequal_agg_total_cm
          expression: sum(total_cm)
          compare_model: ref("fct_orders")
          compare_expression: sum(cm)
    columns:
      - name: customer_id
        data_type: string
        description: "Unique identifier for the customer placing the order."
        data_tests:
          - unique
          - not_null

      - name: first_name
        data_type: string
        description: "The first name of the customer."
        data_tests:
          - not_null
          - dbt_utils.not_constant

      - name: last_name
        data_type: string
        description: "The last name of the customer."
        data_tests:
          - not_null
          - dbt_utils.not_constant

      - name: nb_order_id
        data_type: int64
        description: "Total number of orders placed by the customer."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: dim_customers_assert_positive_nb_order_id
              expression: "> 0"

      - name: last_order_days
        data_type: int64
        description: "Number of days since the customer's last order."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: dim_customers_assert_positive_last_order_days
              expression: ">= 0"

      - name: first_order_date
        data_type: datetime
        description: "Timestamp of the first order placed by the customer."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.accepted_range:
              name: dim_customers_unexpected_first_order_date
              max_value: "current_datetime()"

      - name: last_order_date
        data_type: datetime
        description: "Timestamp of the most recent order placed by the customer."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.accepted_range:
              name: dim_customers_unexpected_last_order_date
              max_value: "current_datetime()"

      - name: nb_shipping_id
        data_type: int64
        description: "Number of unique shipping identifiers associated with the customer's orders."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: dim_customers_assert_positive_nb_shipping_id
              expression: ">= 0"

      - name: nb_return_id
        data_type: int64
        description: "Number of unique return identifiers associated with the customer's orders."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: dim_customers_assert_positive_nb_return_id
              expression: ">= 0"

      - name: avg_fulfillment_days
        data_type: float64
        description: "Average number of days it takes to fulfill the customer's orders."
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: dim_customers_assert_positive_avg_fulfillment_days
              expression: "> 0"
              config:
                where: avg_fulfillment_days IS NOT NULL

      - name: avg_nps_score
        data_type: float64
        description: "Average Net Promoter Score (NPS) given by the customer based on their orders."
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: dim_customers_assert_positive_avg_nps_score
              expression: "> 0"
              config:
                where: avg_nps_score IS NOT NULL

      - name: total_gross_revenue
        data_type: float64
        description: "Total gross revenue generated from the customer's orders before any deductions."
        data_tests:
          - dbt_utils.not_constant
          - not_null
          - dbt_utils.expression_is_true:
              name: dim_customers_assert_positive_total_gross_revenue
              expression: "> 0"

      - name: total_tax_amount
        data_type: float64
        description: "Total tax amount paid by the customer on their orders."
        data_tests:
          - dbt_utils.not_constant
          - not_null
          - dbt_utils.expression_is_true:
              name: dim_customers_assert_positive_total_tax_amount
              expression: "> 0"

      - name: total_net_revenue_before_tax
        data_type: float64
        description: "Total net revenue from the customer's orders before tax deductions."
        data_tests:
          - dbt_utils.not_constant
          - not_null
          - dbt_utils.expression_is_true:
              name: dim_customers_assert_positive_total_net_revenue_before_tax
              expression: "> 0"

      - name: total_net_revenue_after_tax
        data_type: float64
        description: "Total net revenue from the customer's orders after tax deductions."
        data_tests:
          - dbt_utils.not_constant
          - not_null
          - dbt_utils.expression_is_true:
              name: dim_customers_assert_positive_total_net_revenue_after_tax
              expression: "> 0"

      - name: total_cogs
        data_type: float64
        description: "Total cost of goods sold (COGS) associated with the customer's orders."
        data_tests:
          - dbt_utils.not_constant
          - not_null
          - dbt_utils.expression_is_true:
              name: dim_customers_assert_positive_total_cogs
              expression: "> 0"

      - name: total_returned_cogs
        data_type: float64
        description: "Total cost of goods sold for items returned by the customer."
        data_tests:
          - dbt_utils.not_constant
          - not_null
          - dbt_utils.expression_is_true:
              name: dim_customers_assert_positive_total_returned_cogs
              expression: ">= 0"

      - name: total_refund_amount
        data_type: float64
        description: "Total amount refunded to the customer for returned or canceled orders."
        data_tests:
          - dbt_utils.not_constant
          - not_null
          - dbt_utils.expression_is_true:
              name: dim_customers_assert_positive_total_refund_amount
              expression: ">= 0"

      - name: total_payment_fee
        data_type: float64
        description: "Total payment processing fees associated with the customer's transactions."
        data_tests:
          - dbt_utils.not_constant
          - not_null
          - dbt_utils.expression_is_true:
              name: dim_customers_assert_positive_total_payment_fee
              expression: "> 0"

      - name: total_cm
        data_type: float64
        description: "Total contribution margin (CM) generated from the customer's orders."
        data_tests:
          - dbt_utils.not_constant
          - not_null

      - name: recency
        data_type: string
        description: "Recency classification of the customer based on the time since their last order."
        data_tests:
          - dbt_utils.not_constant
          - not_null

      - name: frequency
        data_type: string
        description: "Frequency classification of the customer based on how often they place orders."
        data_tests:
          - dbt_utils.not_constant
          - not_null

      - name: segment
        data_type: string
        description: '{{ doc("segment") }}'
        data_tests:
          - dbt_utils.not_constant
          - not_null
          - accepted_values:
              name: dim_customers_unexpected_segment
              values: ['Loyal Leader', 'Growing Patron', 'New Enthusiast', 'Casual Shopper', 'Waning Loyalty', 'Slipping Newcomer', 'At-Risk Regular', 'Vanished Buyer', 'One-Time Buyer', 'Dormant Customer']

      - name: segment_id
        data_type: int64
        description: "Unique identifier for the rfm customer segment."
        data_tests:
          - dbt_utils.not_constant
          - not_null
          - dbt_utils.accepted_range:
              name: dim_customers_unexpected_segment_id
              min_value: 0
              max_value: 10




  - name: fct_orders
    config:
      contract:
        enforced: true 
    description: >
       Fact table capturing detailed information about customer orders, including order details, payment methods, 
       shipping, returns, and customer feedback. This table provides a comprehensive view of each order's lifecycle, 
       enabling in-depth analysis of sales performance, customer behavior, and product profitability.
    data_tests:
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: fct_orders_unequal_agg_gross_revenue
          expression: sum(gross_revenue)
          compare_model: ref("int_payments")
          compare_expression: sum(gross_revenue)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: fct_orders_unequal_agg_cogs
          expression: sum(cogs)
          compare_model: ref("int_orders")
          compare_expression: 'sum(inbound_shipping_cost) + sum(product_cost)'
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: fct_orders_unequal_agg_shipping_amount
          expression: sum(shipping_amount)
          compare_model: ref("int_orders")
          compare_expression: sum(shipping_amount)
    columns:
      - name: country_id
        data_type: int64
        constraints: 
          - type: not_null
        description: "Identifier for the billing country of the order and used as the partition field."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.accepted_range:
              name: fct_orders_unexpected_country_id
              min_value: 0
              max_value: 22

      - name: country
        data_type: string
        constraints: 
          - type: not_null
        description: "The billing country associated with the order."
        data_tests:
          - not_null
          - dbt_utils.not_constant

      - name: order_id
        data_type: string
        constraints: 
          - type: not_null
          - type: primary_key
            warn_unenforced: false
        description: "Unique identifier for the order."
        data_tests:
          - not_null
          - unique
          - relationships:
              to: ref('int_orders')
              field: order_id

      - name: order_status
        data_type: string
        constraints: 
          - type: not_null
        description: '{{ doc("orders_status") }}'
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - accepted_values:
              name: fct_orders_unexpected_order_status
              values: ['completed', 'failed']

      - name: customer_id
        data_type: string
        constraints: 
          - type: not_null
        description: "Unique identifier for the customer placing the order."
        data_tests:
          - not_null
          - dbt_utils.not_constant

      - name: nb_payments
        data_type: int64
        constraints: 
          - type: not_null
        description: "The number of payments made by the customer for the order."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: fct_orders_unexpected_nb_payments
              expression: "> 0"

      - name: first_name
        data_type: string
        constraints: 
          - type: not_null
        description: "The first name of the customer."
        data_tests:
          - not_null
          - dbt_utils.not_constant

      - name: last_name
        data_type: string
        constraints: 
          - type: not_null
        description: "The last name of the customer."
        data_tests:
          - not_null
          - dbt_utils.not_constant

      - name: is_shipped
        data_type: boolean
        description: "Indicates whether the order has been shipped (TRUE if shipped, FALSE otherwise)."
        data_tests:
          - accepted_values:
              name: fct_orders_unexpected_is_shipped_bool
              values: [TRUE, FALSE]
              quote: false

      - name: shipping_id
        data_type: string
        description: >
          A unique identifier for each shipping transaction. This field ensures that each shipment is 
          tracked individually and is essential for linking sales orders to their corresponding shipping details.
        data_tests:
          - unique
          - dbt_utils.not_constant

      - name: shipping_amount
        data_type: float64
        description: "The total gross amount charged for shipping the order."
        data_tests:
          - dbt_utils.expression_is_true:
              name: fct_orders_assert_positive_shipping_amount
              expression: "> 0"

      - name: payment_method
        data_type: string
        constraints: 
          - type: not_null
        description: "The payment method used for the order; accepted values include 'amazon_pay', 'stripe', 'apple_pay', and 'bitcoin'."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - accepted_values:
              name: fct_orders_unexpected_payment_method
              values: ['amazon_pay', 'stripe', 'apple_pay', 'bitcoin']

      - name: gross_revenue
        data_type: float64
        constraints: 
          - type: not_null
        description: "The total gross amount paid by the customer, including tax and shipping."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: fct_orders_assert_positive_gross_revenue
              expression: "> 0"

      - name: tax_rate
        data_type: float64
        constraints: 
          - type: not_null
        description: "The tax rate applied to the order, based on the billing country."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.accepted_range:
              name: fct_orders_unexpected_tax_rate
              min_value: 0
              max_value: 100
          - dbt_utils.expression_is_true:
              name: fct_orders_assert_positive_tax_rate
              expression: "> 0"              

      - name: tax_amount
        data_type: float64
        constraints: 
          - type: not_null
        description: "The total amount of tax charged on the order."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: fct_orders_unexpected_tax_amount
              expression: "= SAFE_MULTIPLY(SAFE_SUBTRACT(gross_revenue, COALESCE(shipping_amount, 0)), SAFE_DIVIDE(tax_rate, 100))"

      - name: net_revenue_before_tax
        data_type: float64
        constraints: 
          - type: not_null
        description: "The gross revenue from the order minus the shipping amount."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: fct_orders_unexpected_net_revenue_before_tax
              expression: "= SAFE_SUBTRACT(gross_revenue, COALESCE(shipping_amount, 0))"

      - name: net_revenue_after_tax
        data_type: float64
        constraints: 
          - type: not_null
        description: "The gross revenue from the order minus both shipping and tax amounts."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: fct_orders_unexpected_net_revenue_after_tax
              expression: "= SAFE_DIVIDE(SAFE_SUBTRACT(gross_revenue, COALESCE(shipping_amount, 0)), (1 + SAFE_DIVIDE(tax_rate, 100)))"

      - name: order_date
        data_type: datetime
        constraints: 
          - type: not_null
        description: "The date on which the order was created."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.accepted_range:
              name: fct_orders_unexpected_order_date
              max_value: "current_datetime()"

      - name: shipping_date
        data_type: datetime
        description: "The date on which the order was shipped."
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.accepted_range:
              name: fct_orders_unexpected_shipping_date
              max_value: "current_datetime()"

      - name: is_returned
        data_type: boolean
        description: "Indicates whether the order was returned (TRUE if returned, FALSE otherwise)."
        data_tests:
          - accepted_values:
              name: fct_orders_unexpected_is_returned_bool
              values: [TRUE, FALSE]
              quote: false

      - name: return_id
        data_type: string
        description: >
          A unique identifier for each return associated with an order. This field is populated only 
          if the order has been returned, and remains null for non-returned orders.
        data_tests:
          - unique
          - dbt_utils.not_constant

      - name: return_date
        data_type: datetime
        description: "The date on which the order was returned, if applicable."
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.accepted_range:
              name: fct_orders_unexpected_return_date
              max_value: "current_datetime()"

      - name: return_reason
        data_type: string
        description: '{{ doc("return_reason") }}'
        data_tests:
          - dbt_utils.not_constant
          - accepted_values:
              name: fct_orders_unexpected_return_reason
              values: ['Not as Described', 'Compatibility Issues', 'Quality Concerns', 'Technical Difficulties']

      - name: fulfillment_days
        data_type: int64
        description: "The number of days between the order date and the shipping date, representing the time taken to fulfill the order."
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: fct_orders_unexpected_fulfillment_days
              expression: "= DATE_DIFF(shipping_date, order_date, DAY)"

      - name: is_nps
        data_type: boolean
        description: "Indicates whether the customer provided an NPS (Net Promoter Score) score (TRUE if provided, FALSE otherwise)."
        data_tests:
          - dbt_utils.not_constant
          - accepted_values:
              name: fct_orders_unexpected_is_nps_bool
              values: [TRUE, FALSE]
              quote: false

      - name: nps_score
        data_type: int64
        description: "The Net Promoter Score (NPS) provided by the customer, ranging from 0 to 10, which indicates customer satisfaction and loyalty."
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 10

      - name: nps_date
        data_type: datetime
        description: "The date on which the customer provided their Net Promoter Score (NPS)."
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.accepted_range:
              name: fct_orders_unexpected_nps_date
              max_value: "current_datetime()"

      - name: product_category_id
        data_type: int64
        constraints: 
          - type: not_null
        description: "Unique identifier for the product's category."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.accepted_range:
              name: fct_orders_unexpected_product_category_id
              min_value: 0
              max_value: 5

      - name: product_category
        data_type: string
        constraints: 
          - type: not_null
        description: "The name of the category to which the product belongs."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - accepted_values:
              name: fct_orders_unexpected_product_category
              values: ['Design Templates', 'Fonts & Typography', 'Graphic Assets', 'Stock Photography', 'Video & Animation']

      - name: product_id
        data_type: int64
        constraints: 
          - type: not_null
        description: "Unique identifier for the product."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.accepted_range:
              name: fct_orders_unexpected_product_id
              min_value: 0
              max_value: 5

      - name: product_name
        data_type: string
        constraints: 
          - type: not_null
        description: "The name of the product."
        data_tests:
          - not_null
          - dbt_utils.not_constant

      - name: cogs
        data_type: float64
        constraints: 
          - type: not_null
        description: >
          The cost of goods sold (COGS) for the product, representing the direct costs 
          attributable to the production of the product sold in the order.
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: fct_orders_unexpected_cogs
              expression: "> 0"

      - name: returned_cogs
        data_type: float64
        constraints: 
          - type: not_null
        description: >
          The cost of goods sold (COGS) associated with returned products, representing 
          the direct costs of the returned items.
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: fct_orders_unexpected_returned_cogs
              expression: "= cogs"
              config:
                where: "returned_cogs > 0"

      - name: refund_amount
        data_type: float64
        constraints: 
          - type: not_null
        description: "The amount refunded to the customer for returned products or order cancellations."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: fct_orders_unexpected_refund_amount
              expression: "= (gross_revenue - shipping_amount)"
              config:
                where: "refund_amount > 0"

      - name: payment_fee
        data_type: float64
        constraints: 
          - type: not_null
        description: "The fee charged by the payment processor for handling the transaction associated with the order."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: fct_orders_assert_positive_payment_fee
              expression: "> 0"

      - name: cm
        data_type: float64
        constraints: 
          - type: not_null
        description: "The fee charged by the payment processor for handling the transaction associated with the order."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: fct_orders_unexpected_cm
              expression: "< gross_revenue"

      - name: customer_order_nb
        data_type: int64
        constraints: 
          - type: not_null
        description: >
          The customer's order number. 1 indicates a first-time order (new customer), while any number 
          greater than 1 indicates that the customer has placed multiple orders (returning customer).
        data_tests:
          - not_null
          - dbt_utils.not_constant

      - name: customer_type
        data_type: string
        constraints: 
          - type: not_null
        description: >
          Indicates whether a customer is new or returning. The values can be 'new' for first-time 
          customers and 'returning' for customers who have made previous purchases.
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - accepted_values:
              name: fct_orders_unexpected_customer_type
              values: ['Returning', 'New']




  - name: fct_payment_methods
    config:
      contract:
        enforced: true
    description: "Fact table containing details of payment methods used in customer orders."
    data_tests:
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: fct_payment_methods_unequal_agg_gross_revenue
          expression: sum(total_gross_revenue)
          compare_model: ref("int_payments")
          compare_expression: sum(gross_revenue)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: fct_payment_methods_unequal_agg_payment_fees
          expression: sum(total_payment_fees)
          compare_model: ref("int_payments")
          compare_expression: sum(payment_fee)
    columns:
      - name: country_id
        data_type: int64
        constraints: 
          - type: not_null
        description: "Identifier for the billing country associated with the order"
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.accepted_range:
              name: fct_payment_methods_unexpected_country_id
              min_value: 0
              max_value: 22

      - name: country
        data_type: string
        constraints: 
          - type: not_null
        description: "The name of the billing country associated with the order."
        data_tests:
          - not_null
          - dbt_utils.not_constant

      - name: order_id
        data_type: string
        constraints: 
          - type: not_null
          - type: primary_key
            warn_unenforced: false
        description: "Unique identifier for the order, serving as a reference to the specific transaction."
        data_tests:
          - not_null
          - unique
          - dbt_utils.not_constant
          - relationships:
              to: ref('int_payments')
              field: order_id

      - name: nb_payments
        data_type: int64
        constraints: 
          - type: not_null
        description: "The total number of payments made for the order, indicating the frequency of transactions associated with the order."
        data_tests:
          - not_null
          - dbt_utils.expression_is_true:
              name: fct_payment_methods_assert_positive_nb_payments
              expression: "> 0"

      - name: payment_methods
        data_type: string
        constraints: 
          - type: not_null
        description: >
          Indicates whether a single or multiple distinct payment methods were used for the order. 
          The value is 'single' if only one payment method was used or 'multiple' if more than one distinct payment method was utilized.
        data_tests:
          - not_null

      - name: order_date
        data_type: datetime
        constraints: 
          - type: not_null
        description: "The date on which the order was placed."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.accepted_range:
              name: fct_payment_methods_unexpected_order_date
              max_value: "current_datetime()"

      - name: order_status
        data_type: string
        constraints: 
          - type: not_null
        description: '{{ doc("orders_status") }}'
        data_tests:
          - not_null
          - accepted_values:
              name: fct_payment_methods_unexpected_order_status
              values: ['completed', 'failed']

      - name: total_gross_revenue
        data_type: float64
        constraints: 
          - type: not_null
        description: "The total gross revenue generated from the order, representing the sum of all payments before any deductions or fees."
        data_tests:
          - not_null
          - dbt_utils.expression_is_true:
              name: fct_payment_methods_assert_positive_total_gross_revenue
              expression: "> 0"

      - name: total_payment_fees
        data_type: float64
        constraints: 
          - type: not_null
        description: "The total amount of fees incurred for processing all payment methods associated with the order."
        data_tests:
          - not_null
          - dbt_utils.expression_is_true:
              name: fct_payment_methods_assert_positive_total_payment_fees
              expression: "> 0"

      - name: amazon_pay_payment_fees
        data_type: float64
        constraints: 
          - type: not_null
        description: "The total fees charged for processing payments through Amazon Pay."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: fct_payment_methods_unexpected_amazon_pay_payment_fees
              expression: ">= 0"

      - name: apple_pay_payment_fees
        data_type: float64
        constraints: 
          - type: not_null
        description: "The total fees charged for processing payments through Apple Pay."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: fct_payment_methods_unexpected_apple_pay_payment_fees
              expression: ">= 0"

      - name: bitcoin_payment_fees
        data_type: float64
        constraints: 
          - type: not_null
        description: "The total fees charged for processing payments through Bitcoin."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: fct_payment_methods_unexpected_bitcoin_payment_fees
              expression: ">= 0"

      - name: stripe_payment_fees
        data_type: float64
        constraints: 
          - type: not_null
        description: "The total fees charged for processing payments through Stripe."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: fct_payment_methods_unexpected_stripe_payment_fees
              expression: ">= 0"

      - name: amazon_pay_amount
        data_type: float64
        constraints: 
          - type: not_null
        description: "The total amount paid using Amazon Pay for the order."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: fct_payment_methods_unexpected_amazon_pay_amount
              expression: ">= 0"

      - name: apple_pay_amount
        data_type: float64
        constraints: 
          - type: not_null
        description: "The total amount paid using Apple Pay for the order."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: fct_payment_methods_unexpected_apple_pay_amount
              expression: ">= 0"

      - name: bitcoin_amount
        data_type: float64
        constraints: 
          - type: not_null
        description: "The total amount paid using Bitcoin for the order."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: fct_payment_methods_unexpected_bitcoin_amount
              expression: ">= 0"

      - name: stripe_amount
        data_type: float64
        constraints: 
          - type: not_null
        description: "The total amount paid using Stripe for the order."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: fct_payment_methods_unexpected_stripe_amount
              expression: ">= 0"




  - name: fct_orders_timeseries
    config:
      contract:
        enforced: true
    description: >
      Fact table capturing the daily sales time series data, including the total net revenue after tax (`sales`). 
      The table also includes various Simple Moving Averages (SMA) and Bollinger Bands calculated over different 
      periods (14, 30, 60, 120, and 250 days). This table is essential for analyzing sales trends, understanding 
      market volatility, and smoothing out fluctuations in daily sales data."
    data_tests:
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: fct_orders_timeseries_unequal_agg_sales
          expression: sum(sales)
          compare_model: ref("fct_orders")
          compare_expression: sum(net_revenue_after_tax)
    columns:
      - name: date
        data_type: date
        constraints: 
          - type: not_null
          - type: primary_key
            warn_unenforced: false
        description: "The date corresponding to the recorded sales figures."
        data_tests:
          - not_null
          - dbt_utils.not_constant

      - name: sales
        data_type: float64
        description: >
          The total net revenue after tax for each day, representing the sum of all sales transactions. 
          This field is used as the basis for calculating various metrics such as Simple Moving Averages (SMA) and Bollinger Bands.
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: fct_orders_timeseries_assert_positive_sales
              expression: "> 0"

      - name: sales_wma_7
        data_type: float64
        constraints: 
          - type: not_null
        description: >
          The wma_sales_7 column represents a 7-day weighted moving average of sales, where more recent days are assigned higher weights to emphasize recent sales trends. 
          This approach helps smooth out short-term fluctuations in sales data and highlights underlying trends, making it easier to analyze sales performance over time. 
          The weights applied in the calculation prioritize the most recent sales, with a total of 7 days considered in the average.
        data_tests:
          - not_null
          - dbt_utils.not_constant

      - name: sales_sma_7
        data_type: float64
        constraints: 
          - type: not_null
        description: "The 7-day Simple Moving Average (SMA) of daily sales, providing a balance between short-term and medium-term trend analysis."
        data_tests:
          - not_null
          - dbt_utils.not_constant

      - name: sales_sma_14
        data_type: float64
        constraints: 
          - type: not_null
        description: "The 14-day Simple Moving Average (SMA) of daily sales, providing a balance between short-term and medium-term trend analysis."
        data_tests:
          - not_null
          - dbt_utils.not_constant

      - name: sales_sma_30
        data_type: float64
        constraints: 
          - type: not_null
        description: "The 30-day Simple Moving Average (SMA) of daily sales, offering a slightly longer-term view on sales trends."
        data_tests:
          - not_null
          - dbt_utils.not_constant

      - name: sales_sma_60
        data_type: float64
        constraints: 
          - type: not_null
        description: "The 60-day Simple Moving Average (SMA) of daily sales, representing a quarterly trend for sales data."
        data_tests:
          - not_null
          - dbt_utils.not_constant

      - name: sales_sma_120
        data_type: float64
        constraints: 
          - type: not_null
        description: "The 120-day Simple Moving Average (SMA) of daily sales, useful for identifying trends over half a year."
        data_tests:
          - not_null
          - dbt_utils.not_constant

      - name: sales_sma_upper_7
        data_type: float64
        description: >
          The upper Bollinger Band for the 7-day Simple Moving Average, calculated as the SMA plus two standard deviations. 
          Indicates the potential upper bound of short-term sales trends.
        data_tests:
          - not_null:
              config: 
                severity: warn
                error_if: ">20"
                warn_if: ">10"
          - dbt_utils.not_constant

      - name: sales_sma_lower_7
        data_type: float64
        description: >
          The lower Bollinger Band for the 7-day Simple Moving Average, calculated as the SMA minus two standard deviations. 
          Indicates the potential lower bound of short-term sales trends.
        data_tests:
          - not_null:
              config: 
                severity: warn
                error_if: ">20"
                warn_if: ">10"
          - dbt_utils.not_constant

      - name: sales_sma_upper_14
        data_type: float64
        description: >
          The upper Bollinger Band for the 14-day Simple Moving Average, calculated as the SMA plus two standard deviations. 
          Indicates the potential upper bound of short-term sales trends.
        data_tests:
          - not_null:
              config: 
                severity: warn
                error_if: ">20"
                warn_if: ">10"
          - dbt_utils.not_constant

      - name: sales_sma_lower_14
        data_type: float64
        description: >
          The lower Bollinger Band for the 14-day Simple Moving Average, calculated as the SMA minus two standard deviations. 
          Indicates the potential lower bound of short-term sales trends.
        data_tests:
          - not_null:
              config: 
                severity: warn
                error_if: ">20"
                warn_if: ">10"
          - dbt_utils.not_constant

      - name: sales_sma_upper_30
        data_type: float64
        description: >
          The upper Bollinger Band for the 30-day Simple Moving Average, calculated as the SMA plus two standard deviations. 
          Represents the potential upper bound for monthly sales trends.
        data_tests:
          - not_null:
              config: 
                severity: warn
                error_if: ">20"
                warn_if: ">10"
          - dbt_utils.not_constant

      - name: sales_sma_lower_30
        data_type: float64
        description: >
          The lower Bollinger Band for the 30-day Simple Moving Average, calculated as the SMA minus two standard deviations. 
          Represents the potential lower bound for monthly sales trends.
        data_tests:
          - not_null:
              config: 
                severity: warn
                error_if: ">20"
                warn_if: ">10"
          - dbt_utils.not_constant

      - name: sales_sma_upper_60
        data_type: float64
        description: >
          The upper Bollinger Band for the 60-day Simple Moving Average, calculated as the SMA plus two standard deviations. 
          Indicates the upper limit of quarterly sales trends.
        data_tests:
          - not_null:
              config: 
                severity: warn
                error_if: ">20"
                warn_if: ">10"
          - dbt_utils.not_constant

      - name: sales_sma_lower_60
        data_type: float64
        description: > 
          The lower Bollinger Band for the 60-day Simple Moving Average, calculated as the SMA minus two standard deviations. 
          Indicates the lower limit of quarterly sales trends.
        data_tests:
          - not_null:
              config: 
                severity: warn
                error_if: ">20"
                warn_if: ">10"
          - dbt_utils.not_constant

      - name: sales_sma_upper_120
        data_type: float64
        description: >
          The upper Bollinger Band for the 120-day Simple Moving Average, calculated as the SMA plus two standard deviations. 
          Provides the upper bound for sales trends over half a year.
        data_tests:
          - not_null:
              config: 
                severity: warn
                error_if: ">20"
                warn_if: ">10"
          - dbt_utils.not_constant

      - name: sales_sma_lower_120
        data_type: float64
        description: >
          The lower Bollinger Band for the 120-day Simple Moving Average, calculated as the SMA minus two standard deviations. 
          Provides the lower bound for sales trends over half a year.
        data_tests:
          - not_null:
              config: 
                severity: warn
                error_if: ">20"
                warn_if: ">10"
          - dbt_utils.not_constant




  - name: dim_products
    config:
      contract:
        enforced: true
    description: >
      This table contains dimensional data for products across different categories, regions, and timeframes. 
      It provides aggregated insights into sales, returns, shipping, and revenue performance, along with key 
      customer satisfaction and operational metrics. The table is used in dashboards for product performance 
      analysis and sales strategy optimization.
    data_tests:
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: dim_products_unequal_agg_total_gross_revenue
          expression: sum(total_gross_revenue)
          compare_model: ref("fct_orders")
          compare_expression: sum(gross_revenue)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: dim_products_unequal_agg_total_tax_amount
          expression: sum(total_tax_amount)
          compare_model: ref("fct_orders")
          compare_expression: sum(tax_amount)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: dim_products_unequal_agg_total_net_revenue_before_tax
          expression: sum(total_net_revenue_before_tax)
          compare_model: ref("fct_orders")
          compare_expression: sum(net_revenue_before_tax)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: dim_products_unequal_agg_total_net_revenue_after_tax
          expression: sum(total_net_revenue_after_tax)
          compare_model: ref("fct_orders")
          compare_expression: sum(net_revenue_after_tax)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: dim_products_unequal_agg_total_cogs
          expression: sum(total_cogs)
          compare_model: ref("fct_orders")
          compare_expression: sum(cogs)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: dim_products_unequal_agg_total_returned_cogs
          expression: sum(total_returned_cogs)
          compare_model: ref("fct_orders")
          compare_expression: sum(returned_cogs)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: dim_products_unequal_agg_total_refund_amount
          expression: sum(total_refund_amount)
          compare_model: ref("fct_orders")
          compare_expression: sum(refund_amount)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: dim_products_unequal_agg_total_payment_fee
          expression: sum(total_payment_fee)
          compare_model: ref("fct_orders")
          compare_expression: sum(payment_fee)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          name: dim_products_unequal_agg_total_cm
          expression: sum(total_cm)
          compare_model: ref("fct_orders")
          compare_expression: sum(cm)

    columns:
      - name: dim_product_id
        data_type: string
        constraints: 
          - type: not_null
          - type: primary_key
            warn_unenforced: false
        description: "Unique identifier of the dim_product record"
        data_tests:
          - unique
          - not_null

      - name: date
        data_type: date
        constraints: 
          - type: not_null
        description: "The date representing when the data for product performance was aggregated, providing a time reference for the metrics in the table."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.accepted_range:
              name: dim_products_unexpected_date
              max_value: "current_datetime()"

      - name: country_id
        data_type: int64
        constraints: 
          - type: not_null
        description: "A unique identifier for each country in which the product is sold or marketed, used to join with other geographical data tables."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.accepted_range:
              name: dim_products_unexpected_country_id
              min_value: 0
              max_value: 10

      - name: country
        data_type: string
        constraints: 
          - type: not_null
        description: "The name of the country where the product is sold or marketed, used to filter product performance based on geographic regions."
        data_tests:
          - not_null
          - dbt_utils.not_constant

      - name: product_category
        data_type: string
        constraints: 
          - type: not_null
        description: "The category to which the product belongs, such as electronics, apparel, or digital assets, allowing for category-level analysis of performance."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - accepted_values:
              name: dim_products_unexpected_product_category
              values: ['Design Templates', 'Fonts & Typography', 'Graphic Assets', 'Stock Photography', 'Video & Animation']

      - name: product_name
        data_type: string
        constraints: 
          - type: not_null
        description: "The name of the individual product being tracked, used for granular analysis of sales, returns, and other performance metrics."
        data_tests:
          - not_null
          - dbt_utils.not_constant

      - name: nb_order_id
        data_type: int64
        constraints: 
          - type: not_null
        description: "The number of unique orders associated with the product, used to measure sales volume and demand for the product."
        data_tests:
          - not_null
          - dbt_utils.not_constant

      - name: nb_shipping_id
        data_type: int64
        constraints: 
          - type: not_null
        description: "The number of shipping transactions associated with the product, used to track logistics performance and delivery efficiency."
        data_tests:
          - not_null
          - dbt_utils.not_constant

      - name: nb_return_id
        data_type: int64
        constraints: 
          - type: not_null
        description: "The number of product returns, used to analyze product quality, customer satisfaction, and return rates for the product."
        data_tests:
          - not_null
          - dbt_utils.not_constant

      - name: avg_fulfillment_days
        data_type: float64
        description: "The average number of days it takes to fulfill an order for the product, providing insights into supply chain efficiency and customer experience."
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: dim_products_assert_positive_avg_fulfillment_days
              expression: "> 0"
              config:
                where: avg_fulfillment_days IS NOT NULL

      - name: avg_nps_score
        data_type: float64
        description: "The average Net Promoter Score (NPS) for the product, indicating customer satisfaction and likelihood to recommend the product."
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: dim_products_assert_positive_avg_nps_score
              expression: "> 0"
              config:
                where: avg_nps_score IS NOT NULL

      - name: total_gross_revenue
        data_type: float64
        constraints: 
          - type: not_null
        description: "The total gross revenue generated by the product before any deductions for taxes, returns, or fees, providing a top-level view of sales performance."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: dim_products_assert_positive_total_gross_revenue
              expression: "> 0"

      - name: total_tax_amount
        data_type: float64
        constraints: 
          - type: not_null
        description: "The total amount of taxes collected for sales of the product, used to calculate net revenue and assess the impact of taxes on overall profitability."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: dim_products_assert_positive_total_tax_amount
              expression: "> 0"

      - name: total_net_revenue_before_tax
        data_type: float64
        constraints: 
          - type: not_null
        description: "The total net revenue generated by the product before taxes are applied, used to assess profitability before accounting for tax obligations."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: dim_products_assert_positive_total_net_revenue_before_tax
              expression: "> 0"

      - name: total_net_revenue_after_tax
        data_type: float64
        constraints: 
          - type: not_null
        description: "The total net revenue generated by the product after taxes have been deducted, providing an accurate representation of revenue after all tax liabilities."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: dim_products_assert_positive_total_net_revenue_after_tax
              expression: "> 0"

      - name: total_cogs
        data_type: float64
        constraints: 
          - type: not_null
        description: "The total cost of goods sold (COGS) for the product, including manufacturing, shipping, and handling costs, used to calculate profit margins."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: dim_products_assert_positive_total_cogs
              expression: "> 0"

      - name: total_returned_cogs
        data_type: float64
        constraints: 
          - type: not_null
        description: "The total cost of goods sold for returned items, providing insights into the financial impact of product returns on profitability."
        data_tests:
          - not_null
          - dbt_utils.not_constant

      - name: total_refund_amount
        data_type: float64
        constraints: 
          - type: not_null
        description: "The total amount refunded to customers for returned products, used to assess the overall impact of returns on net revenue."
        data_tests:
          - not_null
          - dbt_utils.not_constant

      - name: total_payment_fee
        data_type: float64
        constraints: 
          - type: not_null
        description: "The total fees associated with payment processing for the product, including transaction fees from providers like credit card companies or digital wallets."
        data_tests:
          - not_null
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              name: dim_products_assert_positive_total_payment_fee
              expression: "> 0"

      - name: total_cm
        data_type: float64
        constraints: 
          - type: not_null
        description: "The total contribution margin for the product, calculated as net revenue minus cost of goods sold (COGS), providing a clear view of product profitability."
        data_tests:
          - not_null
          - dbt_utils.not_constant