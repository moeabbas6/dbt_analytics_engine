version: 2

models:
  - name: dim_products
    config:
      contract:
        enforced: true
      enabled: false
    description: >
      This table contains dimensional data for products across different categories, regions, and timeframes. 
      It provides aggregated insights into sales, returns, shipping, and revenue performance, along with key 
      customer satisfaction and operational metrics. The table is used in dashboards for product performance 
      analysis and sales strategy optimization.
    data_tests:
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          expression: sum(total_gross_revenue)
          compare_model: ref("fct_orders")
          compare_expression: sum(gross_revenue)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          expression: sum(total_tax_amount)
          compare_model: ref("fct_orders")
          compare_expression: sum(tax_amount)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          expression: sum(total_net_revenue_before_tax)
          compare_model: ref("fct_orders")
          compare_expression: sum(net_revenue_before_tax)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          expression: sum(total_net_revenue_after_tax)
          compare_model: ref("fct_orders")
          compare_expression: sum(net_revenue_after_tax)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          expression: sum(total_cogs)
          compare_model: ref("fct_orders")
          compare_expression: sum(cogs)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          expression: sum(total_returned_cogs)
          compare_model: ref("fct_orders")
          compare_expression: sum(returned_cogs)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          expression: sum(total_refund_amount)
          compare_model: ref("fct_orders")
          compare_expression: sum(refund_amount)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          expression: sum(total_payment_fee)
          compare_model: ref("fct_orders")
          compare_expression: sum(payment_fee)
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          expression: sum(total_cm)
          compare_model: ref("fct_orders")
          compare_expression: sum(cm)


    columns:
      - name: dim_product_id
        data_type: string
        constraints: 
          - type: not_null
          - type: primary_key
            warn_unenforced: false
        description: '{{ doc("dim_product_id") }}'


      - name: date
        data_type: date
        constraints: 
          - type: not_null
        description: '{{ doc("dim_date") }}'
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.accepted_range:
              max_value: "current_datetime()"


      - name: country_id
        data_type: int64
        constraints: 
          - type: not_null
        description: '{{ doc("country_id") }}'
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 10


      - name: country
        data_type: string
        constraints: 
          - type: not_null
        description: '{{ doc("country") }}'
        data_tests:
          - dbt_utils.not_constant


      - name: product_category
        data_type: string
        constraints: 
          - type: not_null
        description: '{{ doc("product_category") }}'
        data_tests:
          - dbt_utils.not_constant
          - accepted_values:
              values: ['Design Templates', 'Fonts & Typography', 'Graphic Assets', 'Stock Photography', 'Video & Animation']


      - name: product_name
        data_type: string
        constraints: 
          - type: not_null
        description: '{{ doc("product_name") }}'
        data_tests:
          - dbt_utils.not_constant


      - name: nb_order_id
        data_type: int64
        constraints: 
          - type: not_null
        description: '{{ doc("nb_order_id") }}'
        data_tests:
          - dbt_utils.not_constant


      - name: nb_shipping_id
        data_type: int64
        constraints: 
          - type: not_null
        description: '{{ doc("nb_shipping_id") }}'
        data_tests:
          - dbt_utils.not_constant


      - name: nb_return_id
        data_type: int64
        constraints: 
          - type: not_null
        description: '{{ doc("nb_return_id") }}'
        data_tests:
          - dbt_utils.not_constant


      - name: avg_fulfillment_days
        data_type: float64
        description: '{{ doc("avg_fulfillment_days") }}'
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              expression: "> 0"
              config:
                where: avg_fulfillment_days IS NOT NULL


      - name: avg_nps_score
        data_type: float64
        description: '{{ doc("avg_nps_score") }}'
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              expression: "> 0"
              config:
                where: avg_nps_score IS NOT NULL


      - name: total_gross_revenue
        data_type: float64
        constraints: 
          - type: not_null
        description: '{{ doc("total_gross_revenue") }}'
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              expression: "> 0"


      - name: total_tax_amount
        data_type: float64
        constraints: 
          - type: not_null
        description: '{{ doc("total_tax_amount") }}'
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              expression: "> 0"


      - name: total_net_revenue_before_tax
        data_type: float64
        constraints: 
          - type: not_null
        description: '{{ doc("total_net_revenue_before_tax") }}'
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              expression: "> 0"


      - name: total_net_revenue_after_tax
        data_type: float64
        constraints: 
          - type: not_null
        description: '{{ doc("total_net_revenue_after_tax") }}'
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              expression: "> 0"


      - name: total_cogs
        data_type: float64
        constraints: 
          - type: not_null
        description: '{{ doc("total_cogs") }}'
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              expression: "> 0"


      - name: total_returned_cogs
        data_type: float64
        constraints: 
          - type: not_null
        description: '{{ doc("total_returned_cogs") }}'
        data_tests:
          - dbt_utils.not_constant


      - name: total_refund_amount
        data_type: float64
        constraints: 
          - type: not_null
        description: '{{ doc("total_refund_amount") }}'
        data_tests:
          - dbt_utils.not_constant


      - name: total_payment_fee
        data_type: float64
        constraints: 
          - type: not_null
        description: '{{ doc("total_payment_fee") }}'
        data_tests:
          - dbt_utils.not_constant
          - dbt_utils.expression_is_true:
              expression: "> 0"


      - name: total_cm
        data_type: float64
        constraints: 
          - type: not_null
        description: '{{ doc("total_cm") }}'
        data_tests:
          - dbt_utils.not_constant