{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.8.4", "generated_at": "2024-09-13T19:13:56.790425Z", "invocation_id": "f4dbc0f6-f212-4294-a5c8-36b9f53a71a8", "env": {}, "project_name": "dbt_analytics_engine", "project_id": "2e7037849c3d84cca3da5118c2c8763f", "user_id": "16cad4db-a805-4435-a0c2-ffddc254078c", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.dbt_analytics_engine.stg_products": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev", "name": "stg_products", "resource_type": "model", "package_name": "dbt_analytics_engine", "path": "staging/stg_products.sql", "original_file_path": "models/staging/stg_products.sql", "unique_id": "model.dbt_analytics_engine.stg_products", "fqn": ["dbt_analytics_engine", "staging", "stg_products"], "alias": "stg_products", "checksum": {"name": "sha256", "checksum": "cae77da6f80b682817301e9ff76da3f1ff52fa3a4e9ab80bb721c065f1588736"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"product_category_id": {"name": "product_category_id", "description": "", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "product_category": {"name": "product_category", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "product_name": {"name": "product_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "inbound_shipping_cost": {"name": "inbound_shipping_cost", "description": "", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "product_cost": {"name": "product_cost", "description": "", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_analytics_engine://models/staging/_stg_models.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1726233319.4739351, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev`.`stg_products`", "raw_code": "WITH\n  stg_products AS (\n    SELECT product_category_id\n          ,product_category\n          ,product_id\n          ,product_name\n          ,inbound_shipping_cost\n          ,product_cost\n      FROM {{ ref('seed_products') }})\n\n\n  SELECT *\n    FROM stg_products", "language": "sql", "refs": [{"name": "seed_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.dbt_analytics_engine.seed_products"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_analytics_engine.stg_payment_fees": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev", "name": "stg_payment_fees", "resource_type": "model", "package_name": "dbt_analytics_engine", "path": "staging/stg_payment_fees.sql", "original_file_path": "models/staging/stg_payment_fees.sql", "unique_id": "model.dbt_analytics_engine.stg_payment_fees", "fqn": ["dbt_analytics_engine", "staging", "stg_payment_fees"], "alias": "stg_payment_fees", "checksum": {"name": "sha256", "checksum": "f8d5f57872524bbb05f25b72120ebbdc9bd8e4778b4ddd9a31678e3d5073be9e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"payment_method_id": {"name": "payment_method_id", "description": "", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "payment_method": {"name": "payment_method", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "percentage_fee": {"name": "percentage_fee", "description": "", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "fixed_fee": {"name": "fixed_fee", "description": "", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_analytics_engine://models/staging/_stg_models.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1726233319.471561, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev`.`stg_payment_fees`", "raw_code": "WITH\n  stg_payment_fees AS (\n    SELECT payment_method_id\n          ,payment_method\n          ,percentage_fee\n          ,fixed_fee\n      FROM {{ ref('seed_payment_fees') }})\n\n\n  SELECT *\n    FROM stg_payment_fees", "language": "sql", "refs": [{"name": "seed_payment_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.dbt_analytics_engine.seed_payment_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_analytics_engine.stg_taxes": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev", "name": "stg_taxes", "resource_type": "model", "package_name": "dbt_analytics_engine", "path": "staging/stg_taxes.sql", "original_file_path": "models/staging/stg_taxes.sql", "unique_id": "model.dbt_analytics_engine.stg_taxes", "fqn": ["dbt_analytics_engine", "staging", "stg_taxes"], "alias": "stg_taxes", "checksum": {"name": "sha256", "checksum": "358673e36bbb965f15c3cf4a94c68deca5272cf79e9b62a585e3d7060613fce3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"country_id": {"name": "country_id", "description": "", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_analytics_engine://models/staging/_stg_models.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1726233319.4757109, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev`.`stg_taxes`", "raw_code": "WITH\n  stg_taxes AS (\n    SELECT tax_id AS country_id\n          ,tax_country AS country\n          ,tax_rate\n      FROM {{ ref('seed_taxes') }})\n\n\n  SELECT *\n    FROM stg_taxes", "language": "sql", "refs": [{"name": "seed_taxes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.dbt_analytics_engine.seed_taxes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "seed.dbt_analytics_engine.seed_taxes": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_seeds", "name": "seed_taxes", "resource_type": "seed", "package_name": "dbt_analytics_engine", "path": "seed_taxes.csv", "original_file_path": "seeds/seed_taxes.csv", "unique_id": "seed.dbt_analytics_engine.seed_taxes", "fqn": ["dbt_analytics_engine", "seed_taxes"], "alias": "seed_taxes", "checksum": {"name": "sha256", "checksum": "51d5f643bb6ce127fb8ea833009041d02d9a7ed533600ce3653d77cd8c371172"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {"tax_id": {"name": "tax_id", "description": "", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "tax_country": {"name": "tax_country", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_analytics_engine://seeds/_seed_schemas.yml", "build_path": null, "unrendered_config": {"schema": "seeds"}, "created_at": 1726233320.25698, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_seeds`.`seed_taxes`", "raw_code": "", "root_path": "/Users/moeabbas/Documents/code/dbt_analytics_engine", "depends_on": {"macros": []}}, "test.dbt_analytics_engine.unique_seed_taxes_tax_id.f8c4c43c3b": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "unique_seed_taxes_tax_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "unique_seed_taxes_tax_id.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.unique_seed_taxes_tax_id.f8c4c43c3b", "fqn": ["dbt_analytics_engine", "unique_seed_taxes_tax_id"], "alias": "unique_seed_taxes_tax_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726233320.293668, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`unique_seed_taxes_tax_id`", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_taxes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.dbt_analytics_engine.seed_taxes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tax_id", "file_key_name": "seeds.seed_taxes", "attached_node": "seed.dbt_analytics_engine.seed_taxes", "test_metadata": {"name": "unique", "kwargs": {"column_name": "tax_id", "model": "{{ get_where_subquery(ref('seed_taxes')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_seed_taxes_tax_id.f55a6ff871": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_seed_taxes_tax_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_seed_taxes_tax_id.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.not_null_seed_taxes_tax_id.f55a6ff871", "fqn": ["dbt_analytics_engine", "not_null_seed_taxes_tax_id"], "alias": "not_null_seed_taxes_tax_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726233320.294863, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_seed_taxes_tax_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_taxes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.dbt_analytics_engine.seed_taxes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tax_id", "file_key_name": "seeds.seed_taxes", "attached_node": "seed.dbt_analytics_engine.seed_taxes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tax_id", "model": "{{ get_where_subquery(ref('seed_taxes')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.seed_taxes_unexpected_tax_id.fad3776053": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "seed_taxes_unexpected_tax_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "seed_taxes_unexpected_tax_id.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.seed_taxes_unexpected_tax_id.fad3776053", "fqn": ["dbt_analytics_engine", "seed_taxes_unexpected_tax_id"], "alias": "seed_taxes_unexpected_tax_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726233320.296036, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`seed_taxes_unexpected_tax_id`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_taxes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_analytics_engine.seed_taxes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tax_id", "file_key_name": "seeds.seed_taxes", "attached_node": "seed.dbt_analytics_engine.seed_taxes", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 22, "column_name": "tax_id", "model": "{{ get_where_subquery(ref('seed_taxes')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.unique_seed_taxes_tax_country.af4f5dce37": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "unique_seed_taxes_tax_country", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "unique_seed_taxes_tax_country.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.unique_seed_taxes_tax_country.af4f5dce37", "fqn": ["dbt_analytics_engine", "unique_seed_taxes_tax_country"], "alias": "unique_seed_taxes_tax_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726233320.2985861, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`unique_seed_taxes_tax_country`", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_taxes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.dbt_analytics_engine.seed_taxes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tax_country", "file_key_name": "seeds.seed_taxes", "attached_node": "seed.dbt_analytics_engine.seed_taxes", "test_metadata": {"name": "unique", "kwargs": {"column_name": "tax_country", "model": "{{ get_where_subquery(ref('seed_taxes')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_seed_taxes_tax_country.0252c9f25c": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_seed_taxes_tax_country", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_seed_taxes_tax_country.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.not_null_seed_taxes_tax_country.0252c9f25c", "fqn": ["dbt_analytics_engine", "not_null_seed_taxes_tax_country"], "alias": "not_null_seed_taxes_tax_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726233320.2997718, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_seed_taxes_tax_country`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_taxes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.dbt_analytics_engine.seed_taxes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tax_country", "file_key_name": "seeds.seed_taxes", "attached_node": "seed.dbt_analytics_engine.seed_taxes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tax_country", "model": "{{ get_where_subquery(ref('seed_taxes')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_seed_taxes_tax_rate.9483e90a15": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_seed_taxes_tax_rate", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_seed_taxes_tax_rate.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.not_null_seed_taxes_tax_rate.9483e90a15", "fqn": ["dbt_analytics_engine", "not_null_seed_taxes_tax_rate"], "alias": "not_null_seed_taxes_tax_rate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726233320.300937, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_seed_taxes_tax_rate`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_taxes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.dbt_analytics_engine.seed_taxes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tax_rate", "file_key_name": "seeds.seed_taxes", "attached_node": "seed.dbt_analytics_engine.seed_taxes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tax_rate", "model": "{{ get_where_subquery(ref('seed_taxes')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.seed_taxes_unexpected_tax_rate.f785d7f3ab": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "seed_taxes_unexpected_tax_rate", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "seed_taxes_unexpected_tax_rate.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.seed_taxes_unexpected_tax_rate.f785d7f3ab", "fqn": ["dbt_analytics_engine", "seed_taxes_unexpected_tax_rate"], "alias": "seed_taxes_unexpected_tax_rate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726233320.302187, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`seed_taxes_unexpected_tax_rate`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_taxes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_analytics_engine.seed_taxes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tax_rate", "file_key_name": "seeds.seed_taxes", "attached_node": "seed.dbt_analytics_engine.seed_taxes", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 100, "column_name": "tax_rate", "model": "{{ get_where_subquery(ref('seed_taxes')) }}"}, "namespace": "dbt_utils"}}, "seed.dbt_analytics_engine.seed_products": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_seeds", "name": "seed_products", "resource_type": "seed", "package_name": "dbt_analytics_engine", "path": "seed_products.csv", "original_file_path": "seeds/seed_products.csv", "unique_id": "seed.dbt_analytics_engine.seed_products", "fqn": ["dbt_analytics_engine", "seed_products"], "alias": "seed_products", "checksum": {"name": "sha256", "checksum": "9d691ac9209a37b48a6506d1fe2e3588620d4cd68d28022e1b6a92833423b8b3"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {"product_category_id": {"name": "product_category_id", "description": "", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "product_category": {"name": "product_category", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "product_name": {"name": "product_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "inbound_shipping_cost": {"name": "inbound_shipping_cost", "description": "", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "product_cost": {"name": "product_cost", "description": "", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_analytics_engine://seeds/_seed_schemas.yml", "build_path": null, "unrendered_config": {"schema": "seeds"}, "created_at": 1726248618.4039512, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_seeds`.`seed_products`", "raw_code": "", "root_path": "/Users/moeabbas/Documents/code/dbt_analytics_engine", "depends_on": {"macros": []}}, "test.dbt_analytics_engine.not_null_seed_products_product_category_id.4022d64939": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_seed_products_product_category_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_seed_products_product_category_id.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.not_null_seed_products_product_category_id.4022d64939", "fqn": ["dbt_analytics_engine", "not_null_seed_products_product_category_id"], "alias": "not_null_seed_products_product_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726248618.4522932, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_seed_products_product_category_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.dbt_analytics_engine.seed_products"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_category_id", "file_key_name": "seeds.seed_products", "attached_node": "seed.dbt_analytics_engine.seed_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_category_id", "model": "{{ get_where_subquery(ref('seed_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.seed_products__unexpected_product_category_id.65766e3428": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "seed_products__unexpected_product_category_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "seed_products__unexpected_product_category_id.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.seed_products__unexpected_product_category_id.65766e3428", "fqn": ["dbt_analytics_engine", "seed_products__unexpected_product_category_id"], "alias": "seed_products__unexpected_product_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726248618.4537868, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`seed_products__unexpected_product_category_id`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_analytics_engine.seed_products"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_category_id", "file_key_name": "seeds.seed_products", "attached_node": "seed.dbt_analytics_engine.seed_products", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 5, "column_name": "product_category_id", "model": "{{ get_where_subquery(ref('seed_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_seed_products_product_category.f11e3a13e9": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_seed_products_product_category", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_seed_products_product_category.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.not_null_seed_products_product_category.f11e3a13e9", "fqn": ["dbt_analytics_engine", "not_null_seed_products_product_category"], "alias": "not_null_seed_products_product_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726248618.4684649, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_seed_products_product_category`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.dbt_analytics_engine.seed_products"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_category", "file_key_name": "seeds.seed_products", "attached_node": "seed.dbt_analytics_engine.seed_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_category", "model": "{{ get_where_subquery(ref('seed_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.seed_products_unexpected_product_category.fec78e49d1": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "seed_products_unexpected_product_category", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "seed_products_unexpected_product_category.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.seed_products_unexpected_product_category.fec78e49d1", "fqn": ["dbt_analytics_engine", "seed_products_unexpected_product_category"], "alias": "seed_products_unexpected_product_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726248618.469694, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`seed_products_unexpected_product_category`", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_analytics_engine.seed_products"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_category", "file_key_name": "seeds.seed_products", "attached_node": "seed.dbt_analytics_engine.seed_products", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Design Templates", "Fonts & Typography", "Graphic Assets", "Stock Photography", "Video & Animation"], "column_name": "product_category", "model": "{{ get_where_subquery(ref('seed_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_seed_products_product_id.a4fccf3ddc": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_seed_products_product_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_seed_products_product_id.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.not_null_seed_products_product_id.a4fccf3ddc", "fqn": ["dbt_analytics_engine", "not_null_seed_products_product_id"], "alias": "not_null_seed_products_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726248618.476013, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_seed_products_product_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.dbt_analytics_engine.seed_products"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "seeds.seed_products", "attached_node": "seed.dbt_analytics_engine.seed_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('seed_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.seed_products_unexpected_product_id.741bb2630b": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "seed_products_unexpected_product_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "seed_products_unexpected_product_id.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.seed_products_unexpected_product_id.741bb2630b", "fqn": ["dbt_analytics_engine", "seed_products_unexpected_product_id"], "alias": "seed_products_unexpected_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726248618.47734, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`seed_products_unexpected_product_id`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_analytics_engine.seed_products"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "seeds.seed_products", "attached_node": "seed.dbt_analytics_engine.seed_products", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 5, "column_name": "product_id", "model": "{{ get_where_subquery(ref('seed_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.unique_seed_products_product_name.c6936fa379": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "unique_seed_products_product_name", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "unique_seed_products_product_name.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.unique_seed_products_product_name.c6936fa379", "fqn": ["dbt_analytics_engine", "unique_seed_products_product_name"], "alias": "unique_seed_products_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726248618.480208, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`unique_seed_products_product_name`", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.dbt_analytics_engine.seed_products"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_name", "file_key_name": "seeds.seed_products", "attached_node": "seed.dbt_analytics_engine.seed_products", "test_metadata": {"name": "unique", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('seed_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_seed_products_product_name.0b363a2b14": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_seed_products_product_name", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_seed_products_product_name.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.not_null_seed_products_product_name.0b363a2b14", "fqn": ["dbt_analytics_engine", "not_null_seed_products_product_name"], "alias": "not_null_seed_products_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726248618.481538, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_seed_products_product_name`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.dbt_analytics_engine.seed_products"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_name", "file_key_name": "seeds.seed_products", "attached_node": "seed.dbt_analytics_engine.seed_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('seed_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_seed_products_inbound_shipping_cost.f798cf8f2f": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_seed_products_inbound_shipping_cost", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_seed_products_inbound_shipping_cost.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.not_null_seed_products_inbound_shipping_cost.f798cf8f2f", "fqn": ["dbt_analytics_engine", "not_null_seed_products_inbound_shipping_cost"], "alias": "not_null_seed_products_inbound_shipping_cost", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726248618.482739, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_seed_products_inbound_shipping_cost`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.dbt_analytics_engine.seed_products"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "inbound_shipping_cost", "file_key_name": "seeds.seed_products", "attached_node": "seed.dbt_analytics_engine.seed_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "inbound_shipping_cost", "model": "{{ get_where_subquery(ref('seed_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.seed_products_assert_positive_inbound_shipping_cost.d4c0fd2082": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "seed_products_assert_positive_inbound_shipping_cost", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "seed_products_assert_positive_inbound_shipping_cost.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.seed_products_assert_positive_inbound_shipping_cost.d4c0fd2082", "fqn": ["dbt_analytics_engine", "seed_products_assert_positive_inbound_shipping_cost"], "alias": "seed_products_assert_positive_inbound_shipping_cost", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726248618.48393, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`seed_products_assert_positive_inbound_shipping_cost`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_analytics_engine.seed_products"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "inbound_shipping_cost", "file_key_name": "seeds.seed_products", "attached_node": "seed.dbt_analytics_engine.seed_products", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "inbound_shipping_cost", "model": "{{ get_where_subquery(ref('seed_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_seed_products_product_cost.d8f2f71464": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_seed_products_product_cost", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_seed_products_product_cost.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.not_null_seed_products_product_cost.d8f2f71464", "fqn": ["dbt_analytics_engine", "not_null_seed_products_product_cost"], "alias": "not_null_seed_products_product_cost", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726248618.4874392, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_seed_products_product_cost`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.dbt_analytics_engine.seed_products"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_cost", "file_key_name": "seeds.seed_products", "attached_node": "seed.dbt_analytics_engine.seed_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_cost", "model": "{{ get_where_subquery(ref('seed_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.seed_products_assert_positive_product_cost.b09ee25c64": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "seed_products_assert_positive_product_cost", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "seed_products_assert_positive_product_cost.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.seed_products_assert_positive_product_cost.b09ee25c64", "fqn": ["dbt_analytics_engine", "seed_products_assert_positive_product_cost"], "alias": "seed_products_assert_positive_product_cost", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726248618.488649, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`seed_products_assert_positive_product_cost`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_analytics_engine.seed_products"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_cost", "file_key_name": "seeds.seed_products", "attached_node": "seed.dbt_analytics_engine.seed_products", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "product_cost", "model": "{{ get_where_subquery(ref('seed_products')) }}"}, "namespace": "dbt_utils"}}, "model.dbt_analytics_engine.int_orders": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev", "name": "int_orders", "resource_type": "model", "package_name": "dbt_analytics_engine", "path": "intermediate/int_orders.sql", "original_file_path": "models/intermediate/int_orders.sql", "unique_id": "model.dbt_analytics_engine.int_orders", "fqn": ["dbt_analytics_engine", "intermediate", "int_orders"], "alias": "int_orders", "checksum": {"name": "sha256", "checksum": "e5e8b6d6b9cefa327cea22a02135cc452a0ca63a5807a71d9e59d8f8b0457b45"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"product_category_id": {"name": "product_category_id", "description": "", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "order_status": {"name": "order_status", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "shipping_id": {"name": "shipping_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "is_shipped": {"name": "is_shipped", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "shipping_date": {"name": "shipping_date", "description": "", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "shipping_amount": {"name": "shipping_amount", "description": "", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "return_id": {"name": "return_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "is_returned": {"name": "is_returned", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "return_date": {"name": "return_date", "description": "", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "return_reason": {"name": "return_reason", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "is_nps": {"name": "is_nps", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "nps_score": {"name": "nps_score", "description": "", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "nps_date": {"name": "nps_date", "description": "", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "product_category": {"name": "product_category", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "product_name": {"name": "product_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "inbound_shipping_cost": {"name": "inbound_shipping_cost", "description": "", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "product_cost": {"name": "product_cost", "description": "", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_analytics_engine://models/intermediate/_int_models.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1726251874.906417, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev`.`int_orders`", "raw_code": "WITH\n  stg_orders AS (\n    SELECT *\n      FROM {{ ref('stg_orders') }})\n\n\n  ,stg_customers AS (\n    SELECT *\n      FROM {{ ref('stg_customers') }})\n\n\n  ,stg_shipping AS (\n    SELECT *\n      FROM {{ ref('stg_shipping') }})\n\n\n  ,stg_returns AS (\n    SELECT *\n      FROM {{ ref('stg_returns') }})\n\n\n  ,stg_nps AS (\n    SELECT *\n      FROM {{ ref('stg_nps') }})\n\n\n  ,stg_products AS (\n    SELECT *\n      FROM {{ ref('stg_products') }})\n\n\n  ,final AS (\n    SELECT product_category_id\n          ,product_id\n          ,order_id\n          ,customer_id\n          ,order_status\n          ,order_date\n          ,first_name\n          ,last_name\n          ,shipping_id\n          ,COALESCE(is_shipped, FALSE) AS is_shipped\n          ,shipping_date\n          ,shipping_amount\n          ,return_id\n          ,COALESCE(is_returned, FALSE) AS is_returned\n          ,return_date\n          ,return_reason\n          ,COALESCE(is_nps, FALSE) AS is_nps\n          ,nps_score\n          ,nps_date\n          ,product_category\n          ,product_name\n          ,inbound_shipping_cost\n          ,product_cost\n      FROM stg_orders\n      LEFT JOIN stg_customers USING (customer_id)\n      LEFT JOIN stg_shipping USING (order_id)\n      LEFT JOIN stg_returns USING (order_id)\n      LEFT JOIN stg_nps USING (order_id, customer_id)\n      LEFT JOIN stg_products USING (product_category_id, product_id))\n\n\n  SELECT *\n    FROM final", "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}, {"name": "stg_customers", "package": null, "version": null}, {"name": "stg_shipping", "package": null, "version": null}, {"name": "stg_returns", "package": null, "version": null}, {"name": "stg_nps", "package": null, "version": null}, {"name": "stg_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_analytics_engine.stg_orders", "model.dbt_analytics_engine.stg_customers", "model.dbt_analytics_engine.stg_shipping", "model.dbt_analytics_engine.stg_returns", "model.dbt_analytics_engine.stg_nps", "model.dbt_analytics_engine.stg_products"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_analytics_engine.stg_customers": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev", "name": "stg_customers", "resource_type": "model", "package_name": "dbt_analytics_engine", "path": "staging/stg_customers.sql", "original_file_path": "models/staging/stg_customers.sql", "unique_id": "model.dbt_analytics_engine.stg_customers", "fqn": ["dbt_analytics_engine", "staging", "stg_customers"], "alias": "stg_customers", "checksum": {"name": "sha256", "checksum": "2e319d97bfb44ff230032f512d22e6ff8ad60190c434bd1ad31da7f3eba5fd75"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_analytics_engine://models/staging/_stg_models.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1726251874.8886058, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev`.`stg_customers`", "raw_code": "WITH\n  stg_customers AS (\n    SELECT customer_id\n          ,first_name\n          ,last_name\n      FROM {{ source(\"raw\", \"customers\")}})\n\n\n  SELECT *\n    FROM stg_customers", "language": "sql", "refs": [], "sources": [["raw", "customers"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_analytics_engine.raw.customers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_analytics_engine.stg_nps": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev", "name": "stg_nps", "resource_type": "model", "package_name": "dbt_analytics_engine", "path": "staging/stg_nps.sql", "original_file_path": "models/staging/stg_nps.sql", "unique_id": "model.dbt_analytics_engine.stg_nps", "fqn": ["dbt_analytics_engine", "staging", "stg_nps"], "alias": "stg_nps", "checksum": {"name": "sha256", "checksum": "3ecbab6d80a483a781301aa848e2e5699b6763d8abd1a43fea7c1e1778c3a62f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "is_nps": {"name": "is_nps", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "nps_score": {"name": "nps_score", "description": "", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "nps_date": {"name": "nps_date", "description": "", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_analytics_engine://models/staging/_stg_models.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1726251874.889071, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev`.`stg_nps`", "raw_code": "WITH\n  stg_nps AS (\n    SELECT order_id\n          ,customer_id\n          ,is_nps\n          ,nps_score\n          ,nps_date\n      FROM {{ source(\"raw\", \"nps\")}}\n      WHERE nps_date <= CURRENT_DATETIME('America/Toronto'))\n\n\n  SELECT *\n    FROM stg_nps", "language": "sql", "refs": [], "sources": [["raw", "nps"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_analytics_engine.raw.nps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_analytics_engine.stg_orders": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev", "name": "stg_orders", "resource_type": "model", "package_name": "dbt_analytics_engine", "path": "staging/stg_orders.sql", "original_file_path": "models/staging/stg_orders.sql", "unique_id": "model.dbt_analytics_engine.stg_orders", "fqn": ["dbt_analytics_engine", "staging", "stg_orders"], "alias": "stg_orders", "checksum": {"name": "sha256", "checksum": "d77950f17784ec31f2b37eb977816232139afce78d5f8b15cb3a6191aea16329"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "order_status": {"name": "order_status", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "product_category_id": {"name": "product_category_id", "description": "", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_analytics_engine://models/staging/_stg_models.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1726251874.8895428, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev`.`stg_orders`", "raw_code": "WITH\n  stg_orders AS (\n    SELECT order_id\n          ,customer_id\n          ,order_status\n          ,order_date\n          ,product_category_id\n          ,product_id\n      FROM {{ source(\"raw\", \"orders\")}}\n      WHERE order_date <= CURRENT_DATETIME('America/Toronto'))\n\n\n  SELECT *\n    FROM stg_orders", "language": "sql", "refs": [], "sources": [["raw", "orders"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_analytics_engine.raw.orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_analytics_engine.int_payments": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev", "name": "int_payments", "resource_type": "model", "package_name": "dbt_analytics_engine", "path": "intermediate/int_payments.sql", "original_file_path": "models/intermediate/int_payments.sql", "unique_id": "model.dbt_analytics_engine.int_payments", "fqn": ["dbt_analytics_engine", "intermediate", "int_payments"], "alias": "int_payments", "checksum": {"name": "sha256", "checksum": "e2035b6b2194884447e6428b48d7971f1004f6c6457defbb5335feca7fdf8168"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "payment_id": {"name": "payment_id", "description": "", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "order_payment_id": {"name": "order_payment_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "data-tests": ["unique", "not_null", {"relationships": {"to": "ref('stg_payments')", "field": "order_payment_id"}}]}, "payment_method": {"name": "payment_method", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "payment_status": {"name": "payment_status", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "country_id": {"name": "country_id", "description": "", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "gross_revenue": {"name": "gross_revenue", "description": "", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "percentage_fee": {"name": "percentage_fee", "description": "", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "fixed_fee": {"name": "fixed_fee", "description": "", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "payment_fee": {"name": "payment_fee", "description": "", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_analytics_engine://models/intermediate/_int_models.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1726251874.908077, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev`.`int_payments`", "raw_code": "WITH\n  stg_payments AS (\n    SELECT *\n      FROM {{ ref('stg_payments') }})\n\n\n  ,stg_taxes AS (\n    SELECT * \n      FROM {{ ref('stg_taxes') }})\n\n\n  ,stg_payment_fees AS (\n    SELECT * \n      FROM {{ ref('stg_payment_fees') }})\n\n\n  ,final AS (\n    SELECT order_id\n          ,payment_id\n          ,order_payment_id\n          ,payment_method\n          ,payment_status\n          ,country_id\n          ,country\n          ,created_at\n          ,gross_revenue\n          ,tax_rate\n          ,percentage_fee\n          ,fixed_fee\n          ,ROUND((gross_revenue * (percentage_fee / 100)) + fixed_fee, 2) AS payment_fee\n      FROM stg_payments\n      LEFT JOIN stg_taxes USING (country_id)\n      LEFT JOIN stg_payment_fees USING (payment_method))\n\n\n  SELECT *\n    FROM final", "language": "sql", "refs": [{"name": "stg_payments", "package": null, "version": null}, {"name": "stg_taxes", "package": null, "version": null}, {"name": "stg_payment_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_analytics_engine.stg_payments", "model.dbt_analytics_engine.stg_taxes", "model.dbt_analytics_engine.stg_payment_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_analytics_engine.stg_payments": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev", "name": "stg_payments", "resource_type": "model", "package_name": "dbt_analytics_engine", "path": "staging/stg_payments.sql", "original_file_path": "models/staging/stg_payments.sql", "unique_id": "model.dbt_analytics_engine.stg_payments", "fqn": ["dbt_analytics_engine", "staging", "stg_payments"], "alias": "stg_payments", "checksum": {"name": "sha256", "checksum": "930a0807d44ae05bae050cec6c0481dc77788b619c101a440a8d326eaf166d3d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "payment_id": {"name": "payment_id", "description": "", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "order_payment_id": {"name": "order_payment_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "data-tests": ["unique", "not_null"]}, "payment_method": {"name": "payment_method", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "gross_revenue": {"name": "gross_revenue", "description": "", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "payment_status": {"name": "payment_status", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_analytics_engine://models/staging/_stg_models.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1726251874.8908658, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev`.`stg_payments`", "raw_code": "WITH\n  stg_payments AS (\n    SELECT order_id\n          ,payment_id\n          ,{{ dbt_utils.generate_surrogate_key(['order_id', 'payment_id']) }} AS order_payment_id\n          ,payment_method\n          ,payment_amount AS gross_revenue\n          ,payment_country_id AS country_id\n          ,payment_status\n          ,created_at\n      FROM {{ source(\"raw\", \"payments\")}}\n      WHERE created_at <= CURRENT_DATETIME('America/Toronto'))\n\n\n  SELECT *\n    FROM stg_payments", "language": "sql", "refs": [], "sources": [["raw", "payments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["source.dbt_analytics_engine.raw.payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_analytics_engine.stg_returns": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev", "name": "stg_returns", "resource_type": "model", "package_name": "dbt_analytics_engine", "path": "staging/stg_returns.sql", "original_file_path": "models/staging/stg_returns.sql", "unique_id": "model.dbt_analytics_engine.stg_returns", "fqn": ["dbt_analytics_engine", "staging", "stg_returns"], "alias": "stg_returns", "checksum": {"name": "sha256", "checksum": "0e13e9f31f707e9118cdcd0bafc3bf9df968792ba64e69d7ba40d1a9cfc9014e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "return_id": {"name": "return_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "is_returned": {"name": "is_returned", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "return_date": {"name": "return_date", "description": "", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "return_reason": {"name": "return_reason", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_analytics_engine://models/staging/_stg_models.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1726251874.891391, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev`.`stg_returns`", "raw_code": "WITH\n  stg_returns AS (\n    SELECT order_id\n          ,return_id\n          ,is_returned\n          ,return_date\n          ,return_reason\n      FROM {{ source(\"raw\", \"returns\")}}\n      WHERE return_date <= CURRENT_DATETIME('America/Toronto') \n         OR return_date IS NULL)\n\n\n  SELECT *\n    FROM stg_returns", "language": "sql", "refs": [], "sources": [["raw", "returns"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_analytics_engine.raw.returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_analytics_engine.stg_shipping": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev", "name": "stg_shipping", "resource_type": "model", "package_name": "dbt_analytics_engine", "path": "staging/stg_shipping.sql", "original_file_path": "models/staging/stg_shipping.sql", "unique_id": "model.dbt_analytics_engine.stg_shipping", "fqn": ["dbt_analytics_engine", "staging", "stg_shipping"], "alias": "stg_shipping", "checksum": {"name": "sha256", "checksum": "8bd8a20120693acaa0e4399ea40447867c384fee5e57786e8d091769ebddd926"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "shipping_id": {"name": "shipping_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "is_shipped": {"name": "is_shipped", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "shipping_date": {"name": "shipping_date", "description": "", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "shipping_amount": {"name": "shipping_amount", "description": "", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_analytics_engine://models/staging/_stg_models.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1726251874.8918211, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev`.`stg_shipping`", "raw_code": "WITH\n  stg_shipping AS (\n    SELECT order_id\n          ,shipping_id\n          ,is_shipped\n          ,shipping_date\n          ,shipping_amount\n      FROM {{ source(\"raw\", \"shipping\")}}\n      WHERE shipping_date <= CURRENT_DATETIME('America/Toronto')\n         OR shipping_date IS NULL)\n\n\n  SELECT *\n    FROM stg_shipping", "language": "sql", "refs": [], "sources": [["raw", "shipping"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_analytics_engine.raw.shipping"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.dbt_analytics_engine.stg_nps_unexpected_nps_date.8918cb98fd": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "stg_nps_unexpected_nps_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "stg_nps_unexpected_nps_date.sql", "original_file_path": "models/staging/_stg_models.yml", "unique_id": "test.dbt_analytics_engine.stg_nps_unexpected_nps_date.8918cb98fd", "fqn": ["dbt_analytics_engine", "staging", "stg_nps_unexpected_nps_date"], "alias": "stg_nps_unexpected_nps_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.892394, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`stg_nps_unexpected_nps_date`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_nps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_analytics_engine.stg_nps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nps_date", "file_key_name": "models.stg_nps", "attached_node": "model.dbt_analytics_engine.stg_nps", "test_metadata": {"name": "accepted_range", "kwargs": {"max_value": "current_datetime()", "column_name": "nps_date", "model": "{{ get_where_subquery(ref('stg_nps')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.stg_orders_unexpected_order_date.e63e94672f": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "stg_orders_unexpected_order_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "stg_orders_unexpected_order_date.sql", "original_file_path": "models/staging/_stg_models.yml", "unique_id": "test.dbt_analytics_engine.stg_orders_unexpected_order_date.e63e94672f", "fqn": ["dbt_analytics_engine", "staging", "stg_orders_unexpected_order_date"], "alias": "stg_orders_unexpected_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.895009, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`stg_orders_unexpected_order_date`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_analytics_engine.stg_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "models.stg_orders", "attached_node": "model.dbt_analytics_engine.stg_orders", "test_metadata": {"name": "accepted_range", "kwargs": {"max_value": "current_datetime()", "column_name": "order_date", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.stg_payments_unexpected_created_at.c6758e1cb0": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "stg_payments_unexpected_created_at", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "stg_payments_unexpected_created_at.sql", "original_file_path": "models/staging/_stg_models.yml", "unique_id": "test.dbt_analytics_engine.stg_payments_unexpected_created_at.c6758e1cb0", "fqn": ["dbt_analytics_engine", "staging", "stg_payments_unexpected_created_at"], "alias": "stg_payments_unexpected_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.897475, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`stg_payments_unexpected_created_at`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_analytics_engine.stg_payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.stg_payments", "attached_node": "model.dbt_analytics_engine.stg_payments", "test_metadata": {"name": "accepted_range", "kwargs": {"max_value": "current_datetime()", "column_name": "created_at", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.stg_returns_unexpected_return_date.12ec6a0b35": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "stg_returns_unexpected_return_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "stg_returns_unexpected_return_date.sql", "original_file_path": "models/staging/_stg_models.yml", "unique_id": "test.dbt_analytics_engine.stg_returns_unexpected_return_date.12ec6a0b35", "fqn": ["dbt_analytics_engine", "staging", "stg_returns_unexpected_return_date"], "alias": "stg_returns_unexpected_return_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.900023, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`stg_returns_unexpected_return_date`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_returns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_analytics_engine.stg_returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_date", "file_key_name": "models.stg_returns", "attached_node": "model.dbt_analytics_engine.stg_returns", "test_metadata": {"name": "accepted_range", "kwargs": {"max_value": "current_datetime()", "column_name": "return_date", "model": "{{ get_where_subquery(ref('stg_returns')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.stg_shipping_unexpected_shipping_date.8b549f2bc4": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "stg_shipping_unexpected_shipping_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "stg_shipping_unexpected_shipping_date.sql", "original_file_path": "models/staging/_stg_models.yml", "unique_id": "test.dbt_analytics_engine.stg_shipping_unexpected_shipping_date.8b549f2bc4", "fqn": ["dbt_analytics_engine", "staging", "stg_shipping_unexpected_shipping_date"], "alias": "stg_shipping_unexpected_shipping_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.90257, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`stg_shipping_unexpected_shipping_date`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shipping", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_analytics_engine.stg_shipping"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipping_date", "file_key_name": "models.stg_shipping", "attached_node": "model.dbt_analytics_engine.stg_shipping", "test_metadata": {"name": "accepted_range", "kwargs": {"max_value": "current_datetime()", "column_name": "shipping_date", "model": "{{ get_where_subquery(ref('stg_shipping')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_int_orders_product_category_id.9633448692": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_orders_product_category_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_orders_product_category_id.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_orders_product_category_id.9633448692", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_orders_product_category_id"], "alias": "not_null_int_orders_product_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.908635, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_orders_product_category_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_category_id", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_category_id", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_orders_product_id.d2b92956f6": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_orders_product_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_orders_product_id.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_orders_product_id.d2b92956f6", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_orders_product_id"], "alias": "not_null_int_orders_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.909834, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_orders_product_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.unique_int_orders_order_id.63cc4f3a7a": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "unique_int_orders_order_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "unique_int_orders_order_id.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.unique_int_orders_order_id.63cc4f3a7a", "fqn": ["dbt_analytics_engine", "intermediate", "unique_int_orders_order_id"], "alias": "unique_int_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.911028, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`unique_int_orders_order_id`", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_orders_order_id.383134cc66": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_orders_order_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_orders_order_id.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_orders_order_id.383134cc66", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_orders_order_id"], "alias": "not_null_int_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.9122748, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_orders_order_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.relationships_int_orders_order_id__order_id__ref_stg_orders_.ff87b11be6": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "relationships_int_orders_order_id__order_id__ref_stg_orders_", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "relationships_int_orders_order_id__order_id__ref_stg_orders_.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.relationships_int_orders_order_id__order_id__ref_stg_orders_.ff87b11be6", "fqn": ["dbt_analytics_engine", "intermediate", "relationships_int_orders_order_id__order_id__ref_stg_orders_"], "alias": "relationships_int_orders_order_id__order_id__ref_stg_orders_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.913476, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`relationships_int_orders_order_id__order_id__ref_stg_orders_`", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}, {"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_analytics_engine.stg_orders", "model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_orders')", "field": "order_id", "column_name": "order_id", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_orders_customer_id.e78a71eed3": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_orders_customer_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_orders_customer_id.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_orders_customer_id.e78a71eed3", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_orders_customer_id"], "alias": "not_null_int_orders_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.9166908, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_orders_customer_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.relationships_int_orders_customer_id__customer_id__ref_stg_customers_.9d7e39b587": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "relationships_int_orders_customer_id__customer_id__ref_stg_customers_", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "relationships_int_orders_d5a17333e13549d0305a0cb7ecf4ce04.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.relationships_int_orders_customer_id__customer_id__ref_stg_customers_.9d7e39b587", "fqn": ["dbt_analytics_engine", "intermediate", "relationships_int_orders_customer_id__customer_id__ref_stg_customers_"], "alias": "relationships_int_orders_d5a17333e13549d0305a0cb7ecf4ce04", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_orders_d5a17333e13549d0305a0cb7ecf4ce04", "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "alias": "relationships_int_orders_d5a17333e13549d0305a0cb7ecf4ce04"}, "created_at": 1726251874.917902, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`relationships_int_orders_d5a17333e13549d0305a0cb7ecf4ce04`", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_orders_d5a17333e13549d0305a0cb7ecf4ce04\") }}", "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}, {"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_analytics_engine.stg_customers", "model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_customers')", "field": "customer_id", "column_name": "customer_id", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_orders_order_status.c9525f7b76": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_orders_order_status", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_orders_order_status.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_orders_order_status.c9525f7b76", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_orders_order_status"], "alias": "not_null_int_orders_order_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.920884, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_orders_order_status`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_status", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_status", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_orders_order_date.c8d13500bb": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_orders_order_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_orders_order_date.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_orders_order_date.c8d13500bb", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_orders_order_date"], "alias": "not_null_int_orders_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.922082, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_orders_order_date`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_date", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_orders_first_name.41e8be1f95": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_orders_first_name", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_orders_first_name.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_orders_first_name.41e8be1f95", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_orders_first_name"], "alias": "not_null_int_orders_first_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.9232728, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_orders_first_name`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "first_name", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "first_name", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_orders_last_name.729e6f5a4c": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_orders_last_name", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_orders_last_name.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_orders_last_name.729e6f5a4c", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_orders_last_name"], "alias": "not_null_int_orders_last_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.924448, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_orders_last_name`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "last_name", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "last_name", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.unique_int_orders_shipping_id.071fd1d880": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "unique_int_orders_shipping_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "unique_int_orders_shipping_id.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.unique_int_orders_shipping_id.071fd1d880", "fqn": ["dbt_analytics_engine", "intermediate", "unique_int_orders_shipping_id"], "alias": "unique_int_orders_shipping_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.9256241, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`unique_int_orders_shipping_id`", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipping_id", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "unique", "kwargs": {"column_name": "shipping_id", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.relationships_int_orders_shipping_id__shipping_id__ref_stg_shipping_.598a58922f": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "relationships_int_orders_shipping_id__shipping_id__ref_stg_shipping_", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "relationships_int_orders_2301cfe9d58aeb2a84c543d4f33dee4f.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.relationships_int_orders_shipping_id__shipping_id__ref_stg_shipping_.598a58922f", "fqn": ["dbt_analytics_engine", "intermediate", "relationships_int_orders_shipping_id__shipping_id__ref_stg_shipping_"], "alias": "relationships_int_orders_2301cfe9d58aeb2a84c543d4f33dee4f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_orders_2301cfe9d58aeb2a84c543d4f33dee4f", "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "alias": "relationships_int_orders_2301cfe9d58aeb2a84c543d4f33dee4f"}, "created_at": 1726251874.926871, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`relationships_int_orders_2301cfe9d58aeb2a84c543d4f33dee4f`", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_orders_2301cfe9d58aeb2a84c543d4f33dee4f\") }}", "language": "sql", "refs": [{"name": "stg_shipping", "package": null, "version": null}, {"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_analytics_engine.stg_shipping", "model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipping_id", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_shipping')", "field": "shipping_id", "column_name": "shipping_id", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_orders_is_shipped.ac59b50b97": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_orders_is_shipped", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_orders_is_shipped.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_orders_is_shipped.ac59b50b97", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_orders_is_shipped"], "alias": "not_null_int_orders_is_shipped", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.9297779, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_orders_is_shipped`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_shipped", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_shipped", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.int_orders_unexpected_is_shipped_bool.c2b5343dec": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "int_orders_unexpected_is_shipped_bool", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "int_orders_unexpected_is_shipped_bool.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.int_orders_unexpected_is_shipped_bool.c2b5343dec", "fqn": ["dbt_analytics_engine", "intermediate", "int_orders_unexpected_is_shipped_bool"], "alias": "int_orders_unexpected_is_shipped_bool", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.93106, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`int_orders_unexpected_is_shipped_bool`", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_shipped", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "is_shipped", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.unique_int_orders_return_id.402c65096c": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "unique_int_orders_return_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "unique_int_orders_return_id.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.unique_int_orders_return_id.402c65096c", "fqn": ["dbt_analytics_engine", "intermediate", "unique_int_orders_return_id"], "alias": "unique_int_orders_return_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.933446, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`unique_int_orders_return_id`", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_id", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "unique", "kwargs": {"column_name": "return_id", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_orders_is_returned.5428c59e02": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_orders_is_returned", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_orders_is_returned.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_orders_is_returned.5428c59e02", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_orders_is_returned"], "alias": "not_null_int_orders_is_returned", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.934716, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_orders_is_returned`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_returned", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_returned", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.int_orders_unexpected_is_returned_bool.a3cea4213e": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "int_orders_unexpected_is_returned_bool", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "int_orders_unexpected_is_returned_bool.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.int_orders_unexpected_is_returned_bool.a3cea4213e", "fqn": ["dbt_analytics_engine", "intermediate", "int_orders_unexpected_is_returned_bool"], "alias": "int_orders_unexpected_is_returned_bool", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.935914, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`int_orders_unexpected_is_returned_bool`", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_returned", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "is_returned", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_orders_is_nps.e463bb19a8": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_orders_is_nps", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_orders_is_nps.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_orders_is_nps.e463bb19a8", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_orders_is_nps"], "alias": "not_null_int_orders_is_nps", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.938349, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_orders_is_nps`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_nps", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_nps", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.int_orders_unexpected_is_nps_bool.89b6608341": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "int_orders_unexpected_is_nps_bool", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "int_orders_unexpected_is_nps_bool.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.int_orders_unexpected_is_nps_bool.89b6608341", "fqn": ["dbt_analytics_engine", "intermediate", "int_orders_unexpected_is_nps_bool"], "alias": "int_orders_unexpected_is_nps_bool", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.9396322, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`int_orders_unexpected_is_nps_bool`", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_nps", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "is_nps", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_orders_product_category.81718e6804": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_orders_product_category", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_orders_product_category.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_orders_product_category.81718e6804", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_orders_product_category"], "alias": "not_null_int_orders_product_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.942053, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_orders_product_category`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_category", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_category", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_orders_product_name.3b4cb7f6ad": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_orders_product_name", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_orders_product_name.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_orders_product_name.3b4cb7f6ad", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_orders_product_name"], "alias": "not_null_int_orders_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.9433181, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_orders_product_name`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_name", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_orders_inbound_shipping_cost.06ccde673e": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_orders_inbound_shipping_cost", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_orders_inbound_shipping_cost.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_orders_inbound_shipping_cost.06ccde673e", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_orders_inbound_shipping_cost"], "alias": "not_null_int_orders_inbound_shipping_cost", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.9445062, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_orders_inbound_shipping_cost`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "inbound_shipping_cost", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "inbound_shipping_cost", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_orders_product_cost.b326ad5229": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_orders_product_cost", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_orders_product_cost.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_orders_product_cost.b326ad5229", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_orders_product_cost"], "alias": "not_null_int_orders_product_cost", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.945687, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_orders_product_cost`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_cost", "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_cost", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_equal_rowcount_int_orders_ref_stg_orders_.5dc9604002": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_equal_rowcount_int_orders_ref_stg_orders_", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_equal_rowcount_int_orders_ref_stg_orders_.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_equal_rowcount_int_orders_ref_stg_orders_.5dc9604002", "fqn": ["dbt_analytics_engine", "intermediate", "dbt_utils_equal_rowcount_int_orders_ref_stg_orders_"], "alias": "dbt_utils_equal_rowcount_int_orders_ref_stg_orders_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "sum(coalesce(diff_count, 0))", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "fail_calc": "sum(coalesce(diff_count, 0))"}, "created_at": 1726251874.946871, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_equal_rowcount_int_orders_ref_stg_orders_`", "raw_code": "{{ dbt_utils.test_equal_rowcount(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}, {"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_equal_rowcount", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_analytics_engine.stg_orders", "model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "equal_rowcount", "kwargs": {"compare_model": "ref('stg_orders')", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.int_orders_unequal_agg_shipping_amount.8085e0b065": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "int_orders_unequal_agg_shipping_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "int_orders_unequal_agg_shipping_amount.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.int_orders_unequal_agg_shipping_amount.8085e0b065", "fqn": ["dbt_analytics_engine", "intermediate", "int_orders_unequal_agg_shipping_amount"], "alias": "int_orders_unequal_agg_shipping_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.9541628, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`int_orders_unequal_agg_shipping_amount`", "raw_code": "{{ dbt_expectations.test_expect_table_aggregation_to_equal_other_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shipping", "package": null, "version": null}, {"name": "int_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_analytics_engine.stg_shipping", "model.dbt_analytics_engine.int_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_orders", "attached_node": "model.dbt_analytics_engine.int_orders", "test_metadata": {"name": "expect_table_aggregation_to_equal_other_table", "kwargs": {"expression": "sum(shipping_amount)", "compare_model": "ref(\"stg_shipping\")", "compare_expression": "sum(shipping_amount)", "model": "{{ get_where_subquery(ref('int_orders')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.not_null_int_payments_order_id.557bf2eea0": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_payments_order_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_payments_order_id.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_payments_order_id.557bf2eea0", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_payments_order_id"], "alias": "not_null_int_payments_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.957396, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_payments_order_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.int_payments", "attached_node": "model.dbt_analytics_engine.int_payments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('int_payments')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_payments_payment_id.02e0f4bd25": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_payments_payment_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_payments_payment_id.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_payments_payment_id.02e0f4bd25", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_payments_payment_id"], "alias": "not_null_int_payments_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.958573, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_payments_payment_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_id", "file_key_name": "models.int_payments", "attached_node": "model.dbt_analytics_engine.int_payments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('int_payments')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_payments_payment_method.a8fd5df74d": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_payments_payment_method", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_payments_payment_method.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_payments_payment_method.a8fd5df74d", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_payments_payment_method"], "alias": "not_null_int_payments_payment_method", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.959841, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_payments_payment_method`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_method", "file_key_name": "models.int_payments", "attached_node": "model.dbt_analytics_engine.int_payments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_method", "model": "{{ get_where_subquery(ref('int_payments')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.relationships_int_payments_payment_method__payment_method__ref_stg_payment_fees_.1e68484b11": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "relationships_int_payments_payment_method__payment_method__ref_stg_payment_fees_", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "relationships_int_payments_4000ff034d1fca11ad4fdbeaa6b1b3fb.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.relationships_int_payments_payment_method__payment_method__ref_stg_payment_fees_.1e68484b11", "fqn": ["dbt_analytics_engine", "intermediate", "relationships_int_payments_payment_method__payment_method__ref_stg_payment_fees_"], "alias": "relationships_int_payments_4000ff034d1fca11ad4fdbeaa6b1b3fb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_payments_4000ff034d1fca11ad4fdbeaa6b1b3fb", "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "alias": "relationships_int_payments_4000ff034d1fca11ad4fdbeaa6b1b3fb"}, "created_at": 1726251874.961044, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`relationships_int_payments_4000ff034d1fca11ad4fdbeaa6b1b3fb`", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_payments_4000ff034d1fca11ad4fdbeaa6b1b3fb\") }}", "language": "sql", "refs": [{"name": "stg_payment_fees", "package": null, "version": null}, {"name": "int_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_analytics_engine.stg_payment_fees", "model.dbt_analytics_engine.int_payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_method", "file_key_name": "models.int_payments", "attached_node": "model.dbt_analytics_engine.int_payments", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_payment_fees')", "field": "payment_method", "column_name": "payment_method", "model": "{{ get_where_subquery(ref('int_payments')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_payments_payment_status.e9f85fff44": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_payments_payment_status", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_payments_payment_status.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_payments_payment_status.e9f85fff44", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_payments_payment_status"], "alias": "not_null_int_payments_payment_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.964093, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_payments_payment_status`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_status", "file_key_name": "models.int_payments", "attached_node": "model.dbt_analytics_engine.int_payments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_status", "model": "{{ get_where_subquery(ref('int_payments')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_payments_country_id.d477883ad0": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_payments_country_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_payments_country_id.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_payments_country_id.d477883ad0", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_payments_country_id"], "alias": "not_null_int_payments_country_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.9652731, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_payments_country_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_id", "file_key_name": "models.int_payments", "attached_node": "model.dbt_analytics_engine.int_payments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_id", "model": "{{ get_where_subquery(ref('int_payments')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.relationships_int_payments_country_id__country_id__ref_stg_taxes_.df4c4ee979": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "relationships_int_payments_country_id__country_id__ref_stg_taxes_", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "relationships_int_payments_a119759a6fc2755834df1eefbb54b2e7.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.relationships_int_payments_country_id__country_id__ref_stg_taxes_.df4c4ee979", "fqn": ["dbt_analytics_engine", "intermediate", "relationships_int_payments_country_id__country_id__ref_stg_taxes_"], "alias": "relationships_int_payments_a119759a6fc2755834df1eefbb54b2e7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_payments_a119759a6fc2755834df1eefbb54b2e7", "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "alias": "relationships_int_payments_a119759a6fc2755834df1eefbb54b2e7"}, "created_at": 1726251874.966453, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`relationships_int_payments_a119759a6fc2755834df1eefbb54b2e7`", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_payments_a119759a6fc2755834df1eefbb54b2e7\") }}", "language": "sql", "refs": [{"name": "stg_taxes", "package": null, "version": null}, {"name": "int_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_analytics_engine.stg_taxes", "model.dbt_analytics_engine.int_payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_id", "file_key_name": "models.int_payments", "attached_node": "model.dbt_analytics_engine.int_payments", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_taxes')", "field": "country_id", "column_name": "country_id", "model": "{{ get_where_subquery(ref('int_payments')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_payments_country.18d4938d90": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_payments_country", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_payments_country.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_payments_country.18d4938d90", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_payments_country"], "alias": "not_null_int_payments_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.969416, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_payments_country`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country", "file_key_name": "models.int_payments", "attached_node": "model.dbt_analytics_engine.int_payments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country", "model": "{{ get_where_subquery(ref('int_payments')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_payments_created_at.da6f256d05": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_payments_created_at", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_payments_created_at.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_payments_created_at.da6f256d05", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_payments_created_at"], "alias": "not_null_int_payments_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.970603, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_payments_created_at`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.int_payments", "attached_node": "model.dbt_analytics_engine.int_payments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('int_payments')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_payments_gross_revenue.3fab8f131f": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_payments_gross_revenue", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_payments_gross_revenue.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_payments_gross_revenue.3fab8f131f", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_payments_gross_revenue"], "alias": "not_null_int_payments_gross_revenue", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.9717782, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_payments_gross_revenue`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "gross_revenue", "file_key_name": "models.int_payments", "attached_node": "model.dbt_analytics_engine.int_payments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gross_revenue", "model": "{{ get_where_subquery(ref('int_payments')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_payments_tax_rate.da4366e257": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_payments_tax_rate", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_payments_tax_rate.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_payments_tax_rate.da4366e257", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_payments_tax_rate"], "alias": "not_null_int_payments_tax_rate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.972951, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_payments_tax_rate`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tax_rate", "file_key_name": "models.int_payments", "attached_node": "model.dbt_analytics_engine.int_payments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tax_rate", "model": "{{ get_where_subquery(ref('int_payments')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_payments_percentage_fee.cb94ecc835": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_payments_percentage_fee", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_payments_percentage_fee.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_payments_percentage_fee.cb94ecc835", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_payments_percentage_fee"], "alias": "not_null_int_payments_percentage_fee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.974426, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_payments_percentage_fee`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "percentage_fee", "file_key_name": "models.int_payments", "attached_node": "model.dbt_analytics_engine.int_payments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "percentage_fee", "model": "{{ get_where_subquery(ref('int_payments')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_payments_fixed_fee.e735f0304a": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_payments_fixed_fee", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_payments_fixed_fee.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_payments_fixed_fee.e735f0304a", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_payments_fixed_fee"], "alias": "not_null_int_payments_fixed_fee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.975598, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_payments_fixed_fee`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fixed_fee", "file_key_name": "models.int_payments", "attached_node": "model.dbt_analytics_engine.int_payments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fixed_fee", "model": "{{ get_where_subquery(ref('int_payments')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_int_payments_payment_fee.e6ecdd7240": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_int_payments_payment_fee", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_int_payments_payment_fee.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_int_payments_payment_fee.e6ecdd7240", "fqn": ["dbt_analytics_engine", "intermediate", "not_null_int_payments_payment_fee"], "alias": "not_null_int_payments_payment_fee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.976773, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_int_payments_payment_fee`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_analytics_engine.int_payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_fee", "file_key_name": "models.int_payments", "attached_node": "model.dbt_analytics_engine.int_payments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_fee", "model": "{{ get_where_subquery(ref('int_payments')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.int_payments_unexpected_payment_fee.3dbfa94602": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "int_payments_unexpected_payment_fee", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "int_payments_unexpected_payment_fee.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.int_payments_unexpected_payment_fee.3dbfa94602", "fqn": ["dbt_analytics_engine", "intermediate", "int_payments_unexpected_payment_fee"], "alias": "int_payments_unexpected_payment_fee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.977942, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`int_payments_unexpected_payment_fee`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_analytics_engine.int_payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_fee", "file_key_name": "models.int_payments", "attached_node": "model.dbt_analytics_engine.int_payments", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "= ROUND((gross_revenue * (percentage_fee / 100)) + fixed_fee, 2)", "column_name": "payment_fee", "model": "{{ get_where_subquery(ref('int_payments')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.dbt_utils_equal_rowcount_int_payments_ref_stg_payments_.70f412c4b6": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_equal_rowcount_int_payments_ref_stg_payments_", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_equal_rowcount_int_payments_ref_stg_payments_.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_equal_rowcount_int_payments_ref_stg_payments_.70f412c4b6", "fqn": ["dbt_analytics_engine", "intermediate", "dbt_utils_equal_rowcount_int_payments_ref_stg_payments_"], "alias": "dbt_utils_equal_rowcount_int_payments_ref_stg_payments_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "sum(coalesce(diff_count, 0))", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "fail_calc": "sum(coalesce(diff_count, 0))"}, "created_at": 1726251874.9805481, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_equal_rowcount_int_payments_ref_stg_payments_`", "raw_code": "{{ dbt_utils.test_equal_rowcount(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_payments", "package": null, "version": null}, {"name": "int_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_equal_rowcount", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_analytics_engine.stg_payments", "model.dbt_analytics_engine.int_payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_payments", "attached_node": "model.dbt_analytics_engine.int_payments", "test_metadata": {"name": "equal_rowcount", "kwargs": {"compare_model": "ref('stg_payments')", "model": "{{ get_where_subquery(ref('int_payments')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.int_payments_unequal_agg_gross_revenue.28f31da523": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "int_payments_unequal_agg_gross_revenue", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "int_payments_unequal_agg_gross_revenue.sql", "original_file_path": "models/intermediate/_int_models.yml", "unique_id": "test.dbt_analytics_engine.int_payments_unequal_agg_gross_revenue.28f31da523", "fqn": ["dbt_analytics_engine", "intermediate", "int_payments_unequal_agg_gross_revenue"], "alias": "int_payments_unequal_agg_gross_revenue", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251874.983445, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`int_payments_unequal_agg_gross_revenue`", "raw_code": "{{ dbt_expectations.test_expect_table_aggregation_to_equal_other_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_payments", "package": null, "version": null}, {"name": "int_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_analytics_engine.stg_payments", "model.dbt_analytics_engine.int_payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_payments", "attached_node": "model.dbt_analytics_engine.int_payments", "test_metadata": {"name": "expect_table_aggregation_to_equal_other_table", "kwargs": {"expression": "sum(gross_revenue)", "compare_model": "ref(\"stg_payments\")", "compare_expression": "sum(gross_revenue)", "model": "{{ get_where_subquery(ref('int_payments')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.source_unique_raw_customers_customer_id.3579d23017": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_unique_raw_customers_customer_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_unique_raw_customers_customer_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_unique_raw_customers_customer_id.3579d23017", "fqn": ["dbt_analytics_engine", "staging", "source_unique_raw_customers_customer_id"], "alias": "source_unique_raw_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.056885, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_unique_raw_customers_customer_id`", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "customers"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.dbt_analytics_engine.raw.customers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(source('raw', 'customers')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.source_not_null_raw_customers_customer_id.e869432dbb": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_customers_customer_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_customers_customer_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_customers_customer_id.e869432dbb", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_customers_customer_id"], "alias": "source_not_null_raw_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.058207, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_customers_customer_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "customers"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.customers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(source('raw', 'customers')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.source_customers_unexpected_customer_id_length.fafa7939c9": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_customers_unexpected_customer_id_length", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_customers_unexpected_customer_id_length.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_customers_unexpected_customer_id_length.fafa7939c9", "fqn": ["dbt_analytics_engine", "staging", "source_customers_unexpected_customer_id_length"], "alias": "source_customers_unexpected_customer_id_length", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.059654, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_customers_unexpected_customer_id_length`", "raw_code": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "customers"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.customers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 36, "column_name": "customer_id", "model": "{{ get_where_subquery(source('raw', 'customers')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.source_not_null_raw_customers_first_name.b1fe98db61": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_customers_first_name", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_customers_first_name.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_customers_first_name.b1fe98db61", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_customers_first_name"], "alias": "source_not_null_raw_customers_first_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.069251, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_customers_first_name`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "customers"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.customers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "first_name", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "first_name", "model": "{{ get_where_subquery(source('raw', 'customers')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_customers_first_name.1aa711fefa": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_customers_first_name", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_customers_first_name.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_customers_first_name.1aa711fefa", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_customers_first_name"], "alias": "dbt_utils_source_not_constant_raw_customers_first_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.0704598, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_customers_first_name`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "customers"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.customers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "first_name", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "first_name", "model": "{{ get_where_subquery(source('raw', 'customers')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_customers_unexpected_first_name_length.787dbb0899": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_customers_unexpected_first_name_length", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_customers_unexpected_first_name_length.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_customers_unexpected_first_name_length.787dbb0899", "fqn": ["dbt_analytics_engine", "staging", "source_customers_unexpected_first_name_length"], "alias": "source_customers_unexpected_first_name_length", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">10", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "error_if": ">20", "warn_if": ">10", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.073537, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_customers_unexpected_first_name_length`", "raw_code": "{{ dbt_expectations.test_expect_column_value_lengths_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">10\",error_if=\">20\") }}", "language": "sql", "refs": [], "sources": [["raw", "customers"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.customers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "first_name", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "expect_column_value_lengths_to_be_between", "kwargs": {"min_value": 1, "max_value": 16, "column_name": "first_name", "model": "{{ get_where_subquery(source('raw', 'customers')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.source_not_null_raw_customers_last_name.ef2fe0f207": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_customers_last_name", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_customers_last_name.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_customers_last_name.ef2fe0f207", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_customers_last_name"], "alias": "source_not_null_raw_customers_last_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.080983, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_customers_last_name`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "customers"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.customers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "last_name", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "last_name", "model": "{{ get_where_subquery(source('raw', 'customers')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_customers_last_name.6ffe283ff9": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_customers_last_name", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_customers_last_name.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_customers_last_name.6ffe283ff9", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_customers_last_name"], "alias": "dbt_utils_source_not_constant_raw_customers_last_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.0821602, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_customers_last_name`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "customers"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.customers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "last_name", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "last_name", "model": "{{ get_where_subquery(source('raw', 'customers')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_customers_unexpected_last_name_length.01feba77f5": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_customers_unexpected_last_name_length", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_customers_unexpected_last_name_length.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_customers_unexpected_last_name_length.01feba77f5", "fqn": ["dbt_analytics_engine", "staging", "source_customers_unexpected_last_name_length"], "alias": "source_customers_unexpected_last_name_length", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">10", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "error_if": ">20", "warn_if": ">10", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.084806, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_customers_unexpected_last_name_length`", "raw_code": "{{ dbt_expectations.test_expect_column_value_lengths_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">10\",error_if=\">20\") }}", "language": "sql", "refs": [], "sources": [["raw", "customers"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.customers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "last_name", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "expect_column_value_lengths_to_be_between", "kwargs": {"min_value": 1, "max_value": 16, "column_name": "last_name", "model": "{{ get_where_subquery(source('raw', 'customers')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.source_unique_raw_nps_order_id.aae4faebb6": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_unique_raw_nps_order_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_unique_raw_nps_order_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_unique_raw_nps_order_id.aae4faebb6", "fqn": ["dbt_analytics_engine", "staging", "source_unique_raw_nps_order_id"], "alias": "source_unique_raw_nps_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.09087, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_unique_raw_nps_order_id`", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "nps"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.dbt_analytics_engine.raw.nps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(source('raw', 'nps')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.source_not_null_raw_nps_order_id.2eccdcf1e2": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_nps_order_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_nps_order_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_nps_order_id.2eccdcf1e2", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_nps_order_id"], "alias": "source_not_null_raw_nps_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.092064, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_nps_order_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "nps"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.nps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(source('raw', 'nps')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.source_nps_unexpected_order_id_length.d9115f851b": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_nps_unexpected_order_id_length", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_nps_unexpected_order_id_length.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_nps_unexpected_order_id_length.d9115f851b", "fqn": ["dbt_analytics_engine", "staging", "source_nps_unexpected_order_id_length"], "alias": "source_nps_unexpected_order_id_length", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.0932438, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_nps_unexpected_order_id_length`", "raw_code": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "nps"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.nps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 36, "column_name": "order_id", "model": "{{ get_where_subquery(source('raw', 'nps')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.source_not_null_raw_nps_customer_id.5fda13b29c": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_nps_customer_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_nps_customer_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_nps_customer_id.5fda13b29c", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_nps_customer_id"], "alias": "source_not_null_raw_nps_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.0961752, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_nps_customer_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "nps"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.nps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(source('raw', 'nps')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_nps_customer_id.1d8ada62fb": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_nps_customer_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_nps_customer_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_nps_customer_id.1d8ada62fb", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_nps_customer_id"], "alias": "dbt_utils_source_not_constant_raw_nps_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.097346, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_nps_customer_id`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "nps"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.nps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(source('raw', 'nps')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_nps_unexpected_customer_id_length.ee58215e3f": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_nps_unexpected_customer_id_length", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_nps_unexpected_customer_id_length.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_nps_unexpected_customer_id_length.ee58215e3f", "fqn": ["dbt_analytics_engine", "staging", "source_nps_unexpected_customer_id_length"], "alias": "source_nps_unexpected_customer_id_length", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.09993, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_nps_unexpected_customer_id_length`", "raw_code": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "nps"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.nps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 36, "column_name": "customer_id", "model": "{{ get_where_subquery(source('raw', 'nps')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.source_not_null_raw_nps_is_nps.a69d0af618": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_nps_is_nps", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_nps_is_nps.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_nps_is_nps.a69d0af618", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_nps_is_nps"], "alias": "source_not_null_raw_nps_is_nps", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.102785, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_nps_is_nps`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "nps"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.nps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_nps", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_nps", "model": "{{ get_where_subquery(source('raw', 'nps')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_nps_is_nps.bcbc991b6e": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_nps_is_nps", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_nps_is_nps.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_nps_is_nps.bcbc991b6e", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_nps_is_nps"], "alias": "dbt_utils_source_not_constant_raw_nps_is_nps", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.10396, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_nps_is_nps`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "nps"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.nps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_nps", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "is_nps", "model": "{{ get_where_subquery(source('raw', 'nps')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_nps_unexpected_is_nps_bool.78259a7eb7": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_nps_unexpected_is_nps_bool", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_nps_unexpected_is_nps_bool.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_nps_unexpected_is_nps_bool.78259a7eb7", "fqn": ["dbt_analytics_engine", "staging", "source_nps_unexpected_is_nps_bool"], "alias": "source_nps_unexpected_is_nps_bool", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.106544, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_nps_unexpected_is_nps_bool`", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "nps"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.nps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_nps", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "is_nps", "model": "{{ get_where_subquery(source('raw', 'nps')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.source_not_null_raw_nps_nps_score.7d4a90987a": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_nps_nps_score", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_nps_nps_score.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_nps_nps_score.7d4a90987a", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_nps_nps_score"], "alias": "source_not_null_raw_nps_nps_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.10911, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_nps_nps_score`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "nps"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.nps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nps_score", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "nps_score", "model": "{{ get_where_subquery(source('raw', 'nps')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_nps_nps_score.971c38316b": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_nps_nps_score", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_nps_nps_score.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_nps_nps_score.971c38316b", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_nps_nps_score"], "alias": "dbt_utils_source_not_constant_raw_nps_nps_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.110285, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_nps_nps_score`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "nps"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.nps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nps_score", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "nps_score", "model": "{{ get_where_subquery(source('raw', 'nps')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_nps_unexpected_nps_score.8a16a09fd2": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_nps_unexpected_nps_score", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_nps_unexpected_nps_score.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_nps_unexpected_nps_score.8a16a09fd2", "fqn": ["dbt_analytics_engine", "staging", "source_nps_unexpected_nps_score"], "alias": "source_nps_unexpected_nps_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.112779, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_nps_unexpected_nps_score`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "nps"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.nps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nps_score", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 10, "column_name": "nps_score", "model": "{{ get_where_subquery(source('raw', 'nps')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_not_null_raw_nps_nps_date.1abdb6c60a": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_nps_nps_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_nps_nps_date.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_nps_nps_date.1abdb6c60a", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_nps_nps_date"], "alias": "source_not_null_raw_nps_nps_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.11536, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_nps_nps_date`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "nps"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.nps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nps_date", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "nps_date", "model": "{{ get_where_subquery(source('raw', 'nps')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_nps_nps_date.5268efe72d": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_nps_nps_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_nps_nps_date.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_nps_nps_date.5268efe72d", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_nps_nps_date"], "alias": "dbt_utils_source_not_constant_raw_nps_nps_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.1165252, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_nps_nps_date`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "nps"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.nps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nps_date", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "nps_date", "model": "{{ get_where_subquery(source('raw', 'nps')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_unique_raw_orders_order_id.2e0765462f": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_unique_raw_orders_order_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_unique_raw_orders_order_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_unique_raw_orders_order_id.2e0765462f", "fqn": ["dbt_analytics_engine", "staging", "source_unique_raw_orders_order_id"], "alias": "source_unique_raw_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.119214, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_unique_raw_orders_order_id`", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.dbt_analytics_engine.raw.orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(source('raw', 'orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.source_not_null_raw_orders_order_id.03a065a98f": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_orders_order_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_orders_order_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_orders_order_id.03a065a98f", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_orders_order_id"], "alias": "source_not_null_raw_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.120395, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_orders_order_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(source('raw', 'orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.source_orders_unexpected_order_id_length.717f86d8cf": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_orders_unexpected_order_id_length", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_orders_unexpected_order_id_length.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_orders_unexpected_order_id_length.717f86d8cf", "fqn": ["dbt_analytics_engine", "staging", "source_orders_unexpected_order_id_length"], "alias": "source_orders_unexpected_order_id_length", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.1216068, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_orders_unexpected_order_id_length`", "raw_code": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 36, "column_name": "order_id", "model": "{{ get_where_subquery(source('raw', 'orders')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.source_not_null_raw_orders_customer_id.3962c6ab03": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_orders_customer_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_orders_customer_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_orders_customer_id.3962c6ab03", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_orders_customer_id"], "alias": "source_not_null_raw_orders_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.124398, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_orders_customer_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(source('raw', 'orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_customer_id.5c0a7aeec1": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_orders_customer_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_orders_customer_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_customer_id.5c0a7aeec1", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_orders_customer_id"], "alias": "dbt_utils_source_not_constant_raw_orders_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.12557, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_orders_customer_id`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(source('raw', 'orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_orders_unexpected_custoemr_id_length.4e34b069bd": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_orders_unexpected_custoemr_id_length", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_orders_unexpected_custoemr_id_length.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_orders_unexpected_custoemr_id_length.4e34b069bd", "fqn": ["dbt_analytics_engine", "staging", "source_orders_unexpected_custoemr_id_length"], "alias": "source_orders_unexpected_custoemr_id_length", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.128099, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_orders_unexpected_custoemr_id_length`", "raw_code": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 36, "column_name": "customer_id", "model": "{{ get_where_subquery(source('raw', 'orders')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.source_not_null_raw_orders_order_status.0e4e88bed2": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_orders_order_status", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_orders_order_status.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_orders_order_status.0e4e88bed2", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_orders_order_status"], "alias": "source_not_null_raw_orders_order_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.131287, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_orders_order_status`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_status", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_status", "model": "{{ get_where_subquery(source('raw', 'orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_order_status.7efa1990d7": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_orders_order_status", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_orders_order_status.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_order_status.7efa1990d7", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_orders_order_status"], "alias": "dbt_utils_source_not_constant_raw_orders_order_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.132433, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_orders_order_status`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_status", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "order_status", "model": "{{ get_where_subquery(source('raw', 'orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_orders_unexpected_order_status.6f35c0bf12": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_orders_unexpected_order_status", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_orders_unexpected_order_status.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_orders_unexpected_order_status.6f35c0bf12", "fqn": ["dbt_analytics_engine", "staging", "source_orders_unexpected_order_status"], "alias": "source_orders_unexpected_order_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.1349802, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_orders_unexpected_order_status`", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_status", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["completed", "failed"], "column_name": "order_status", "model": "{{ get_where_subquery(source('raw', 'orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.source_not_null_raw_orders_order_date.4c6c74964f": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_orders_order_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_orders_order_date.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_orders_order_date.4c6c74964f", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_orders_order_date"], "alias": "source_not_null_raw_orders_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.137506, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_orders_order_date`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_date", "model": "{{ get_where_subquery(source('raw', 'orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_order_date.80ff9d08cd": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_orders_order_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_orders_order_date.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_order_date.80ff9d08cd", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_orders_order_date"], "alias": "dbt_utils_source_not_constant_raw_orders_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.138677, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_orders_order_date`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "order_date", "model": "{{ get_where_subquery(source('raw', 'orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_not_null_raw_orders_product_category_id.5538cf78d2": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_orders_product_category_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_orders_product_category_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_orders_product_category_id.5538cf78d2", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_orders_product_category_id"], "alias": "source_not_null_raw_orders_product_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.14115, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_orders_product_category_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_category_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_category_id", "model": "{{ get_where_subquery(source('raw', 'orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_product_category_id.a1bffe5382": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_orders_product_category_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_orders_product_category_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_product_category_id.a1bffe5382", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_orders_product_category_id"], "alias": "dbt_utils_source_not_constant_raw_orders_product_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.142397, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_orders_product_category_id`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_category_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "product_category_id", "model": "{{ get_where_subquery(source('raw', 'orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_orders_unexpected_product_category_id.c5b406ac9f": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_orders_unexpected_product_category_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_orders_unexpected_product_category_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_orders_unexpected_product_category_id.c5b406ac9f", "fqn": ["dbt_analytics_engine", "staging", "source_orders_unexpected_product_category_id"], "alias": "source_orders_unexpected_product_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.1448839, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_orders_unexpected_product_category_id`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_category_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 5, "column_name": "product_category_id", "model": "{{ get_where_subquery(source('raw', 'orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_not_null_raw_orders_product_id.47f01cfc3d": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_orders_product_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_orders_product_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_orders_product_id.47f01cfc3d", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_orders_product_id"], "alias": "source_not_null_raw_orders_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.147438, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_orders_product_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(source('raw', 'orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_product_id.c3e441e90b": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_orders_product_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_orders_product_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_product_id.c3e441e90b", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_orders_product_id"], "alias": "dbt_utils_source_not_constant_raw_orders_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.148615, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_orders_product_id`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(source('raw', 'orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_orders_unexpected_product__id.6d1bf7a4a2": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_orders_unexpected_product__id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_orders_unexpected_product__id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_orders_unexpected_product__id.6d1bf7a4a2", "fqn": ["dbt_analytics_engine", "staging", "source_orders_unexpected_product__id"], "alias": "source_orders_unexpected_product__id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.1511831, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_orders_unexpected_product__id`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 5, "column_name": "product_id", "model": "{{ get_where_subquery(source('raw', 'orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_not_null_raw_payments_order_id.def3cb6fc9": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_payments_order_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_payments_order_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_payments_order_id.def3cb6fc9", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_payments_order_id"], "alias": "source_not_null_raw_payments_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.15393, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_payments_order_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "payments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(source('raw', 'payments')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_order_id.f225e51aa8": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_payments_order_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_payments_order_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_order_id.f225e51aa8", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_payments_order_id"], "alias": "dbt_utils_source_not_constant_raw_payments_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.1552079, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_payments_order_id`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "payments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(source('raw', 'payments')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_payments_unexpected_order_id_length.b7725a5e3e": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_payments_unexpected_order_id_length", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_payments_unexpected_order_id_length.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_payments_unexpected_order_id_length.b7725a5e3e", "fqn": ["dbt_analytics_engine", "staging", "source_payments_unexpected_order_id_length"], "alias": "source_payments_unexpected_order_id_length", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.1579862, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_payments_unexpected_order_id_length`", "raw_code": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "payments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 36, "column_name": "order_id", "model": "{{ get_where_subquery(source('raw', 'payments')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.source_not_null_raw_payments_payment_id.a7f5b41ef5": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_payments_payment_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_payments_payment_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_payments_payment_id.a7f5b41ef5", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_payments_payment_id"], "alias": "source_not_null_raw_payments_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.160823, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_payments_payment_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "payments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(source('raw', 'payments')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_payment_id.757e26661f": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_payments_payment_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_payments_payment_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_payment_id.757e26661f", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_payments_payment_id"], "alias": "dbt_utils_source_not_constant_raw_payments_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.162081, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_payments_payment_id`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "payments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(source('raw', 'payments')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_not_null_raw_payments_payment_method.9aca47f72c": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_payments_payment_method", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_payments_payment_method.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_payments_payment_method.9aca47f72c", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_payments_payment_method"], "alias": "source_not_null_raw_payments_payment_method", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.164628, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_payments_payment_method`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "payments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_method", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_method", "model": "{{ get_where_subquery(source('raw', 'payments')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_payment_method.5b7ec2ca0a": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_payments_payment_method", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_payments_payment_method.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_payment_method.5b7ec2ca0a", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_payments_payment_method"], "alias": "dbt_utils_source_not_constant_raw_payments_payment_method", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.165889, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_payments_payment_method`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "payments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_method", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "payment_method", "model": "{{ get_where_subquery(source('raw', 'payments')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_payments_unexpected_payment_method.010f8676de": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_payments_unexpected_payment_method", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_payments_unexpected_payment_method.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_payments_unexpected_payment_method.010f8676de", "fqn": ["dbt_analytics_engine", "staging", "source_payments_unexpected_payment_method"], "alias": "source_payments_unexpected_payment_method", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.168446, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_payments_unexpected_payment_method`", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "payments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_method", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["amazon_pay", "stripe", "apple_pay", "bitcoin"], "column_name": "payment_method", "model": "{{ get_where_subquery(source('raw', 'payments')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.source_not_null_raw_payments_payment_amount.391c03161a": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_payments_payment_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_payments_payment_amount.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_payments_payment_amount.391c03161a", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_payments_payment_amount"], "alias": "source_not_null_raw_payments_payment_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.1711879, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_payments_payment_amount`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "payments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_amount", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_amount", "model": "{{ get_where_subquery(source('raw', 'payments')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.source_payments_assert_positive_payment_amount.d0159c6dbe": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_payments_assert_positive_payment_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_payments_assert_positive_payment_amount.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_payments_assert_positive_payment_amount.d0159c6dbe", "fqn": ["dbt_analytics_engine", "staging", "source_payments_assert_positive_payment_amount"], "alias": "source_payments_assert_positive_payment_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.172371, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_payments_assert_positive_payment_amount`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "payments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_amount", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "payment_amount", "model": "{{ get_where_subquery(source('raw', 'payments')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_not_null_raw_payments_payment_country_id.672aaa798a": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_payments_payment_country_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_payments_payment_country_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_payments_payment_country_id.672aaa798a", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_payments_payment_country_id"], "alias": "source_not_null_raw_payments_payment_country_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.174921, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_payments_payment_country_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "payments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_country_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_country_id", "model": "{{ get_where_subquery(source('raw', 'payments')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_payment_country_id.11cb76a07e": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_payments_payment_country_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_payments_payment_country_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_payment_country_id.11cb76a07e", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_payments_payment_country_id"], "alias": "dbt_utils_source_not_constant_raw_payments_payment_country_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.176097, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_payments_payment_country_id`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "payments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_country_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "payment_country_id", "model": "{{ get_where_subquery(source('raw', 'payments')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_payments_unexpected_country_id.e6838f7725": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_payments_unexpected_country_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_payments_unexpected_country_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_payments_unexpected_country_id.e6838f7725", "fqn": ["dbt_analytics_engine", "staging", "source_payments_unexpected_country_id"], "alias": "source_payments_unexpected_country_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.179018, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_payments_unexpected_country_id`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "payments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_country_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 10, "column_name": "payment_country_id", "model": "{{ get_where_subquery(source('raw', 'payments')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_not_null_raw_payments_payment_status.54558a6ea3": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_payments_payment_status", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_payments_payment_status.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_payments_payment_status.54558a6ea3", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_payments_payment_status"], "alias": "source_not_null_raw_payments_payment_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.181534, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_payments_payment_status`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "payments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_status", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_status", "model": "{{ get_where_subquery(source('raw', 'payments')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_payment_status.bf12f29150": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_payments_payment_status", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_payments_payment_status.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_payment_status.bf12f29150", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_payments_payment_status"], "alias": "dbt_utils_source_not_constant_raw_payments_payment_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.182797, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_payments_payment_status`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "payments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_status", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "payment_status", "model": "{{ get_where_subquery(source('raw', 'payments')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_payments_unexpected_payment_status.cdd31bef7c": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_payments_unexpected_payment_status", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_payments_unexpected_payment_status.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_payments_unexpected_payment_status.cdd31bef7c", "fqn": ["dbt_analytics_engine", "staging", "source_payments_unexpected_payment_status"], "alias": "source_payments_unexpected_payment_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.185298, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_payments_unexpected_payment_status`", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "payments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_status", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["successful", "failed"], "column_name": "payment_status", "model": "{{ get_where_subquery(source('raw', 'payments')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.source_not_null_raw_payments_created_at.710d6129ed": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_payments_created_at", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_payments_created_at.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_payments_created_at.710d6129ed", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_payments_created_at"], "alias": "source_not_null_raw_payments_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.188034, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_payments_created_at`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "payments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(source('raw', 'payments')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_created_at.f13e871fc3": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_payments_created_at", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_payments_created_at.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_created_at.f13e871fc3", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_payments_created_at"], "alias": "dbt_utils_source_not_constant_raw_payments_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.189215, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_payments_created_at`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "payments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(source('raw', 'payments')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_unique_raw_returns_order_id.a8aef5caa0": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_unique_raw_returns_order_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_unique_raw_returns_order_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_unique_raw_returns_order_id.a8aef5caa0", "fqn": ["dbt_analytics_engine", "staging", "source_unique_raw_returns_order_id"], "alias": "source_unique_raw_returns_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.191909, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_unique_raw_returns_order_id`", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "returns"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.dbt_analytics_engine.raw.returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(source('raw', 'returns')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.source_not_null_raw_returns_order_id.6d0a5fcbbe": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_returns_order_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_returns_order_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_returns_order_id.6d0a5fcbbe", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_returns_order_id"], "alias": "source_not_null_raw_returns_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.193085, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_returns_order_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "returns"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(source('raw', 'returns')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.source_returns_unexpected_order_id_length.66bc0666d6": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_returns_unexpected_order_id_length", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_returns_unexpected_order_id_length.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_returns_unexpected_order_id_length.66bc0666d6", "fqn": ["dbt_analytics_engine", "staging", "source_returns_unexpected_order_id_length"], "alias": "source_returns_unexpected_order_id_length", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.1942542, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_returns_unexpected_order_id_length`", "raw_code": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "returns"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 36, "column_name": "order_id", "model": "{{ get_where_subquery(source('raw', 'returns')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.source_unique_raw_returns_return_id.1d09b09e28": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_unique_raw_returns_return_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_unique_raw_returns_return_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_unique_raw_returns_return_id.1d09b09e28", "fqn": ["dbt_analytics_engine", "staging", "source_unique_raw_returns_return_id"], "alias": "source_unique_raw_returns_return_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.197064, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_unique_raw_returns_return_id`", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "returns"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.dbt_analytics_engine.raw.returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "return_id", "model": "{{ get_where_subquery(source('raw', 'returns')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.source_not_null_raw_returns_return_id.18df885383": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_returns_return_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_returns_return_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_returns_return_id.18df885383", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_returns_return_id"], "alias": "source_not_null_raw_returns_return_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.198247, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_returns_return_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "returns"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "return_id", "model": "{{ get_where_subquery(source('raw', 'returns')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.source_returns_unexpected_return_id_length.3da49c526e": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_returns_unexpected_return_id_length", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_returns_unexpected_return_id_length.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_returns_unexpected_return_id_length.3da49c526e", "fqn": ["dbt_analytics_engine", "staging", "source_returns_unexpected_return_id_length"], "alias": "source_returns_unexpected_return_id_length", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.1994722, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_returns_unexpected_return_id_length`", "raw_code": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "returns"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 36, "column_name": "return_id", "model": "{{ get_where_subquery(source('raw', 'returns')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.source_not_null_raw_returns_is_returned.148b12a528": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_returns_is_returned", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_returns_is_returned.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_returns_is_returned.148b12a528", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_returns_is_returned"], "alias": "source_not_null_raw_returns_is_returned", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.202175, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_returns_is_returned`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "returns"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_returned", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_returned", "model": "{{ get_where_subquery(source('raw', 'returns')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_returns_is_returned.cd1f0f7ac5": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_returns_is_returned", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_returns_is_returned.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_returns_is_returned.cd1f0f7ac5", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_returns_is_returned"], "alias": "dbt_utils_source_not_constant_raw_returns_is_returned", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.203409, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_returns_is_returned`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "returns"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_returned", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "is_returned", "model": "{{ get_where_subquery(source('raw', 'returns')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_returns_unexpected_is_returned_bool.c8835a46b6": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_returns_unexpected_is_returned_bool", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_returns_unexpected_is_returned_bool.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_returns_unexpected_is_returned_bool.c8835a46b6", "fqn": ["dbt_analytics_engine", "staging", "source_returns_unexpected_is_returned_bool"], "alias": "source_returns_unexpected_is_returned_bool", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.205885, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_returns_unexpected_is_returned_bool`", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "returns"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_returned", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "is_returned", "model": "{{ get_where_subquery(source('raw', 'returns')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.source_not_null_raw_returns_return_date.d74bba5b49": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_returns_return_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_returns_return_date.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_returns_return_date.d74bba5b49", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_returns_return_date"], "alias": "source_not_null_raw_returns_return_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.208411, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_returns_return_date`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "returns"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_date", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "return_date", "model": "{{ get_where_subquery(source('raw', 'returns')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_returns_return_date.b667e51d4b": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_returns_return_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_returns_return_date.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_returns_return_date.b667e51d4b", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_returns_return_date"], "alias": "dbt_utils_source_not_constant_raw_returns_return_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.209583, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_returns_return_date`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "returns"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_date", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "return_date", "model": "{{ get_where_subquery(source('raw', 'returns')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_not_null_raw_returns_return_reason.005573374b": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_returns_return_reason", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_returns_return_reason.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_returns_return_reason.005573374b", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_returns_return_reason"], "alias": "source_not_null_raw_returns_return_reason", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.212152, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_returns_return_reason`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "returns"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_reason", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "return_reason", "model": "{{ get_where_subquery(source('raw', 'returns')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_returns_return_reason.8a55d4b196": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_returns_return_reason", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_returns_return_reason.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_returns_return_reason.8a55d4b196", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_returns_return_reason"], "alias": "dbt_utils_source_not_constant_raw_returns_return_reason", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.213328, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_returns_return_reason`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "returns"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_reason", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "return_reason", "model": "{{ get_where_subquery(source('raw', 'returns')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_returns_unexpected_return_reason.bbd49bceac": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_returns_unexpected_return_reason", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_returns_unexpected_return_reason.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_returns_unexpected_return_reason.bbd49bceac", "fqn": ["dbt_analytics_engine", "staging", "source_returns_unexpected_return_reason"], "alias": "source_returns_unexpected_return_reason", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.215892, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_returns_unexpected_return_reason`", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "returns"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_reason", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Not as Described", "Compatibility Issues", "Quality Concerns", "Technical Difficulties"], "column_name": "return_reason", "model": "{{ get_where_subquery(source('raw', 'returns')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.source_unique_raw_shipping_order_id.d5a8aa62ce": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_unique_raw_shipping_order_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_unique_raw_shipping_order_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_unique_raw_shipping_order_id.d5a8aa62ce", "fqn": ["dbt_analytics_engine", "staging", "source_unique_raw_shipping_order_id"], "alias": "source_unique_raw_shipping_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.218563, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_unique_raw_shipping_order_id`", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "shipping"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.dbt_analytics_engine.raw.shipping"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(source('raw', 'shipping')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.source_not_null_raw_shipping_order_id.4459e0b7d6": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_shipping_order_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_shipping_order_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_shipping_order_id.4459e0b7d6", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_shipping_order_id"], "alias": "source_not_null_raw_shipping_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.219738, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_shipping_order_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "shipping"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.shipping"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(source('raw', 'shipping')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.source_shipping_unexpected_order_id_length.2ba4519514": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_shipping_unexpected_order_id_length", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_shipping_unexpected_order_id_length.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_shipping_unexpected_order_id_length.2ba4519514", "fqn": ["dbt_analytics_engine", "staging", "source_shipping_unexpected_order_id_length"], "alias": "source_shipping_unexpected_order_id_length", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.22091, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_shipping_unexpected_order_id_length`", "raw_code": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "shipping"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.shipping"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 36, "column_name": "order_id", "model": "{{ get_where_subquery(source('raw', 'shipping')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.source_unique_raw_shipping_shipping_id.c6c0e38145": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_unique_raw_shipping_shipping_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_unique_raw_shipping_shipping_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_unique_raw_shipping_shipping_id.c6c0e38145", "fqn": ["dbt_analytics_engine", "staging", "source_unique_raw_shipping_shipping_id"], "alias": "source_unique_raw_shipping_shipping_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.223687, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_unique_raw_shipping_shipping_id`", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "shipping"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.dbt_analytics_engine.raw.shipping"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipping_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "shipping_id", "model": "{{ get_where_subquery(source('raw', 'shipping')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_shipping_shipping_id.71eae1e42f": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_shipping_shipping_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_shipping_shipping_id.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_shipping_shipping_id.71eae1e42f", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_shipping_shipping_id"], "alias": "dbt_utils_source_not_constant_raw_shipping_shipping_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.224852, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_shipping_shipping_id`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "shipping"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.shipping"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipping_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "shipping_id", "model": "{{ get_where_subquery(source('raw', 'shipping')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_shipping_unexpected_shipping_id_length.3c4d89d925": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_shipping_unexpected_shipping_id_length", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_shipping_unexpected_shipping_id_length.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_shipping_unexpected_shipping_id_length.3c4d89d925", "fqn": ["dbt_analytics_engine", "staging", "source_shipping_unexpected_shipping_id_length"], "alias": "source_shipping_unexpected_shipping_id_length", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.2276711, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_shipping_unexpected_shipping_id_length`", "raw_code": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "shipping"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.shipping"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipping_id", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 36, "column_name": "shipping_id", "model": "{{ get_where_subquery(source('raw', 'shipping')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.source_not_null_raw_shipping_is_shipped.3766118adb": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_not_null_raw_shipping_is_shipped", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_not_null_raw_shipping_is_shipped.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_not_null_raw_shipping_is_shipped.3766118adb", "fqn": ["dbt_analytics_engine", "staging", "source_not_null_raw_shipping_is_shipped"], "alias": "source_not_null_raw_shipping_is_shipped", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.230446, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_not_null_raw_shipping_is_shipped`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "shipping"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_analytics_engine.raw.shipping"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_shipped", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_shipped", "model": "{{ get_where_subquery(source('raw', 'shipping')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_shipping_is_shipped.a565383871": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_shipping_is_shipped", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_shipping_is_shipped.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_shipping_is_shipped.a565383871", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_shipping_is_shipped"], "alias": "dbt_utils_source_not_constant_raw_shipping_is_shipped", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.2316182, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_shipping_is_shipped`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "shipping"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.shipping"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_shipped", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "is_shipped", "model": "{{ get_where_subquery(source('raw', 'shipping')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_shipping_unexpected_is_shipped_bool.6a63595654": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_shipping_unexpected_is_shipped_bool", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_shipping_unexpected_is_shipped_bool.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_shipping_unexpected_is_shipped_bool.6a63595654", "fqn": ["dbt_analytics_engine", "staging", "source_shipping_unexpected_is_shipped_bool"], "alias": "source_shipping_unexpected_is_shipped_bool", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.234093, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_shipping_unexpected_is_shipped_bool`", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "shipping"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.shipping"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_shipped", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "is_shipped", "model": "{{ get_where_subquery(source('raw', 'shipping')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_shipping_shipping_date.019f309d0c": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_shipping_shipping_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_shipping_shipping_date.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_shipping_shipping_date.019f309d0c", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_shipping_shipping_date"], "alias": "dbt_utils_source_not_constant_raw_shipping_shipping_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.236606, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_shipping_shipping_date`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "shipping"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.shipping"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipping_date", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "shipping_date", "model": "{{ get_where_subquery(source('raw', 'shipping')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_shipping_shipping_amount.e4a06339ae": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_source_not_constant_raw_shipping_shipping_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_source_not_constant_raw_shipping_shipping_amount.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_shipping_shipping_amount.e4a06339ae", "fqn": ["dbt_analytics_engine", "staging", "dbt_utils_source_not_constant_raw_shipping_shipping_amount"], "alias": "dbt_utils_source_not_constant_raw_shipping_shipping_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726251875.2391438, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_source_not_constant_raw_shipping_shipping_amount`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw", "shipping"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.shipping"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipping_amount", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "shipping_amount", "model": "{{ get_where_subquery(source('raw', 'shipping')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.source_shipping_assert_positive_shipping_amount.8d0c1a37a8": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "source_shipping_assert_positive_shipping_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "source_shipping_assert_positive_shipping_amount.sql", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "test.dbt_analytics_engine.source_shipping_assert_positive_shipping_amount.8d0c1a37a8", "fqn": ["dbt_analytics_engine", "staging", "source_shipping_assert_positive_shipping_amount"], "alias": "source_shipping_assert_positive_shipping_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "shipping_amount IS NOT NULL", "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "where": "shipping_amount IS NOT NULL"}, "created_at": 1726251875.241855, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`source_shipping_assert_positive_shipping_amount`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(where=\"shipping_amount IS NOT NULL\") }}", "language": "sql", "refs": [], "sources": [["raw", "shipping"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_analytics_engine.raw.shipping"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipping_amount", "file_key_name": "sources.raw", "attached_node": null, "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "shipping_amount", "model": "{{ get_where_subquery(source('raw', 'shipping')) }}"}, "namespace": "dbt_utils"}}, "seed.dbt_analytics_engine.seed_payment_fees": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_seeds", "name": "seed_payment_fees", "resource_type": "seed", "package_name": "dbt_analytics_engine", "path": "seed_payment_fees.csv", "original_file_path": "seeds/seed_payment_fees.csv", "unique_id": "seed.dbt_analytics_engine.seed_payment_fees", "fqn": ["dbt_analytics_engine", "seed_payment_fees"], "alias": "seed_payment_fees", "checksum": {"name": "sha256", "checksum": "cdb549f4dcb59ceefe1e01027059bf8f3004ad5d2d74e345228723233a60c47c"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {"payment_method_id": {"name": "payment_method_id", "description": "", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "payment_method": {"name": "payment_method", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "percentage_fee": {"name": "percentage_fee", "description": "", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "fixed_fee": {"name": "fixed_fee", "description": "", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_analytics_engine://seeds/_seed_schemas.yml", "build_path": null, "unrendered_config": {"schema": "seeds"}, "created_at": 1726252747.393662, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_seeds`.`seed_payment_fees`", "raw_code": "", "root_path": "/Users/moeabbas/Documents/code/dbt_analytics_engine", "depends_on": {"macros": []}}, "test.dbt_analytics_engine.unique_seed_payment_fees_payment_method_id.e75aa7b850": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "unique_seed_payment_fees_payment_method_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "unique_seed_payment_fees_payment_method_id.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.unique_seed_payment_fees_payment_method_id.e75aa7b850", "fqn": ["dbt_analytics_engine", "unique_seed_payment_fees_payment_method_id"], "alias": "unique_seed_payment_fees_payment_method_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726252747.440095, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`unique_seed_payment_fees_payment_method_id`", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_payment_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.dbt_analytics_engine.seed_payment_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_method_id", "file_key_name": "seeds.seed_payment_fees", "attached_node": "seed.dbt_analytics_engine.seed_payment_fees", "test_metadata": {"name": "unique", "kwargs": {"column_name": "payment_method_id", "model": "{{ get_where_subquery(ref('seed_payment_fees')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_seed_payment_fees_payment_method_id.ed89636986": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_seed_payment_fees_payment_method_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_seed_payment_fees_payment_method_id.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.not_null_seed_payment_fees_payment_method_id.ed89636986", "fqn": ["dbt_analytics_engine", "not_null_seed_payment_fees_payment_method_id"], "alias": "not_null_seed_payment_fees_payment_method_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726252747.441511, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_seed_payment_fees_payment_method_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_payment_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.dbt_analytics_engine.seed_payment_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_method_id", "file_key_name": "seeds.seed_payment_fees", "attached_node": "seed.dbt_analytics_engine.seed_payment_fees", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_method_id", "model": "{{ get_where_subquery(ref('seed_payment_fees')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.seed_payment_fees_unexpected_payment_method_id.c1100364e1": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "seed_payment_fees_unexpected_payment_method_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "seed_payment_fees_unexpected_payment_method_id.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.seed_payment_fees_unexpected_payment_method_id.c1100364e1", "fqn": ["dbt_analytics_engine", "seed_payment_fees_unexpected_payment_method_id"], "alias": "seed_payment_fees_unexpected_payment_method_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726252747.442753, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`seed_payment_fees_unexpected_payment_method_id`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_payment_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_analytics_engine.seed_payment_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_method_id", "file_key_name": "seeds.seed_payment_fees", "attached_node": "seed.dbt_analytics_engine.seed_payment_fees", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 10, "column_name": "payment_method_id", "model": "{{ get_where_subquery(ref('seed_payment_fees')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.unique_seed_payment_fees_payment_method.d1803efcb4": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "unique_seed_payment_fees_payment_method", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "unique_seed_payment_fees_payment_method.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.unique_seed_payment_fees_payment_method.d1803efcb4", "fqn": ["dbt_analytics_engine", "unique_seed_payment_fees_payment_method"], "alias": "unique_seed_payment_fees_payment_method", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726252747.455963, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`unique_seed_payment_fees_payment_method`", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_payment_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.dbt_analytics_engine.seed_payment_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_method", "file_key_name": "seeds.seed_payment_fees", "attached_node": "seed.dbt_analytics_engine.seed_payment_fees", "test_metadata": {"name": "unique", "kwargs": {"column_name": "payment_method", "model": "{{ get_where_subquery(ref('seed_payment_fees')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_seed_payment_fees_payment_method.c7d24bb82e": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_seed_payment_fees_payment_method", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_seed_payment_fees_payment_method.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.not_null_seed_payment_fees_payment_method.c7d24bb82e", "fqn": ["dbt_analytics_engine", "not_null_seed_payment_fees_payment_method"], "alias": "not_null_seed_payment_fees_payment_method", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726252747.4579258, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_seed_payment_fees_payment_method`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_payment_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.dbt_analytics_engine.seed_payment_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_method", "file_key_name": "seeds.seed_payment_fees", "attached_node": "seed.dbt_analytics_engine.seed_payment_fees", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_method", "model": "{{ get_where_subquery(ref('seed_payment_fees')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.seed_payment_fees_unexpected_payment_method.a712880c05": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "seed_payment_fees_unexpected_payment_method", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "seed_payment_fees_unexpected_payment_method.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.seed_payment_fees_unexpected_payment_method.a712880c05", "fqn": ["dbt_analytics_engine", "seed_payment_fees_unexpected_payment_method"], "alias": "seed_payment_fees_unexpected_payment_method", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726252747.459145, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`seed_payment_fees_unexpected_payment_method`", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_payment_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_analytics_engine.seed_payment_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_method", "file_key_name": "seeds.seed_payment_fees", "attached_node": "seed.dbt_analytics_engine.seed_payment_fees", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["amazon_pay", "stripe", "apple_pay", "bitcoin"], "column_name": "payment_method", "model": "{{ get_where_subquery(ref('seed_payment_fees')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_seed_payment_fees_percentage_fee.697d087974": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_seed_payment_fees_percentage_fee", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_seed_payment_fees_percentage_fee.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.not_null_seed_payment_fees_percentage_fee.697d087974", "fqn": ["dbt_analytics_engine", "not_null_seed_payment_fees_percentage_fee"], "alias": "not_null_seed_payment_fees_percentage_fee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726252747.46473, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_seed_payment_fees_percentage_fee`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_payment_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.dbt_analytics_engine.seed_payment_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "percentage_fee", "file_key_name": "seeds.seed_payment_fees", "attached_node": "seed.dbt_analytics_engine.seed_payment_fees", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "percentage_fee", "model": "{{ get_where_subquery(ref('seed_payment_fees')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.seed_payment_fees_unexpected_percentage_fee.f4ed1ee461": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "seed_payment_fees_unexpected_percentage_fee", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "seed_payment_fees_unexpected_percentage_fee.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.seed_payment_fees_unexpected_percentage_fee.f4ed1ee461", "fqn": ["dbt_analytics_engine", "seed_payment_fees_unexpected_percentage_fee"], "alias": "seed_payment_fees_unexpected_percentage_fee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726252747.4660969, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`seed_payment_fees_unexpected_percentage_fee`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_payment_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_analytics_engine.seed_payment_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "percentage_fee", "file_key_name": "seeds.seed_payment_fees", "attached_node": "seed.dbt_analytics_engine.seed_payment_fees", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 100, "column_name": "percentage_fee", "model": "{{ get_where_subquery(ref('seed_payment_fees')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_seed_payment_fees_fixed_fee.2e54ee1bd7": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_seed_payment_fees_fixed_fee", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_seed_payment_fees_fixed_fee.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.not_null_seed_payment_fees_fixed_fee.2e54ee1bd7", "fqn": ["dbt_analytics_engine", "not_null_seed_payment_fees_fixed_fee"], "alias": "not_null_seed_payment_fees_fixed_fee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726252747.468974, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_seed_payment_fees_fixed_fee`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_payment_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.dbt_analytics_engine.seed_payment_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fixed_fee", "file_key_name": "seeds.seed_payment_fees", "attached_node": "seed.dbt_analytics_engine.seed_payment_fees", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fixed_fee", "model": "{{ get_where_subquery(ref('seed_payment_fees')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.seed_payment_fees_unexpected_fixed_fee.ff8eab6f52": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "seed_payment_fees_unexpected_fixed_fee", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "seed_payment_fees_unexpected_fixed_fee.sql", "original_file_path": "seeds/_seed_schemas.yml", "unique_id": "test.dbt_analytics_engine.seed_payment_fees_unexpected_fixed_fee.ff8eab6f52", "fqn": ["dbt_analytics_engine", "seed_payment_fees_unexpected_fixed_fee"], "alias": "seed_payment_fees_unexpected_fixed_fee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726252747.470193, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`seed_payment_fees_unexpected_fixed_fee`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "seed_payment_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["seed.dbt_analytics_engine.seed_payment_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fixed_fee", "file_key_name": "seeds.seed_payment_fees", "attached_node": "seed.dbt_analytics_engine.seed_payment_fees", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "fixed_fee", "model": "{{ get_where_subquery(ref('seed_payment_fees')) }}"}, "namespace": "dbt_utils"}}, "model.dbt_analytics_engine.dim_products": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev", "name": "dim_products", "resource_type": "model", "package_name": "dbt_analytics_engine", "path": "marts/dim_products.sql", "original_file_path": "models/marts/dim_products.sql", "unique_id": "model.dbt_analytics_engine.dim_products", "fqn": ["dbt_analytics_engine", "marts", "dim_products"], "alias": "dim_products", "checksum": {"name": "sha256", "checksum": "aebc5c235ae39bbecb670277f28abc998f522764987f4d721e31863240d07e13"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"analytics_engineer": "@Moe Abbas"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#000000"}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "required_tests": {"unique.*|not_null": 2}, "required_docs": true, "cluster_by": "date", "partition_by": {"field": "country_id", "data_type": "int64", "range": {"start": 0, "end": 100, "interval": 1}}}, "tags": [], "description": "This table contains dimensional data for products across different categories, regions, and timeframes.  It provides aggregated insights into sales, returns, shipping, and revenue performance, along with key  customer satisfaction and operational metrics. The table is used in dashboards for product performance  analysis and sales strategy optimization.\n", "columns": {"date": {"name": "date", "description": "The date representing when the data for product performance was aggregated, providing a time reference for the metrics in the table.", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": []}, "country_id": {"name": "country_id", "description": "A unique identifier for each country in which the product is sold or marketed, used to join with other geographical data tables.", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "The name of the country where the product is sold or marketed, used to filter product performance based on geographic regions.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "product_category": {"name": "product_category", "description": "The category to which the product belongs, such as electronics, apparel, or digital assets, allowing for category-level analysis of performance.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "product_name": {"name": "product_name", "description": "The name of the individual product being tracked, used for granular analysis of sales, returns, and other performance metrics.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "nb_order_id": {"name": "nb_order_id", "description": "The number of unique orders associated with the product, used to measure sales volume and demand for the product.", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "nb_shipping_id": {"name": "nb_shipping_id", "description": "The number of shipping transactions associated with the product, used to track logistics performance and delivery efficiency.", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "nb_return_id": {"name": "nb_return_id", "description": "The number of product returns, used to analyze product quality, customer satisfaction, and return rates for the product.", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "avg_fulfillment_days": {"name": "avg_fulfillment_days", "description": "The average number of days it takes to fulfill an order for the product, providing insights into supply chain efficiency and customer experience.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "avg_nps_score": {"name": "avg_nps_score", "description": "The average Net Promoter Score (NPS) for the product, indicating customer satisfaction and likelihood to recommend the product.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "total_gross_revenue": {"name": "total_gross_revenue", "description": "The total gross revenue generated by the product before any deductions for taxes, returns, or fees, providing a top-level view of sales performance.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "total_tax_amount": {"name": "total_tax_amount", "description": "The total amount of taxes collected for sales of the product, used to calculate net revenue and assess the impact of taxes on overall profitability.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "total_net_revenue_before_tax": {"name": "total_net_revenue_before_tax", "description": "The total net revenue generated by the product before taxes are applied, used to assess profitability before accounting for tax obligations.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "total_net_revenue_after_tax": {"name": "total_net_revenue_after_tax", "description": "The total net revenue generated by the product after taxes have been deducted, providing an accurate representation of revenue after all tax liabilities.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "total_cogs": {"name": "total_cogs", "description": "The total cost of goods sold (COGS) for the product, including manufacturing, shipping, and handling costs, used to calculate profit margins.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "total_returned_cogs": {"name": "total_returned_cogs", "description": "The total cost of goods sold for returned items, providing insights into the financial impact of product returns on profitability.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "total_refund_amount": {"name": "total_refund_amount", "description": "The total amount refunded to customers for returned products, used to assess the overall impact of returns on net revenue.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "total_payment_fee": {"name": "total_payment_fee", "description": "The total fees associated with payment processing for the product, including transaction fees from providers like credit card companies or digital wallets.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "total_cm": {"name": "total_cm", "description": "The total contribution margin for the product, calculated as net revenue minus cost of goods sold (COGS), providing a clear view of product profitability.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}}, "meta": {"analytics_engineer": "@Moe Abbas"}, "group": null, "docs": {"show": true, "node_color": "#000000"}, "patch_path": "dbt_analytics_engine://models/marts/_marts_models.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "required_tests": {"unique.*|not_null": 2}, "required_docs": true, "materialized": "table", "docs": {"node_color": "#000000"}, "meta": {"analytics_engineer": "@Moe Abbas"}, "partition_by": {"field": "country_id", "data_type": "int64", "range": {"start": 0, "end": 100, "interval": 1}}, "cluster_by": "date"}, "created_at": 1726254837.111336, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`", "raw_code": "{{ config(\n    partition_by = {\n      \"field\": \"country_id\",\n      \"data_type\": \"int64\",\n      \"range\": { \"start\": 0, \"end\": 100, \"interval\": 1}},\n    cluster_by = 'date'\n)}}\n\n{% set count_fields = ['order_id', 'shipping_id', 'return_id'] %}\n{% set avg_fields = ['fulfillment_days', 'nps_score'] %}\n{% set sum_fields = ['gross_revenue', 'tax_amount', 'net_revenue_before_tax', 'net_revenue_after_tax',\n                     'cogs', 'returned_cogs', 'refund_amount', 'payment_fee', 'cm'] %}\n\nWITH\n  dim_products AS (\n    SELECT DATE(order_date) AS date\n          ,country_id\n          ,country\n          ,product_category\n          ,product_name\n          {% for count_field in count_fields -%}\n          ,COUNT({{ count_field }}) AS nb_{{ count_field }}\n          {% endfor -%}\n\n          {% for avg_field in avg_fields -%}\n          ,ROUND(AVG({{ avg_field }}), 2) AS avg_{{ avg_field }}\n          {% endfor -%}\n\n          {% for sum_field in sum_fields -%}\n          ,ROUND(SUM({{ sum_field }}), 2) AS total_{{ sum_field }}\n          {% endfor -%}\n      FROM {{ ref('fct_orders') }}\n      GROUP BY date\n              ,country_id\n              ,country\n              ,product_category\n              ,product_name)\n\n  SELECT *\n    FROM dim_products", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_analytics_engine.fct_orders_timeseries_sma": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev", "name": "fct_orders_timeseries_sma", "resource_type": "model", "package_name": "dbt_analytics_engine", "path": "marts/fct_orders_timeseries_sma.sql", "original_file_path": "models/marts/fct_orders_timeseries_sma.sql", "unique_id": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_timeseries_sma"], "alias": "fct_orders_timeseries_sma", "checksum": {"name": "sha256", "checksum": "453e0b7a6a1fb21b1569f6f57f8f564a6720a2dbd68b3b8b906e4fc35b1fffb3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"analytics_engineer": "@Moe Abbas"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#000000"}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "required_tests": {"unique.*|not_null": 2}, "required_docs": true, "cluster_by": "date"}, "tags": [], "description": "Fact table capturing the daily sales time series data, including the total net revenue after tax (`sales`).  The table also includes various Simple Moving Averages (SMA) and Bollinger Bands calculated over different  periods (14, 30, 60, 120, and 250 days). This table is essential for analyzing sales trends, understanding  market volatility, and smoothing out fluctuations in daily sales data.\"\n", "columns": {"date": {"name": "date", "description": "The date corresponding to the recorded sales figures.", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": []}, "sales": {"name": "sales", "description": "The total net revenue after tax for each day, representing the sum of all sales transactions.  This field is used as the basis for calculating various metrics such as Simple Moving Averages (SMA) and Bollinger Bands.\n", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "sales_sma_14": {"name": "sales_sma_14", "description": "The 14-day Simple Moving Average (SMA) of daily sales, providing a balance between short-term and medium-term trend analysis.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "sales_sma_30": {"name": "sales_sma_30", "description": "The 30-day Simple Moving Average (SMA) of daily sales, offering a slightly longer-term view on sales trends.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "sales_sma_60": {"name": "sales_sma_60", "description": "The 60-day Simple Moving Average (SMA) of daily sales, representing a quarterly trend for sales data.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "sales_sma_120": {"name": "sales_sma_120", "description": "The 120-day Simple Moving Average (SMA) of daily sales, useful for identifying trends over half a year.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "sales_sma_250": {"name": "sales_sma_250", "description": "The 250-day Simple Moving Average (SMA) of daily sales, providing insights into yearly sales trends.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "sales_stddev_14": {"name": "sales_stddev_14", "description": "The 14-day standard deviation of daily sales, used to measure the volatility around the 14-day Simple Moving Average.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "sales_stddev_30": {"name": "sales_stddev_30", "description": "The 30-day standard deviation of daily sales, providing insights into the variability of sales around the 30-day Simple Moving Average.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "sales_stddev_60": {"name": "sales_stddev_60", "description": "The 60-day standard deviation of daily sales, indicating the volatility of sales trends over a quarterly period.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "sales_stddev_120": {"name": "sales_stddev_120", "description": "The 120-day standard deviation of daily sales, used to assess the variability of sales over approximately half a year.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "sales_stddev_250": {"name": "sales_stddev_250", "description": "The 250-day standard deviation of daily sales, reflecting the volatility around the annual sales trends.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "sales_sma_upper_14": {"name": "sales_sma_upper_14", "description": "The upper Bollinger Band for the 14-day Simple Moving Average, calculated as the SMA plus two standard deviations.  Indicates the potential upper bound of short-term sales trends.\n", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "sales_sma_lower_14": {"name": "sales_sma_lower_14", "description": "The lower Bollinger Band for the 14-day Simple Moving Average, calculated as the SMA minus two standard deviations.  Indicates the potential lower bound of short-term sales trends.\n", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "sales_sma_upper_30": {"name": "sales_sma_upper_30", "description": "The upper Bollinger Band for the 30-day Simple Moving Average, calculated as the SMA plus two standard deviations.  Represents the potential upper bound for monthly sales trends.\n", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "sales_sma_lower_30": {"name": "sales_sma_lower_30", "description": "The lower Bollinger Band for the 30-day Simple Moving Average, calculated as the SMA minus two standard deviations.  Represents the potential lower bound for monthly sales trends.\n", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "sales_sma_upper_60": {"name": "sales_sma_upper_60", "description": "The upper Bollinger Band for the 60-day Simple Moving Average, calculated as the SMA plus two standard deviations.  Indicates the upper limit of quarterly sales trends.\n", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "sales_sma_lower_60": {"name": "sales_sma_lower_60", "description": "The lower Bollinger Band for the 60-day Simple Moving Average, calculated as the SMA minus two standard deviations.  Indicates the lower limit of quarterly sales trends.\n", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "sales_sma_upper_120": {"name": "sales_sma_upper_120", "description": "The upper Bollinger Band for the 120-day Simple Moving Average, calculated as the SMA plus two standard deviations.  Provides the upper bound for sales trends over half a year.\n", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "sales_sma_lower_120": {"name": "sales_sma_lower_120", "description": "The lower Bollinger Band for the 120-day Simple Moving Average, calculated as the SMA minus two standard deviations.  Provides the lower bound for sales trends over half a year.\n", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "sales_sma_upper_250": {"name": "sales_sma_upper_250", "description": "The upper Bollinger Band for the 250-day Simple Moving Average, calculated as the SMA plus two standard deviations.  Used to gauge the upper limit of annual sales trends.\n", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "sales_sma_lower_250": {"name": "sales_sma_lower_250", "description": "The lower Bollinger Band for the 250-day Simple Moving Average, calculated as the SMA minus two standard deviations.  Used to gauge the lower limit of annual sales trends.\n", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}}, "meta": {"analytics_engineer": "@Moe Abbas"}, "group": null, "docs": {"show": true, "node_color": "#000000"}, "patch_path": "dbt_analytics_engine://models/marts/_marts_models.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "required_tests": {"unique.*|not_null": 2}, "required_docs": true, "materialized": "table", "docs": {"node_color": "#000000"}, "meta": {"analytics_engineer": "@Moe Abbas"}, "cluster_by": "date"}, "created_at": 1726254837.1177258, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`", "raw_code": "{{ config(\n    cluster_by = 'date'\n)}}\n\n{% set periods = [14, 30, 60, 120, 250] %}\n\nWITH\n  fct_orders_timeseries_sma AS (\n    SELECT DATE(order_date) AS date\n          ,SUM(net_revenue_after_tax) AS sales\n      FROM {{ ref('fct_orders') }}\n      GROUP BY date)\n\n\n  ,simple_moving_averages AS (\n    SELECT date\n          ,sales\n          {%- for period in periods %}\n          ,AVG(sales) OVER (ORDER BY date \n             ROWS BETWEEN {{ period }} PRECEDING \n                  AND CURRENT ROW) AS sales_sma_{{ period }}\n          {%- endfor %}\n      FROM fct_orders_timeseries_sma)\n\n\n  ,standard_deviations AS (\n    SELECT *\n           {%- for period in periods %}\n           ,STDDEV(sales) OVER (ORDER BY date \n              ROWS BETWEEN {{ period }} PRECEDING \n                   AND CURRENT ROW) AS sales_stddev_{{ period }}\n           {%- endfor %}\n      FROM simple_moving_averages)\n\n\n  ,bollinger_bands AS (\n    SELECT *\n           {%- for period in periods %}\n           ,sales_sma_{{ period }} \n            + (2 * sales_stddev_{{ period }}) AS sales_sma_upper_{{ period }}\n           ,sales_sma_{{ period }} \n            - (2 * sales_stddev_{{ period }}) AS sales_sma_lower_{{ period }}\n           {%- endfor %}\n      FROM standard_deviations)\n\n  SELECT *\n    FROM bollinger_bands", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_analytics_engine.fct_orders": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev", "name": "fct_orders", "resource_type": "model", "package_name": "dbt_analytics_engine", "path": "marts/fct_orders.sql", "original_file_path": "models/marts/fct_orders.sql", "unique_id": "model.dbt_analytics_engine.fct_orders", "fqn": ["dbt_analytics_engine", "marts", "fct_orders"], "alias": "fct_orders", "checksum": {"name": "sha256", "checksum": "a29032f1461c40eba1436dfa0ee92d087b2c20610b1e12b61852deb17f7218c1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"analytics_engineer": "@Moe Abbas"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#000000"}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "required_tests": {"unique.*|not_null": 2}, "required_docs": true, "cluster_by": "order_date", "partition_by": {"field": "country_id", "data_type": "int64", "range": {"start": 0, "end": 100, "interval": 1}}}, "tags": [], "description": "Fact table capturing detailed information about customer orders, including order details, payment methods,  shipping, returns, and customer feedback. This table provides a comprehensive view of each order's lifecycle,  enabling in-depth analysis of sales performance, customer behavior, and product profitability.\n", "columns": {"country_id": {"name": "country_id", "description": "Identifier for the billing country of the order and used as the partition field.", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "The billing country associated with the order.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "order_id": {"name": "order_id", "description": "Unique identifier for the order.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "order_status": {"name": "order_status", "description": "Orders can be one of the following statuses:\n\n| status         | description                                                               |\n|----------------|---------------------------------------------------------------------------|\n| completed      | The order has been placed and all payments were successful                |\n| failed         | The order has been placed and at least one payment failed                 |", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Unique identifier for the customer placing the order.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "nb_payments": {"name": "nb_payments", "description": "The number of payments made by the customer for the order.", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The first name of the customer.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The last name of the customer.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "is_shipped": {"name": "is_shipped", "description": "Indicates whether the order has been shipped (TRUE if shipped, FALSE otherwise).", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "shipping_id": {"name": "shipping_id", "description": "A unique identifier for each shipping transaction. This field ensures that each shipment is  tracked individually and is essential for linking sales orders to their corresponding shipping details.\n", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "shipping_amount": {"name": "shipping_amount", "description": "The total gross amount charged for shipping the order.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "payment_method": {"name": "payment_method", "description": "The payment method used for the order; accepted values include 'amazon_pay', 'stripe', 'apple_pay', and 'bitcoin'.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "gross_revenue": {"name": "gross_revenue", "description": "The total gross amount paid by the customer, including tax and shipping.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "The tax rate applied to the order, based on the billing country.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "tax_amount": {"name": "tax_amount", "description": "The total amount of tax charged on the order.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "net_revenue_before_tax": {"name": "net_revenue_before_tax", "description": "The gross revenue from the order minus the shipping amount.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "net_revenue_after_tax": {"name": "net_revenue_after_tax", "description": "The gross revenue from the order minus both shipping and tax amounts.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "The date on which the order was created.", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "shipping_date": {"name": "shipping_date", "description": "The date on which the order was shipped.", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "is_returned": {"name": "is_returned", "description": "Indicates whether the order was returned (TRUE if returned, FALSE otherwise).", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "return_id": {"name": "return_id", "description": "A unique identifier for each return associated with an order. This field is populated only  if the order has been returned, and remains null for non-returned orders.\n", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "return_date": {"name": "return_date", "description": "The date on which the order was returned, if applicable.", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "return_reason": {"name": "return_reason", "description": "The reason provided for returning the order, if applicable; accepted values include 'undersized', 'oversized', and 'defective'.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "fulfillment_days": {"name": "fulfillment_days", "description": "The number of days between the order date and the shipping date, representing the time taken to fulfill the order.", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "is_nps": {"name": "is_nps", "description": "Indicates whether the customer provided an NPS (Net Promoter Score) score (TRUE if provided, FALSE otherwise).", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "nps_score": {"name": "nps_score", "description": "The Net Promoter Score (NPS) provided by the customer, ranging from 0 to 10, which indicates customer satisfaction and loyalty.", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "nps_date": {"name": "nps_date", "description": "The date on which the customer provided their Net Promoter Score (NPS).", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "product_category_id": {"name": "product_category_id", "description": "Unique identifier for the product's category.", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "product_category": {"name": "product_category", "description": "The name of the category to which the product belongs.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "Unique identifier for the product.", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "product_name": {"name": "product_name", "description": "The name of the product.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "cogs": {"name": "cogs", "description": "The cost of goods sold (COGS) for the product, representing the direct costs  attributable to the production of the product sold in the order.\n", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "returned_cogs": {"name": "returned_cogs", "description": "The cost of goods sold (COGS) associated with returned products, representing  the direct costs of the returned items.\n", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "refund_amount": {"name": "refund_amount", "description": "The amount refunded to the customer for returned products or order cancellations.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "payment_fee": {"name": "payment_fee", "description": "The fee charged by the payment processor for handling the transaction associated with the order.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "cm": {"name": "cm", "description": "The fee charged by the payment processor for handling the transaction associated with the order.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "customer_order_nb": {"name": "customer_order_nb", "description": "The customer's order number. 1 indicates a first-time order (new customer), while any number  greater than 1 indicates that the customer has placed multiple orders (returning customer).\n", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "customer_type": {"name": "customer_type", "description": "Indicates whether a customer is new or returning. The values can be 'new' for first-time  customers and 'returning' for customers who have made previous purchases.\n", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {"analytics_engineer": "@Moe Abbas"}, "group": null, "docs": {"show": true, "node_color": "#000000"}, "patch_path": "dbt_analytics_engine://models/marts/_marts_models.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "required_tests": {"unique.*|not_null": 2}, "required_docs": true, "materialized": "table", "docs": {"node_color": "#000000"}, "meta": {"analytics_engineer": "@Moe Abbas"}, "partition_by": {"field": "country_id", "data_type": "int64", "range": {"start": 0, "end": 100, "interval": 1}}, "cluster_by": "order_date"}, "created_at": 1726254837.1285481, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`", "raw_code": "{{ config(\n    partition_by = {\n      \"field\": \"country_id\",\n      \"data_type\": \"int64\",\n      \"range\": { \"start\": 0, \"end\": 100, \"interval\": 1}},\n    cluster_by = 'order_date'\n)}}\n\n\nWITH\n  int_orders AS (\n    SELECT *\n      FROM {{ ref('int_orders') }})\n\n\n  ,int_payments AS (\n    SELECT order_id\n          ,COUNT(payment_id) AS nb_payments\n          ,MAX(payment_method) AS payment_method\n          ,MAX(country_id) AS country_id\n          ,MAX(country) AS country\n          ,SUM(gross_revenue) AS gross_revenue\n          ,MAX(tax_rate) AS tax_rate\n          ,SUM(payment_fee) AS payment_fee\n      FROM {{ ref('int_payments') }}\n      GROUP BY order_id)\n\n\n  ,joins AS (\n      SELECT country_id\n            ,country\n            ,order_id\n            ,order_status\n            ,customer_id\n            ,nb_payments\n            ,first_name\n            ,last_name\n            ,shipping_id\n            ,is_shipped\n            ,shipping_amount\n            ,payment_method\n            ,gross_revenue\n            ,tax_rate\n            ,SAFE_MULTIPLY(SAFE_SUBTRACT(gross_revenue, COALESCE(shipping_amount, 0)), SAFE_DIVIDE(tax_rate, 100)) AS tax_amount\n            ,SAFE_SUBTRACT(gross_revenue, COALESCE(shipping_amount, 0)) AS net_revenue_before_tax\n            ,SAFE_DIVIDE(SAFE_SUBTRACT(gross_revenue, COALESCE(shipping_amount, 0)), (1 + SAFE_DIVIDE(tax_rate, 100))) AS net_revenue_after_tax\n            ,order_date\n            ,shipping_date\n            ,DATE_DIFF(shipping_date, order_date, DAY) AS fulfillment_days\n            ,IF(is_nps IS NULL, FALSE, TRUE) AS is_nps\n            ,nps_score\n            ,nps_date\n            ,product_category_id\n            ,product_category\n            ,product_id\n            ,product_name\n            ,SAFE_ADD(inbound_shipping_cost, product_cost) AS cogs\n            ,return_id\n            ,IF(is_returned IS NULL, FALSE, TRUE) AS is_returned\n            ,return_date\n            ,return_reason\n            ,IF(is_returned IS TRUE, SAFE_ADD(inbound_shipping_cost, product_cost), 0) AS returned_cogs\n            ,IF(is_returned IS TRUE, SAFE_SUBTRACT(gross_revenue, COALESCE(shipping_amount, 0)), 0) AS refund_amount\n            ,payment_fee\n        FROM int_orders\n        LEFT JOIN int_payments USING (order_id))\n\n\n    ,contribution_margin AS (\n      SELECT *\n            ,COALESCE(net_revenue_after_tax, 0)\n              - COALESCE(cogs, 0)\n                - COALESCE(refund_amount, 0)\n                  - COALESCE(payment_fee, 0)\n                    + COALESCE(returned_cogs, 0) AS cm\n        FROM joins)\n\n\n    ,customers AS (\n      SELECT customer_id\n            ,order_id\n            ,order_date AS customer_order_date\n            ,ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY order_date) AS customer_order_nb\n        FROM contribution_margin\n        GROUP BY ALL)\n\n\n    ,final AS (\n      SELECT * EXCEPT(customer_order_date)\n            ,IF(customer_order_nb > 1, 'Returning', 'New') AS customer_type\n        FROM contribution_margin\n        LEFT JOIN customers USING (customer_id, order_id))\n\n\n  SELECT *\n    FROM final", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}, {"name": "int_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_analytics_engine.int_orders", "model.dbt_analytics_engine.int_payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_analytics_engine.fct_payment_methods": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev", "name": "fct_payment_methods", "resource_type": "model", "package_name": "dbt_analytics_engine", "path": "marts/fct_payment_methods.sql", "original_file_path": "models/marts/fct_payment_methods.sql", "unique_id": "model.dbt_analytics_engine.fct_payment_methods", "fqn": ["dbt_analytics_engine", "marts", "fct_payment_methods"], "alias": "fct_payment_methods", "checksum": {"name": "sha256", "checksum": "4684d32cad3cff853f0763331c33101058d02658418d9c60605de25645e6d227"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"analytics_engineer": "@Moe Abbas"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#000000"}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "required_tests": {"unique.*|not_null": 2}, "required_docs": true, "cluster_by": "order_date", "partition_by": {"field": "country_id", "data_type": "int64", "range": {"start": 0, "end": 100, "interval": 1}}}, "tags": [], "description": "Fact table containing details of payment methods used in customer orders.", "columns": {"country_id": {"name": "country_id", "description": "Identifier for the billing country associated with the order", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "The name of the billing country associated with the order.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "order_id": {"name": "order_id", "description": "Unique identifier for the order, serving as a reference to the specific transaction.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "nb_payments": {"name": "nb_payments", "description": "The total number of payments made for the order, indicating the frequency of transactions associated with the order.", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "payment_methods": {"name": "payment_methods", "description": "Indicates whether a single or multiple distinct payment methods were used for the order.  The value is 'single' if only one payment method was used or 'multiple' if more than one distinct payment method was utilized.\n", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "The date on which the order was placed.", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "order_status": {"name": "order_status", "description": "Orders can be one of the following statuses:\n\n| status         | description                                                               |\n|----------------|---------------------------------------------------------------------------|\n| completed      | The order has been placed and all payments were successful                |\n| failed         | The order has been placed and at least one payment failed                 |", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "total_gross_revenue": {"name": "total_gross_revenue", "description": "The total gross revenue generated from the order, representing the sum of all payments before any deductions or fees.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "total_payment_fees": {"name": "total_payment_fees", "description": "The total amount of fees incurred for processing all payment methods associated with the order.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "amazon_pay_payment_fees": {"name": "amazon_pay_payment_fees", "description": "The total fees charged for processing payments through Amazon Pay.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "apple_pay_payment_fees": {"name": "apple_pay_payment_fees", "description": "The total fees charged for processing payments through Apple Pay.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "bitcoin_payment_fees": {"name": "bitcoin_payment_fees", "description": "The total fees charged for processing payments through Bitcoin.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "stripe_payment_fees": {"name": "stripe_payment_fees", "description": "The total fees charged for processing payments through Stripe.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "amazon_pay_amount": {"name": "amazon_pay_amount", "description": "The total amount paid using Amazon Pay for the order.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "apple_pay_amount": {"name": "apple_pay_amount", "description": "The total amount paid using Apple Pay for the order.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "bitcoin_amount": {"name": "bitcoin_amount", "description": "The total amount paid using Bitcoin for the order.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "stripe_amount": {"name": "stripe_amount", "description": "The total amount paid using Stripe for the order.", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}}, "meta": {"analytics_engineer": "@Moe Abbas"}, "group": null, "docs": {"show": true, "node_color": "#000000"}, "patch_path": "dbt_analytics_engine://models/marts/_marts_models.yml", "build_path": null, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "required_tests": {"unique.*|not_null": 2}, "required_docs": true, "materialized": "table", "docs": {"node_color": "#000000"}, "meta": {"analytics_engineer": "@Moe Abbas"}, "partition_by": {"field": "country_id", "data_type": "int64", "range": {"start": 0, "end": 100, "interval": 1}}, "cluster_by": "order_date"}, "created_at": 1726254837.132084, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`", "raw_code": "{{ config(\n    partition_by = {\n      \"field\": \"country_id\",\n      \"data_type\": \"int64\",\n      \"range\": { \"start\": 0, \"end\": 100, \"interval\": 1}},\n    cluster_by = 'order_date'\n)}}\n\n{% set payment_methods = ['amazon_pay', 'apple_pay', 'bitcoin', 'stripe'] %}\n\nWITH\n  int_payments AS (\n    SELECT *\n      FROM {{ ref('int_payments') }})\n\n\n  ,fct_payment_methods AS (\n    SELECT country_id\n           ,country\n           ,order_id\n           ,COUNT(order_payment_id) AS nb_payments\n           ,IF(COUNT(DISTINCT payment_method) > 1, 'multiple', 'single') AS payment_methods\n           ,MAX(created_at) AS order_date\n           ,CASE \n            WHEN SUM(IF(payment_status = 'successful', 1, 0)) <> COUNT(order_payment_id) THEN 'failed'\n            ELSE 'successful' END AS order_status\n           ,SUM(gross_revenue) AS total_gross_revenue\n           ,SUM(payment_fee) AS total_payment_fees\n           {% for payment_method in payment_methods -%}\n           ,SUM(CASE WHEN payment_method = '{{ payment_method }}' THEN payment_fee ELSE 0 END) AS {{ payment_method }}_payment_fees\n           {% endfor -%}\n           {% for payment_method in payment_methods -%}\n           ,SUM(CASE WHEN payment_method = '{{ payment_method }}' THEN gross_revenue ELSE 0 END) AS {{ payment_method }}_amount\n           {% endfor -%}\n      FROM int_payments\n      GROUP BY country_id\n              ,country\n              ,order_id)\n\n\n  SELECT *\n    FROM fct_payment_methods", "language": "sql", "refs": [{"name": "int_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_analytics_engine.int_payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.dbt_analytics_engine.not_null_dim_products_date.574048cf21": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_dim_products_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_dim_products_date.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_dim_products_date.574048cf21", "fqn": ["dbt_analytics_engine", "marts", "not_null_dim_products_date"], "alias": "not_null_dim_products_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_date.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.180589, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_dim_products_date`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_date.f4fc713dc9": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_dim_products_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_dim_products_date.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_date.f4fc713dc9", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_dim_products_date"], "alias": "dbt_utils_not_constant_dim_products_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_date.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.18205, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_dim_products_date`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_date.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct date) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\n  \n\nhaving count(distinct date) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.dim_products_unexpected_date.8ba6ea57ff": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dim_products_unexpected_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dim_products_unexpected_date.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dim_products_unexpected_date.8ba6ea57ff", "fqn": ["dbt_analytics_engine", "marts", "dim_products_unexpected_date"], "alias": "dim_products_unexpected_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unexpected_date.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.196119, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dim_products_unexpected_date`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unexpected_date.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not date <= current_datetime()\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "accepted_range", "kwargs": {"max_value": "current_datetime()", "column_name": "date", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_dim_products_country_id.ebbcb8b76e": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_dim_products_country_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_dim_products_country_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_dim_products_country_id.ebbcb8b76e", "fqn": ["dbt_analytics_engine", "marts", "not_null_dim_products_country_id"], "alias": "not_null_dim_products_country_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_country_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.201793, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_dim_products_country_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_country_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\nwhere country_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_id", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_id", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_country_id.ed74d915c2": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_dim_products_country_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_dim_products_country_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_country_id.ed74d915c2", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_dim_products_country_id"], "alias": "dbt_utils_not_constant_dim_products_country_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_country_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.203048, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_dim_products_country_id`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_country_id.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct country_id) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\n  \n\nhaving count(distinct country_id) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_id", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "country_id", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.dim_products_unexpected_country_id.87d133469b": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dim_products_unexpected_country_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dim_products_unexpected_country_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dim_products_unexpected_country_id.87d133469b", "fqn": ["dbt_analytics_engine", "marts", "dim_products_unexpected_country_id"], "alias": "dim_products_unexpected_country_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unexpected_country_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.206537, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dim_products_unexpected_country_id`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unexpected_country_id.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not country_id >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not country_id <= 10\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_id", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 10, "column_name": "country_id", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_dim_products_country.5bb34d1877": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_dim_products_country", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_dim_products_country.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_dim_products_country.5bb34d1877", "fqn": ["dbt_analytics_engine", "marts", "not_null_dim_products_country"], "alias": "not_null_dim_products_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_country.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.209419, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_dim_products_country`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_country.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\nwhere country is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_country.3c8ed213c7": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_dim_products_country", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_dim_products_country.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_country.3c8ed213c7", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_dim_products_country"], "alias": "dbt_utils_not_constant_dim_products_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_country.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.210607, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_dim_products_country`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_country.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct country) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\n  \n\nhaving count(distinct country) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "country", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_dim_products_product_category.069796c541": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_dim_products_product_category", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_dim_products_product_category.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_dim_products_product_category.069796c541", "fqn": ["dbt_analytics_engine", "marts", "not_null_dim_products_product_category"], "alias": "not_null_dim_products_product_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_product_category.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.213386, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_dim_products_product_category`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_product_category.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\nwhere product_category is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_category", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_category", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_product_category.4a89a363ad": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_dim_products_product_category", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_dim_products_product_category.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_product_category.4a89a363ad", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_dim_products_product_category"], "alias": "dbt_utils_not_constant_dim_products_product_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_product_category.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.2145731, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_dim_products_product_category`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_product_category.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct product_category) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\n  \n\nhaving count(distinct product_category) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_category", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "product_category", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.dim_products_unexpected_product_category.c192a37430": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dim_products_unexpected_product_category", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dim_products_unexpected_product_category.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dim_products_unexpected_product_category.c192a37430", "fqn": ["dbt_analytics_engine", "marts", "dim_products_unexpected_product_category"], "alias": "dim_products_unexpected_product_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unexpected_product_category.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.217251, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dim_products_unexpected_product_category`", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unexpected_product_category.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        product_category as value_field,\n        count(*) as n_records\n\n    from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n    group by product_category\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Design Templates','Fonts & Typography','Graphic Assets','Stock Photography','Video & Animation'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_category", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Design Templates", "Fonts & Typography", "Graphic Assets", "Stock Photography", "Video & Animation"], "column_name": "product_category", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_dim_products_product_name.991aec73f3": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_dim_products_product_name", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_dim_products_product_name.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_dim_products_product_name.991aec73f3", "fqn": ["dbt_analytics_engine", "marts", "not_null_dim_products_product_name"], "alias": "not_null_dim_products_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_product_name.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.223246, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_dim_products_product_name`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_product_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\nwhere product_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_name", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_product_name.76f63d55df": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_dim_products_product_name", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_dim_products_product_name.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_product_name.76f63d55df", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_dim_products_product_name"], "alias": "dbt_utils_not_constant_dim_products_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_product_name.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.224576, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_dim_products_product_name`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_product_name.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct product_name) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\n  \n\nhaving count(distinct product_name) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_name", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_dim_products_nb_order_id.3bd5159215": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_dim_products_nb_order_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_dim_products_nb_order_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_dim_products_nb_order_id.3bd5159215", "fqn": ["dbt_analytics_engine", "marts", "not_null_dim_products_nb_order_id"], "alias": "not_null_dim_products_nb_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_nb_order_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.227457, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_dim_products_nb_order_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_nb_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\nwhere nb_order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nb_order_id", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "nb_order_id", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_nb_order_id.72ef84204a": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_dim_products_nb_order_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_dim_products_nb_order_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_nb_order_id.72ef84204a", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_dim_products_nb_order_id"], "alias": "dbt_utils_not_constant_dim_products_nb_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_nb_order_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.2286851, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_dim_products_nb_order_id`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_nb_order_id.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct nb_order_id) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\n  \n\nhaving count(distinct nb_order_id) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nb_order_id", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "nb_order_id", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_dim_products_nb_shipping_id.6210429e27": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_dim_products_nb_shipping_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_dim_products_nb_shipping_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_dim_products_nb_shipping_id.6210429e27", "fqn": ["dbt_analytics_engine", "marts", "not_null_dim_products_nb_shipping_id"], "alias": "not_null_dim_products_nb_shipping_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_nb_shipping_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.231317, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_dim_products_nb_shipping_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_nb_shipping_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\nwhere nb_shipping_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nb_shipping_id", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "nb_shipping_id", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_nb_shipping_id.de0c73bde0": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_dim_products_nb_shipping_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_dim_products_nb_shipping_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_nb_shipping_id.de0c73bde0", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_dim_products_nb_shipping_id"], "alias": "dbt_utils_not_constant_dim_products_nb_shipping_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_nb_shipping_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.232554, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_dim_products_nb_shipping_id`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_nb_shipping_id.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct nb_shipping_id) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\n  \n\nhaving count(distinct nb_shipping_id) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nb_shipping_id", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "nb_shipping_id", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_dim_products_nb_return_id.496158f2a9": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_dim_products_nb_return_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_dim_products_nb_return_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_dim_products_nb_return_id.496158f2a9", "fqn": ["dbt_analytics_engine", "marts", "not_null_dim_products_nb_return_id"], "alias": "not_null_dim_products_nb_return_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_nb_return_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.23529, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_dim_products_nb_return_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_nb_return_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\nwhere nb_return_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nb_return_id", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "nb_return_id", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_nb_return_id.6fc6712643": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_dim_products_nb_return_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_dim_products_nb_return_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_nb_return_id.6fc6712643", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_dim_products_nb_return_id"], "alias": "dbt_utils_not_constant_dim_products_nb_return_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_nb_return_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.236534, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_dim_products_nb_return_id`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_nb_return_id.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct nb_return_id) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\n  \n\nhaving count(distinct nb_return_id) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nb_return_id", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "nb_return_id", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_avg_fulfillment_days.feb31904d2": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_dim_products_avg_fulfillment_days", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_dim_products_avg_fulfillment_days.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_avg_fulfillment_days.feb31904d2", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_dim_products_avg_fulfillment_days"], "alias": "dbt_utils_not_constant_dim_products_avg_fulfillment_days", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_avg_fulfillment_days.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.2391622, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_dim_products_avg_fulfillment_days`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_avg_fulfillment_days.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct avg_fulfillment_days) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\n  \n\nhaving count(distinct avg_fulfillment_days) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_fulfillment_days", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "avg_fulfillment_days", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.dim_products_assert_positive_avg_fulfillment_days.089c583b64": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dim_products_assert_positive_avg_fulfillment_days", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dim_products_assert_positive_avg_fulfillment_days.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dim_products_assert_positive_avg_fulfillment_days.089c583b64", "fqn": ["dbt_analytics_engine", "marts", "dim_products_assert_positive_avg_fulfillment_days"], "alias": "dim_products_assert_positive_avg_fulfillment_days", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_assert_positive_avg_fulfillment_days.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.24189, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dim_products_assert_positive_avg_fulfillment_days`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_assert_positive_avg_fulfillment_days.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\nwhere not(avg_fulfillment_days > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_fulfillment_days", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "avg_fulfillment_days", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_avg_nps_score.58fba2347f": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_dim_products_avg_nps_score", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_dim_products_avg_nps_score.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_avg_nps_score.58fba2347f", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_dim_products_avg_nps_score"], "alias": "dbt_utils_not_constant_dim_products_avg_nps_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_avg_nps_score.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.244714, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_dim_products_avg_nps_score`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_avg_nps_score.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct avg_nps_score) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\n  \n\nhaving count(distinct avg_nps_score) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_nps_score", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "avg_nps_score", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.dim_products_assert_positive_avg_nps_score.e3d03c7b27": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dim_products_assert_positive_avg_nps_score", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dim_products_assert_positive_avg_nps_score.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dim_products_assert_positive_avg_nps_score.e3d03c7b27", "fqn": ["dbt_analytics_engine", "marts", "dim_products_assert_positive_avg_nps_score"], "alias": "dim_products_assert_positive_avg_nps_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_assert_positive_avg_nps_score.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.2473469, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dim_products_assert_positive_avg_nps_score`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_assert_positive_avg_nps_score.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\nwhere not(avg_nps_score > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_nps_score", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "avg_nps_score", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_dim_products_total_gross_revenue.de39c2a3eb": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_dim_products_total_gross_revenue", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_dim_products_total_gross_revenue.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_dim_products_total_gross_revenue.de39c2a3eb", "fqn": ["dbt_analytics_engine", "marts", "not_null_dim_products_total_gross_revenue"], "alias": "not_null_dim_products_total_gross_revenue", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_total_gross_revenue.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.2500072, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_dim_products_total_gross_revenue`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_total_gross_revenue.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\nwhere total_gross_revenue is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_gross_revenue", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_gross_revenue", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_gross_revenue.372735f062": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_dim_products_total_gross_revenue", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_dim_products_total_gross_revenue.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_gross_revenue.372735f062", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_dim_products_total_gross_revenue"], "alias": "dbt_utils_not_constant_dim_products_total_gross_revenue", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_total_gross_revenue.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.2513459, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_dim_products_total_gross_revenue`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_total_gross_revenue.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct total_gross_revenue) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\n  \n\nhaving count(distinct total_gross_revenue) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_gross_revenue", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "total_gross_revenue", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.dim_products_assert_positive_total_gross_revenue.c2247b3969": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dim_products_assert_positive_total_gross_revenue", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dim_products_assert_positive_total_gross_revenue.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dim_products_assert_positive_total_gross_revenue.c2247b3969", "fqn": ["dbt_analytics_engine", "marts", "dim_products_assert_positive_total_gross_revenue"], "alias": "dim_products_assert_positive_total_gross_revenue", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_assert_positive_total_gross_revenue.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.253919, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dim_products_assert_positive_total_gross_revenue`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_assert_positive_total_gross_revenue.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\nwhere not(total_gross_revenue > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_gross_revenue", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "total_gross_revenue", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_dim_products_total_tax_amount.54c3118144": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_dim_products_total_tax_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_dim_products_total_tax_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_dim_products_total_tax_amount.54c3118144", "fqn": ["dbt_analytics_engine", "marts", "not_null_dim_products_total_tax_amount"], "alias": "not_null_dim_products_total_tax_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_total_tax_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.25692, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_dim_products_total_tax_amount`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_total_tax_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\nwhere total_tax_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_tax_amount", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_tax_amount", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_tax_amount.4428565fd6": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_dim_products_total_tax_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_dim_products_total_tax_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_tax_amount.4428565fd6", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_dim_products_total_tax_amount"], "alias": "dbt_utils_not_constant_dim_products_total_tax_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_total_tax_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.258305, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_dim_products_total_tax_amount`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_total_tax_amount.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct total_tax_amount) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\n  \n\nhaving count(distinct total_tax_amount) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_tax_amount", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "total_tax_amount", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.dim_products_assert_positive_total_tax_amount.c699116ec6": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dim_products_assert_positive_total_tax_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dim_products_assert_positive_total_tax_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dim_products_assert_positive_total_tax_amount.c699116ec6", "fqn": ["dbt_analytics_engine", "marts", "dim_products_assert_positive_total_tax_amount"], "alias": "dim_products_assert_positive_total_tax_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_assert_positive_total_tax_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.261007, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dim_products_assert_positive_total_tax_amount`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_assert_positive_total_tax_amount.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\nwhere not(total_tax_amount > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_tax_amount", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "total_tax_amount", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_dim_products_total_net_revenue_before_tax.47c7127675": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_dim_products_total_net_revenue_before_tax", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_dim_products_total_net_revenue_before_tax.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_dim_products_total_net_revenue_before_tax.47c7127675", "fqn": ["dbt_analytics_engine", "marts", "not_null_dim_products_total_net_revenue_before_tax"], "alias": "not_null_dim_products_total_net_revenue_before_tax", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_total_net_revenue_before_tax.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.26349, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_dim_products_total_net_revenue_before_tax`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_total_net_revenue_before_tax.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\nwhere total_net_revenue_before_tax is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_net_revenue_before_tax", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_net_revenue_before_tax", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_net_revenue_before_tax.d40cce386b": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_dim_products_total_net_revenue_before_tax", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_dim_pro_41f89cc05d67c2834c5b1e3abe254e09.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_net_revenue_before_tax.d40cce386b", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_dim_products_total_net_revenue_before_tax"], "alias": "dbt_utils_not_constant_dim_pro_41f89cc05d67c2834c5b1e3abe254e09", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_constant_dim_pro_41f89cc05d67c2834c5b1e3abe254e09", "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_pro_41f89cc05d67c2834c5b1e3abe254e09.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "alias": "dbt_utils_not_constant_dim_pro_41f89cc05d67c2834c5b1e3abe254e09"}, "created_at": 1726254837.264811, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_dim_pro_41f89cc05d67c2834c5b1e3abe254e09`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_constant_dim_pro_41f89cc05d67c2834c5b1e3abe254e09\") }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_pro_41f89cc05d67c2834c5b1e3abe254e09.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct total_net_revenue_before_tax) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\n  \n\nhaving count(distinct total_net_revenue_before_tax) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_net_revenue_before_tax", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "total_net_revenue_before_tax", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.dim_products_assert_positive_total_net_revenue_before_tax.c43767ddeb": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dim_products_assert_positive_total_net_revenue_before_tax", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dim_products_assert_positive_total_net_revenue_before_tax.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dim_products_assert_positive_total_net_revenue_before_tax.c43767ddeb", "fqn": ["dbt_analytics_engine", "marts", "dim_products_assert_positive_total_net_revenue_before_tax"], "alias": "dim_products_assert_positive_total_net_revenue_before_tax", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_assert_positive_total_net_revenue_before_tax.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.267654, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dim_products_assert_positive_total_net_revenue_before_tax`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_assert_positive_total_net_revenue_before_tax.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\nwhere not(total_net_revenue_before_tax > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_net_revenue_before_tax", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "total_net_revenue_before_tax", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_dim_products_total_net_revenue_after_tax.f2faaacfd9": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_dim_products_total_net_revenue_after_tax", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_dim_products_total_net_revenue_after_tax.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_dim_products_total_net_revenue_after_tax.f2faaacfd9", "fqn": ["dbt_analytics_engine", "marts", "not_null_dim_products_total_net_revenue_after_tax"], "alias": "not_null_dim_products_total_net_revenue_after_tax", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_total_net_revenue_after_tax.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.270189, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_dim_products_total_net_revenue_after_tax`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_total_net_revenue_after_tax.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\nwhere total_net_revenue_after_tax is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_net_revenue_after_tax", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_net_revenue_after_tax", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_net_revenue_after_tax.efb6a5d29f": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_dim_products_total_net_revenue_after_tax", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_dim_products_total_net_revenue_after_tax.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_net_revenue_after_tax.efb6a5d29f", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_dim_products_total_net_revenue_after_tax"], "alias": "dbt_utils_not_constant_dim_products_total_net_revenue_after_tax", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_total_net_revenue_after_tax.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.271395, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_dim_products_total_net_revenue_after_tax`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_total_net_revenue_after_tax.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct total_net_revenue_after_tax) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\n  \n\nhaving count(distinct total_net_revenue_after_tax) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_net_revenue_after_tax", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "total_net_revenue_after_tax", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.dim_products_assert_positive_total_net_revenue_after_tax.ba2c6febe9": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dim_products_assert_positive_total_net_revenue_after_tax", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dim_products_assert_positive_total_net_revenue_after_tax.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dim_products_assert_positive_total_net_revenue_after_tax.ba2c6febe9", "fqn": ["dbt_analytics_engine", "marts", "dim_products_assert_positive_total_net_revenue_after_tax"], "alias": "dim_products_assert_positive_total_net_revenue_after_tax", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_assert_positive_total_net_revenue_after_tax.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.274004, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dim_products_assert_positive_total_net_revenue_after_tax`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_assert_positive_total_net_revenue_after_tax.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\nwhere not(total_net_revenue_after_tax > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_net_revenue_after_tax", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "total_net_revenue_after_tax", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_dim_products_total_cogs.4764d28c01": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_dim_products_total_cogs", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_dim_products_total_cogs.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_dim_products_total_cogs.4764d28c01", "fqn": ["dbt_analytics_engine", "marts", "not_null_dim_products_total_cogs"], "alias": "not_null_dim_products_total_cogs", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_total_cogs.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.2766469, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_dim_products_total_cogs`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_total_cogs.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\nwhere total_cogs is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_cogs", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_cogs", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_cogs.ec17a924f7": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_dim_products_total_cogs", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_dim_products_total_cogs.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_cogs.ec17a924f7", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_dim_products_total_cogs"], "alias": "dbt_utils_not_constant_dim_products_total_cogs", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_total_cogs.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.27788, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_dim_products_total_cogs`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_total_cogs.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct total_cogs) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\n  \n\nhaving count(distinct total_cogs) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_cogs", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "total_cogs", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.dim_products_assert_positive_total_cogs.4fcaffbba3": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dim_products_assert_positive_total_cogs", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dim_products_assert_positive_total_cogs.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dim_products_assert_positive_total_cogs.4fcaffbba3", "fqn": ["dbt_analytics_engine", "marts", "dim_products_assert_positive_total_cogs"], "alias": "dim_products_assert_positive_total_cogs", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_assert_positive_total_cogs.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.28064, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dim_products_assert_positive_total_cogs`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_assert_positive_total_cogs.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\nwhere not(total_cogs > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_cogs", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "total_cogs", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_dim_products_total_returned_cogs.a5ad2fc4e6": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_dim_products_total_returned_cogs", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_dim_products_total_returned_cogs.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_dim_products_total_returned_cogs.a5ad2fc4e6", "fqn": ["dbt_analytics_engine", "marts", "not_null_dim_products_total_returned_cogs"], "alias": "not_null_dim_products_total_returned_cogs", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_total_returned_cogs.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.2834282, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_dim_products_total_returned_cogs`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_total_returned_cogs.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\nwhere total_returned_cogs is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_returned_cogs", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_returned_cogs", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_returned_cogs.f6c63eb1d6": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_dim_products_total_returned_cogs", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_dim_products_total_returned_cogs.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_returned_cogs.f6c63eb1d6", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_dim_products_total_returned_cogs"], "alias": "dbt_utils_not_constant_dim_products_total_returned_cogs", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_total_returned_cogs.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.284616, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_dim_products_total_returned_cogs`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_total_returned_cogs.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct total_returned_cogs) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\n  \n\nhaving count(distinct total_returned_cogs) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_returned_cogs", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "total_returned_cogs", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_dim_products_total_refund_amount.8811aa6bc7": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_dim_products_total_refund_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_dim_products_total_refund_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_dim_products_total_refund_amount.8811aa6bc7", "fqn": ["dbt_analytics_engine", "marts", "not_null_dim_products_total_refund_amount"], "alias": "not_null_dim_products_total_refund_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_total_refund_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.287297, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_dim_products_total_refund_amount`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_total_refund_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\nwhere total_refund_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_refund_amount", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_refund_amount", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_refund_amount.438fc2fc1b": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_dim_products_total_refund_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_dim_products_total_refund_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_refund_amount.438fc2fc1b", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_dim_products_total_refund_amount"], "alias": "dbt_utils_not_constant_dim_products_total_refund_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_total_refund_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.288759, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_dim_products_total_refund_amount`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_total_refund_amount.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct total_refund_amount) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\n  \n\nhaving count(distinct total_refund_amount) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_refund_amount", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "total_refund_amount", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_dim_products_total_payment_fee.31a176c2f7": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_dim_products_total_payment_fee", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_dim_products_total_payment_fee.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_dim_products_total_payment_fee.31a176c2f7", "fqn": ["dbt_analytics_engine", "marts", "not_null_dim_products_total_payment_fee"], "alias": "not_null_dim_products_total_payment_fee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_total_payment_fee.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.291719, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_dim_products_total_payment_fee`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_total_payment_fee.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\nwhere total_payment_fee is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_payment_fee", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_payment_fee", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_payment_fee.b6c559fc4a": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_dim_products_total_payment_fee", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_dim_products_total_payment_fee.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_payment_fee.b6c559fc4a", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_dim_products_total_payment_fee"], "alias": "dbt_utils_not_constant_dim_products_total_payment_fee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_total_payment_fee.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.292928, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_dim_products_total_payment_fee`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_total_payment_fee.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct total_payment_fee) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\n  \n\nhaving count(distinct total_payment_fee) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_payment_fee", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "total_payment_fee", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.dim_products_assert_positive_total_payment_fee.b1975067f6": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dim_products_assert_positive_total_payment_fee", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dim_products_assert_positive_total_payment_fee.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dim_products_assert_positive_total_payment_fee.b1975067f6", "fqn": ["dbt_analytics_engine", "marts", "dim_products_assert_positive_total_payment_fee"], "alias": "dim_products_assert_positive_total_payment_fee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_assert_positive_total_payment_fee.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.295548, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dim_products_assert_positive_total_payment_fee`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_assert_positive_total_payment_fee.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\nwhere not(total_payment_fee > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_payment_fee", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "total_payment_fee", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_dim_products_total_cm.1e2bfa8ee1": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_dim_products_total_cm", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_dim_products_total_cm.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_dim_products_total_cm.1e2bfa8ee1", "fqn": ["dbt_analytics_engine", "marts", "not_null_dim_products_total_cm"], "alias": "not_null_dim_products_total_cm", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_total_cm.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.298343, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_dim_products_total_cm`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_dim_products_total_cm.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\nwhere total_cm is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_cm", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_cm", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_cm.30608c74a2": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_dim_products_total_cm", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_dim_products_total_cm.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_cm.30608c74a2", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_dim_products_total_cm"], "alias": "dbt_utils_not_constant_dim_products_total_cm", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_total_cm.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.299786, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_dim_products_total_cm`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_dim_products_total_cm.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct total_cm) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n\n  \n\nhaving count(distinct total_cm) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_cm", "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "total_cm", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.dim_products_unequal_agg_total_gross_revenue.c37f597c7f": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dim_products_unequal_agg_total_gross_revenue", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dim_products_unequal_agg_total_gross_revenue.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dim_products_unequal_agg_total_gross_revenue.c37f597c7f", "fqn": ["dbt_analytics_engine", "marts", "dim_products_unequal_agg_total_gross_revenue"], "alias": "dim_products_unequal_agg_total_gross_revenue", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unequal_agg_total_gross_revenue.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.302588, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dim_products_unequal_agg_total_gross_revenue`", "raw_code": "{{ dbt_expectations.test_expect_table_aggregation_to_equal_other_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders", "model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unequal_agg_total_gross_revenue.sql", "compiled": true, "compiled_code": "\n    with a as (\n        \n    select\n        \n        sum(total_gross_revenue) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n    \n\n    ),\n    b as (\n        \n    select\n        \n        sum(gross_revenue) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "expect_table_aggregation_to_equal_other_table", "kwargs": {"expression": "sum(total_gross_revenue)", "compare_model": "ref(\"fct_orders\")", "compare_expression": "sum(gross_revenue)", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.dim_products_unequal_agg_total_tax_amount.639980c235": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dim_products_unequal_agg_total_tax_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dim_products_unequal_agg_total_tax_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dim_products_unequal_agg_total_tax_amount.639980c235", "fqn": ["dbt_analytics_engine", "marts", "dim_products_unequal_agg_total_tax_amount"], "alias": "dim_products_unequal_agg_total_tax_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unequal_agg_total_tax_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.316848, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dim_products_unequal_agg_total_tax_amount`", "raw_code": "{{ dbt_expectations.test_expect_table_aggregation_to_equal_other_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders", "model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unequal_agg_total_tax_amount.sql", "compiled": true, "compiled_code": "\n    with a as (\n        \n    select\n        \n        sum(total_tax_amount) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n    \n\n    ),\n    b as (\n        \n    select\n        \n        sum(tax_amount) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "expect_table_aggregation_to_equal_other_table", "kwargs": {"expression": "sum(total_tax_amount)", "compare_model": "ref(\"fct_orders\")", "compare_expression": "sum(tax_amount)", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.dim_products_unequal_agg_total_net_revenue_before_tax.cf29af6db1": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dim_products_unequal_agg_total_net_revenue_before_tax", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dim_products_unequal_agg_total_net_revenue_before_tax.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dim_products_unequal_agg_total_net_revenue_before_tax.cf29af6db1", "fqn": ["dbt_analytics_engine", "marts", "dim_products_unequal_agg_total_net_revenue_before_tax"], "alias": "dim_products_unequal_agg_total_net_revenue_before_tax", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unequal_agg_total_net_revenue_before_tax.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.320825, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dim_products_unequal_agg_total_net_revenue_before_tax`", "raw_code": "{{ dbt_expectations.test_expect_table_aggregation_to_equal_other_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders", "model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unequal_agg_total_net_revenue_before_tax.sql", "compiled": true, "compiled_code": "\n    with a as (\n        \n    select\n        \n        sum(total_net_revenue_before_tax) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n    \n\n    ),\n    b as (\n        \n    select\n        \n        sum(net_revenue_before_tax) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "expect_table_aggregation_to_equal_other_table", "kwargs": {"expression": "sum(total_net_revenue_before_tax)", "compare_model": "ref(\"fct_orders\")", "compare_expression": "sum(net_revenue_before_tax)", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.dim_products_unequal_agg_total_net_revenue_after_tax.f97dfdf7da": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dim_products_unequal_agg_total_net_revenue_after_tax", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dim_products_unequal_agg_total_net_revenue_after_tax.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dim_products_unequal_agg_total_net_revenue_after_tax.f97dfdf7da", "fqn": ["dbt_analytics_engine", "marts", "dim_products_unequal_agg_total_net_revenue_after_tax"], "alias": "dim_products_unequal_agg_total_net_revenue_after_tax", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unequal_agg_total_net_revenue_after_tax.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.32471, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dim_products_unequal_agg_total_net_revenue_after_tax`", "raw_code": "{{ dbt_expectations.test_expect_table_aggregation_to_equal_other_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders", "model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unequal_agg_total_net_revenue_after_tax.sql", "compiled": true, "compiled_code": "\n    with a as (\n        \n    select\n        \n        sum(total_net_revenue_after_tax) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n    \n\n    ),\n    b as (\n        \n    select\n        \n        sum(net_revenue_after_tax) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "expect_table_aggregation_to_equal_other_table", "kwargs": {"expression": "sum(total_net_revenue_after_tax)", "compare_model": "ref(\"fct_orders\")", "compare_expression": "sum(net_revenue_after_tax)", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.dim_products_unequal_agg_total_cogs.1d3a202822": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dim_products_unequal_agg_total_cogs", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dim_products_unequal_agg_total_cogs.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dim_products_unequal_agg_total_cogs.1d3a202822", "fqn": ["dbt_analytics_engine", "marts", "dim_products_unequal_agg_total_cogs"], "alias": "dim_products_unequal_agg_total_cogs", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unequal_agg_total_cogs.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.328533, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dim_products_unequal_agg_total_cogs`", "raw_code": "{{ dbt_expectations.test_expect_table_aggregation_to_equal_other_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders", "model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unequal_agg_total_cogs.sql", "compiled": true, "compiled_code": "\n    with a as (\n        \n    select\n        \n        sum(total_cogs) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n    \n\n    ),\n    b as (\n        \n    select\n        \n        sum(cogs) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "expect_table_aggregation_to_equal_other_table", "kwargs": {"expression": "sum(total_cogs)", "compare_model": "ref(\"fct_orders\")", "compare_expression": "sum(cogs)", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.dim_products_unequal_agg_total_returned_cogs.7fe2b08a8f": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dim_products_unequal_agg_total_returned_cogs", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dim_products_unequal_agg_total_returned_cogs.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dim_products_unequal_agg_total_returned_cogs.7fe2b08a8f", "fqn": ["dbt_analytics_engine", "marts", "dim_products_unequal_agg_total_returned_cogs"], "alias": "dim_products_unequal_agg_total_returned_cogs", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unequal_agg_total_returned_cogs.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.332512, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dim_products_unequal_agg_total_returned_cogs`", "raw_code": "{{ dbt_expectations.test_expect_table_aggregation_to_equal_other_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders", "model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unequal_agg_total_returned_cogs.sql", "compiled": true, "compiled_code": "\n    with a as (\n        \n    select\n        \n        sum(total_returned_cogs) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n    \n\n    ),\n    b as (\n        \n    select\n        \n        sum(returned_cogs) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "expect_table_aggregation_to_equal_other_table", "kwargs": {"expression": "sum(total_returned_cogs)", "compare_model": "ref(\"fct_orders\")", "compare_expression": "sum(returned_cogs)", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.dim_products_unequal_agg_total_refund_amount.9e245aca75": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dim_products_unequal_agg_total_refund_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dim_products_unequal_agg_total_refund_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dim_products_unequal_agg_total_refund_amount.9e245aca75", "fqn": ["dbt_analytics_engine", "marts", "dim_products_unequal_agg_total_refund_amount"], "alias": "dim_products_unequal_agg_total_refund_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unequal_agg_total_refund_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.336549, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dim_products_unequal_agg_total_refund_amount`", "raw_code": "{{ dbt_expectations.test_expect_table_aggregation_to_equal_other_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders", "model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unequal_agg_total_refund_amount.sql", "compiled": true, "compiled_code": "\n    with a as (\n        \n    select\n        \n        sum(total_refund_amount) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n    \n\n    ),\n    b as (\n        \n    select\n        \n        sum(refund_amount) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "expect_table_aggregation_to_equal_other_table", "kwargs": {"expression": "sum(total_refund_amount)", "compare_model": "ref(\"fct_orders\")", "compare_expression": "sum(refund_amount)", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.dim_products_unequal_agg_total_payment_fee.83ef9782e7": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dim_products_unequal_agg_total_payment_fee", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dim_products_unequal_agg_total_payment_fee.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dim_products_unequal_agg_total_payment_fee.83ef9782e7", "fqn": ["dbt_analytics_engine", "marts", "dim_products_unequal_agg_total_payment_fee"], "alias": "dim_products_unequal_agg_total_payment_fee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unequal_agg_total_payment_fee.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.340395, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dim_products_unequal_agg_total_payment_fee`", "raw_code": "{{ dbt_expectations.test_expect_table_aggregation_to_equal_other_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders", "model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unequal_agg_total_payment_fee.sql", "compiled": true, "compiled_code": "\n    with a as (\n        \n    select\n        \n        sum(total_payment_fee) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n    \n\n    ),\n    b as (\n        \n    select\n        \n        sum(payment_fee) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "expect_table_aggregation_to_equal_other_table", "kwargs": {"expression": "sum(total_payment_fee)", "compare_model": "ref(\"fct_orders\")", "compare_expression": "sum(payment_fee)", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.dim_products_unequal_agg_total_cm.5e6ccd2b8c": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dim_products_unequal_agg_total_cm", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dim_products_unequal_agg_total_cm.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dim_products_unequal_agg_total_cm.5e6ccd2b8c", "fqn": ["dbt_analytics_engine", "marts", "dim_products_unequal_agg_total_cm"], "alias": "dim_products_unequal_agg_total_cm", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unequal_agg_total_cm.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.344458, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dim_products_unequal_agg_total_cm`", "raw_code": "{{ dbt_expectations.test_expect_table_aggregation_to_equal_other_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders", "model.dbt_analytics_engine.dim_products"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dim_products_unequal_agg_total_cm.sql", "compiled": true, "compiled_code": "\n    with a as (\n        \n    select\n        \n        sum(total_cm) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`dim_products`\n    \n\n    ),\n    b as (\n        \n    select\n        \n        sum(cm) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_products", "attached_node": "model.dbt_analytics_engine.dim_products", "test_metadata": {"name": "expect_table_aggregation_to_equal_other_table", "kwargs": {"expression": "sum(total_cm)", "compare_model": "ref(\"fct_orders\")", "compare_expression": "sum(cm)", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_date.37657c660a": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_timeseries_sma_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_timeseries_sma_date.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_date.37657c660a", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_timeseries_sma_date"], "alias": "not_null_fct_orders_timeseries_sma_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_date.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.348244, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_timeseries_sma_date`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_date.ead3fe64c2": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_timeseries_sma_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_timeseries_sma_date.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_date.ead3fe64c2", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_timeseries_sma_date"], "alias": "dbt_utils_not_constant_fct_orders_timeseries_sma_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_timeseries_sma_date.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.349712, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_timeseries_sma_date`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_timeseries_sma_date.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct date) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\n  \n\nhaving count(distinct date) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_timeseries_sma_unexpected_date.2d619508ac": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_timeseries_sma_unexpected_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_timeseries_sma_unexpected_date.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_timeseries_sma_unexpected_date.2d619508ac", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_timeseries_sma_unexpected_date"], "alias": "fct_orders_timeseries_sma_unexpected_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_timeseries_sma_unexpected_date.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.352546, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_timeseries_sma_unexpected_date`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_timeseries_sma_unexpected_date.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not date <= current_datetime()\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "accepted_range", "kwargs": {"max_value": "current_datetime()", "column_name": "date", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales.7a3076ff3b": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_timeseries_sma_sales", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_timeseries_sma_sales.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales.7a3076ff3b", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_timeseries_sma_sales"], "alias": "not_null_fct_orders_timeseries_sma_sales", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.3556428, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_timeseries_sma_sales`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\nwhere sales is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales.58b8af4604": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales.58b8af4604", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_timeseries_sma_sales"], "alias": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_timeseries_sma_sales.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.3568718, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_timeseries_sma_sales`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_timeseries_sma_sales.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct sales) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\n  \n\nhaving count(distinct sales) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "sales", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales.198d3bbf9d": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_timeseries_sma_assert_positive_sales", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_timeseries_sma_assert_positive_sales.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales.198d3bbf9d", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_timeseries_sma_assert_positive_sales"], "alias": "fct_orders_timeseries_sma_assert_positive_sales", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_timeseries_sma_assert_positive_sales.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.3600771, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_timeseries_sma_assert_positive_sales`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_timeseries_sma_assert_positive_sales.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\nwhere not(sales > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "sales", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_14.374235e955": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_timeseries_sma_sales_sma_14", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_timeseries_sma_sales_sma_14.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_14.374235e955", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_timeseries_sma_sales_sma_14"], "alias": "not_null_fct_orders_timeseries_sma_sales_sma_14", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_14.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.362716, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_timeseries_sma_sales_sma_14`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_14.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\nwhere sales_sma_14 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_14", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_sma_14", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_14.709a4347be": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_14", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_14.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_14.709a4347be", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_14"], "alias": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_14", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_14.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.363915, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_14`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_14.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct sales_sma_14) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\n  \n\nhaving count(distinct sales_sma_14) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_14", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "sales_sma_14", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_14.3ae2dd3033": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_timeseries_sma_assert_positive_sales_sma_14", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_timeseries_sma_assert_positive_sales_sma_14.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_14.3ae2dd3033", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_timeseries_sma_assert_positive_sales_sma_14"], "alias": "fct_orders_timeseries_sma_assert_positive_sales_sma_14", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_timeseries_sma_assert_positive_sales_sma_14.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.367266, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_timeseries_sma_assert_positive_sales_sma_14`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_timeseries_sma_assert_positive_sales_sma_14.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\nwhere not(sales_sma_14 > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_14", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "sales_sma_14", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_30.adbc238496": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_timeseries_sma_sales_sma_30", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_timeseries_sma_sales_sma_30.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_30.adbc238496", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_timeseries_sma_sales_sma_30"], "alias": "not_null_fct_orders_timeseries_sma_sales_sma_30", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_30.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.369995, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_timeseries_sma_sales_sma_30`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_30.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\nwhere sales_sma_30 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_30", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_sma_30", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_30.849fb34bf2": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_30", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_30.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_30.849fb34bf2", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_30"], "alias": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_30", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_30.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.371244, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_30`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_30.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct sales_sma_30) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\n  \n\nhaving count(distinct sales_sma_30) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_30", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "sales_sma_30", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_30.392bd7ab05": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_timeseries_sma_assert_positive_sales_sma_30", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_timeseries_sma_assert_positive_sales_sma_30.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_30.392bd7ab05", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_timeseries_sma_assert_positive_sales_sma_30"], "alias": "fct_orders_timeseries_sma_assert_positive_sales_sma_30", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_timeseries_sma_assert_positive_sales_sma_30.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.373961, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_timeseries_sma_assert_positive_sales_sma_30`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_timeseries_sma_assert_positive_sales_sma_30.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\nwhere not(sales_sma_30 > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_30", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "sales_sma_30", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_60.4b8826df23": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_timeseries_sma_sales_sma_60", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_timeseries_sma_sales_sma_60.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_60.4b8826df23", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_timeseries_sma_sales_sma_60"], "alias": "not_null_fct_orders_timeseries_sma_sales_sma_60", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_60.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.3766541, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_timeseries_sma_sales_sma_60`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_60.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\nwhere sales_sma_60 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_60", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_sma_60", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_60.6fc3dc75b8": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_60", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_60.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_60.6fc3dc75b8", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_60"], "alias": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_60", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_60.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.3781419, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_60`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_60.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct sales_sma_60) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\n  \n\nhaving count(distinct sales_sma_60) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_60", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "sales_sma_60", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_60.b5373e8eb0": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_timeseries_sma_assert_positive_sales_sma_60", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_timeseries_sma_assert_positive_sales_sma_60.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_60.b5373e8eb0", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_timeseries_sma_assert_positive_sales_sma_60"], "alias": "fct_orders_timeseries_sma_assert_positive_sales_sma_60", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_timeseries_sma_assert_positive_sales_sma_60.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.380772, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_timeseries_sma_assert_positive_sales_sma_60`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_timeseries_sma_assert_positive_sales_sma_60.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\nwhere not(sales_sma_60 > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_60", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "sales_sma_60", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_120.db9f6c7bd9": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_timeseries_sma_sales_sma_120", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_timeseries_sma_sales_sma_120.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_120.db9f6c7bd9", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_timeseries_sma_sales_sma_120"], "alias": "not_null_fct_orders_timeseries_sma_sales_sma_120", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_120.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.384189, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_timeseries_sma_sales_sma_120`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_120.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\nwhere sales_sma_120 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_120", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_sma_120", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_120.afc9bae971": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_120", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_120.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_120.afc9bae971", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_120"], "alias": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_120", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_120.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.3858292, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_120`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_120.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct sales_sma_120) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\n  \n\nhaving count(distinct sales_sma_120) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_120", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "sales_sma_120", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_120.2c2a4416a5": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_timeseries_sma_assert_positive_sales_sma_120", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_timeseries_sma_assert_positive_sales_sma_120.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_120.2c2a4416a5", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_timeseries_sma_assert_positive_sales_sma_120"], "alias": "fct_orders_timeseries_sma_assert_positive_sales_sma_120", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_timeseries_sma_assert_positive_sales_sma_120.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.388653, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_timeseries_sma_assert_positive_sales_sma_120`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_timeseries_sma_assert_positive_sales_sma_120.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\nwhere not(sales_sma_120 > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_120", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "sales_sma_120", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_250.331ff4411b": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_timeseries_sma_sales_sma_250", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_timeseries_sma_sales_sma_250.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_250.331ff4411b", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_timeseries_sma_sales_sma_250"], "alias": "not_null_fct_orders_timeseries_sma_sales_sma_250", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_250.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.391444, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_timeseries_sma_sales_sma_250`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_250.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\nwhere sales_sma_250 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_250", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_sma_250", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_250.49bd8abee2": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_250", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_250.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_250.49bd8abee2", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_250"], "alias": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_250", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_250.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.392802, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_250`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_250.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct sales_sma_250) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\n  \n\nhaving count(distinct sales_sma_250) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_250", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "sales_sma_250", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_250.b40dc14c84": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_timeseries_sma_assert_positive_sales_sma_250", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_timeseries_sma_assert_positive_sales_sma_250.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_250.b40dc14c84", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_timeseries_sma_assert_positive_sales_sma_250"], "alias": "fct_orders_timeseries_sma_assert_positive_sales_sma_250", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_timeseries_sma_assert_positive_sales_sma_250.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.3958342, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_timeseries_sma_assert_positive_sales_sma_250`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_timeseries_sma_assert_positive_sales_sma_250.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\nwhere not(sales_sma_250 > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_250", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "sales_sma_250", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_14.83ff08e036": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_timeseries_sma_sales_stddev_14", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_timeseries_sma_sales_stddev_14.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_14.83ff08e036", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_timeseries_sma_sales_stddev_14"], "alias": "not_null_fct_orders_timeseries_sma_sales_stddev_14", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">3"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_stddev_14.sql", "unrendered_config": {"severity": "WARN", "error_if": ">3", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.398732, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_timeseries_sma_sales_stddev_14`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">1\",error_if=\">3\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_stddev_14.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\nwhere sales_stddev_14 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_stddev_14", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_stddev_14", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_14.172d14f4a0": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_14", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_ord_a8dc15a64d51b838ba301d33ff5fbbc1.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_14.172d14f4a0", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_14"], "alias": "dbt_utils_not_constant_fct_ord_a8dc15a64d51b838ba301d33ff5fbbc1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_constant_fct_ord_a8dc15a64d51b838ba301d33ff5fbbc1", "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_a8dc15a64d51b838ba301d33ff5fbbc1.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "alias": "dbt_utils_not_constant_fct_ord_a8dc15a64d51b838ba301d33ff5fbbc1"}, "created_at": 1726254837.400359, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_ord_a8dc15a64d51b838ba301d33ff5fbbc1`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_constant_fct_ord_a8dc15a64d51b838ba301d33ff5fbbc1\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_a8dc15a64d51b838ba301d33ff5fbbc1.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct sales_stddev_14) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\n  \n\nhaving count(distinct sales_stddev_14) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_stddev_14", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "sales_stddev_14", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_30.023a9ab431": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_timeseries_sma_sales_stddev_30", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_timeseries_sma_sales_stddev_30.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_30.023a9ab431", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_timeseries_sma_sales_stddev_30"], "alias": "not_null_fct_orders_timeseries_sma_sales_stddev_30", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">3"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_stddev_30.sql", "unrendered_config": {"severity": "WARN", "error_if": ">3", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.403399, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_timeseries_sma_sales_stddev_30`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">1\",error_if=\">3\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_stddev_30.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\nwhere sales_stddev_30 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_stddev_30", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_stddev_30", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_30.c31a4454bb": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_30", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_ord_34e22dc4eb1161f86b0fc657aba5613c.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_30.c31a4454bb", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_30"], "alias": "dbt_utils_not_constant_fct_ord_34e22dc4eb1161f86b0fc657aba5613c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_constant_fct_ord_34e22dc4eb1161f86b0fc657aba5613c", "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_34e22dc4eb1161f86b0fc657aba5613c.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "alias": "dbt_utils_not_constant_fct_ord_34e22dc4eb1161f86b0fc657aba5613c"}, "created_at": 1726254837.404589, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_ord_34e22dc4eb1161f86b0fc657aba5613c`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_constant_fct_ord_34e22dc4eb1161f86b0fc657aba5613c\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_34e22dc4eb1161f86b0fc657aba5613c.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct sales_stddev_30) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\n  \n\nhaving count(distinct sales_stddev_30) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_stddev_30", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "sales_stddev_30", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_60.816ab699e5": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_timeseries_sma_sales_stddev_60", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_timeseries_sma_sales_stddev_60.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_60.816ab699e5", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_timeseries_sma_sales_stddev_60"], "alias": "not_null_fct_orders_timeseries_sma_sales_stddev_60", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">3"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_stddev_60.sql", "unrendered_config": {"severity": "WARN", "error_if": ">3", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.4074829, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_timeseries_sma_sales_stddev_60`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">1\",error_if=\">3\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_stddev_60.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\nwhere sales_stddev_60 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_stddev_60", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_stddev_60", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_60.28285eb4a6": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_60", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_ord_363bdfc2c2ae70de6979889d0a4eee60.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_60.28285eb4a6", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_60"], "alias": "dbt_utils_not_constant_fct_ord_363bdfc2c2ae70de6979889d0a4eee60", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_constant_fct_ord_363bdfc2c2ae70de6979889d0a4eee60", "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_363bdfc2c2ae70de6979889d0a4eee60.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "alias": "dbt_utils_not_constant_fct_ord_363bdfc2c2ae70de6979889d0a4eee60"}, "created_at": 1726254837.409018, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_ord_363bdfc2c2ae70de6979889d0a4eee60`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_constant_fct_ord_363bdfc2c2ae70de6979889d0a4eee60\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_363bdfc2c2ae70de6979889d0a4eee60.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct sales_stddev_60) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\n  \n\nhaving count(distinct sales_stddev_60) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_stddev_60", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "sales_stddev_60", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_120.a9c9b9f6e3": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_timeseries_sma_sales_stddev_120", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_timeseries_sma_sales_stddev_120.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_120.a9c9b9f6e3", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_timeseries_sma_sales_stddev_120"], "alias": "not_null_fct_orders_timeseries_sma_sales_stddev_120", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">3"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_stddev_120.sql", "unrendered_config": {"severity": "WARN", "error_if": ">3", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.4120908, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_timeseries_sma_sales_stddev_120`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">1\",error_if=\">3\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_stddev_120.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\nwhere sales_stddev_120 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_stddev_120", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_stddev_120", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_120.4f2cb282c0": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_120", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_ord_84c988f10df9b19958dab313eba7cefd.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_120.4f2cb282c0", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_120"], "alias": "dbt_utils_not_constant_fct_ord_84c988f10df9b19958dab313eba7cefd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_constant_fct_ord_84c988f10df9b19958dab313eba7cefd", "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_84c988f10df9b19958dab313eba7cefd.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "alias": "dbt_utils_not_constant_fct_ord_84c988f10df9b19958dab313eba7cefd"}, "created_at": 1726254837.413314, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_ord_84c988f10df9b19958dab313eba7cefd`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_constant_fct_ord_84c988f10df9b19958dab313eba7cefd\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_84c988f10df9b19958dab313eba7cefd.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct sales_stddev_120) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\n  \n\nhaving count(distinct sales_stddev_120) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_stddev_120", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "sales_stddev_120", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_250.3cae461508": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_timeseries_sma_sales_stddev_250", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_timeseries_sma_sales_stddev_250.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_250.3cae461508", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_timeseries_sma_sales_stddev_250"], "alias": "not_null_fct_orders_timeseries_sma_sales_stddev_250", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">3"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_stddev_250.sql", "unrendered_config": {"severity": "WARN", "error_if": ">3", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.416302, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_timeseries_sma_sales_stddev_250`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">1\",error_if=\">3\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_stddev_250.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\nwhere sales_stddev_250 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_stddev_250", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_stddev_250", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_250.3cbe02f36d": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_250", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_ord_9462257bfeaead879e279ad1e2877448.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_250.3cbe02f36d", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_250"], "alias": "dbt_utils_not_constant_fct_ord_9462257bfeaead879e279ad1e2877448", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_constant_fct_ord_9462257bfeaead879e279ad1e2877448", "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_9462257bfeaead879e279ad1e2877448.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "alias": "dbt_utils_not_constant_fct_ord_9462257bfeaead879e279ad1e2877448"}, "created_at": 1726254837.417817, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_ord_9462257bfeaead879e279ad1e2877448`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_constant_fct_ord_9462257bfeaead879e279ad1e2877448\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_9462257bfeaead879e279ad1e2877448.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct sales_stddev_250) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\n  \n\nhaving count(distinct sales_stddev_250) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_stddev_250", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "sales_stddev_250", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_14.63f8b4a3fd": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_timeseries_sma_sales_sma_upper_14", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_timeseries_sma_sales_sma_upper_14.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_14.63f8b4a3fd", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_timeseries_sma_sales_sma_upper_14"], "alias": "not_null_fct_orders_timeseries_sma_sales_sma_upper_14", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">3"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_upper_14.sql", "unrendered_config": {"severity": "WARN", "error_if": ">3", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.421133, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_timeseries_sma_sales_sma_upper_14`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">1\",error_if=\">3\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_upper_14.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\nwhere sales_sma_upper_14 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_upper_14", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_sma_upper_14", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_14.d2b180e7d3": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_14", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_ord_f706fc49ea212b90838487f43b0b3d91.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_14.d2b180e7d3", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_14"], "alias": "dbt_utils_not_constant_fct_ord_f706fc49ea212b90838487f43b0b3d91", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_constant_fct_ord_f706fc49ea212b90838487f43b0b3d91", "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_f706fc49ea212b90838487f43b0b3d91.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "alias": "dbt_utils_not_constant_fct_ord_f706fc49ea212b90838487f43b0b3d91"}, "created_at": 1726254837.4223292, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_ord_f706fc49ea212b90838487f43b0b3d91`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_constant_fct_ord_f706fc49ea212b90838487f43b0b3d91\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_f706fc49ea212b90838487f43b0b3d91.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct sales_sma_upper_14) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\n  \n\nhaving count(distinct sales_sma_upper_14) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_upper_14", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "sales_sma_upper_14", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_14.ec877c63cd": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_timeseries_sma_sales_sma_lower_14", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_timeseries_sma_sales_sma_lower_14.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_14.ec877c63cd", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_timeseries_sma_sales_sma_lower_14"], "alias": "not_null_fct_orders_timeseries_sma_sales_sma_lower_14", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">3"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_lower_14.sql", "unrendered_config": {"severity": "WARN", "error_if": ">3", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.425775, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_timeseries_sma_sales_sma_lower_14`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">1\",error_if=\">3\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_lower_14.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\nwhere sales_sma_lower_14 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_lower_14", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_sma_lower_14", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_14.484861a84e": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_14", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_ord_ad45de46f8fb7200fcaac42022c6d7b0.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_14.484861a84e", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_14"], "alias": "dbt_utils_not_constant_fct_ord_ad45de46f8fb7200fcaac42022c6d7b0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_constant_fct_ord_ad45de46f8fb7200fcaac42022c6d7b0", "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_ad45de46f8fb7200fcaac42022c6d7b0.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "alias": "dbt_utils_not_constant_fct_ord_ad45de46f8fb7200fcaac42022c6d7b0"}, "created_at": 1726254837.427001, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_ord_ad45de46f8fb7200fcaac42022c6d7b0`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_constant_fct_ord_ad45de46f8fb7200fcaac42022c6d7b0\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_ad45de46f8fb7200fcaac42022c6d7b0.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct sales_sma_lower_14) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\n  \n\nhaving count(distinct sales_sma_lower_14) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_lower_14", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "sales_sma_lower_14", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_30.06ef189e4a": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_timeseries_sma_sales_sma_upper_30", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_timeseries_sma_sales_sma_upper_30.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_30.06ef189e4a", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_timeseries_sma_sales_sma_upper_30"], "alias": "not_null_fct_orders_timeseries_sma_sales_sma_upper_30", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">3"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_upper_30.sql", "unrendered_config": {"severity": "WARN", "error_if": ">3", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.4298828, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_timeseries_sma_sales_sma_upper_30`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">1\",error_if=\">3\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_upper_30.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\nwhere sales_sma_upper_30 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_upper_30", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_sma_upper_30", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_30.7edd812f30": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_30", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_ord_d58e91569b985a9345849e35aa1c8d9d.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_30.7edd812f30", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_30"], "alias": "dbt_utils_not_constant_fct_ord_d58e91569b985a9345849e35aa1c8d9d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_constant_fct_ord_d58e91569b985a9345849e35aa1c8d9d", "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_d58e91569b985a9345849e35aa1c8d9d.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "alias": "dbt_utils_not_constant_fct_ord_d58e91569b985a9345849e35aa1c8d9d"}, "created_at": 1726254837.4310882, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_ord_d58e91569b985a9345849e35aa1c8d9d`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_constant_fct_ord_d58e91569b985a9345849e35aa1c8d9d\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_d58e91569b985a9345849e35aa1c8d9d.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct sales_sma_upper_30) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\n  \n\nhaving count(distinct sales_sma_upper_30) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_upper_30", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "sales_sma_upper_30", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_30.ca28376bdb": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_timeseries_sma_sales_sma_lower_30", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_timeseries_sma_sales_sma_lower_30.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_30.ca28376bdb", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_timeseries_sma_sales_sma_lower_30"], "alias": "not_null_fct_orders_timeseries_sma_sales_sma_lower_30", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">3"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_lower_30.sql", "unrendered_config": {"severity": "WARN", "error_if": ">3", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.4344661, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_timeseries_sma_sales_sma_lower_30`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">1\",error_if=\">3\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_lower_30.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\nwhere sales_sma_lower_30 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_lower_30", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_sma_lower_30", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_30.8c23c0accd": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_30", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_ord_e4a78d8fe07090858f3ca76bd4f82d75.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_30.8c23c0accd", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_30"], "alias": "dbt_utils_not_constant_fct_ord_e4a78d8fe07090858f3ca76bd4f82d75", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_constant_fct_ord_e4a78d8fe07090858f3ca76bd4f82d75", "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_e4a78d8fe07090858f3ca76bd4f82d75.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "alias": "dbt_utils_not_constant_fct_ord_e4a78d8fe07090858f3ca76bd4f82d75"}, "created_at": 1726254837.435689, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_ord_e4a78d8fe07090858f3ca76bd4f82d75`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_constant_fct_ord_e4a78d8fe07090858f3ca76bd4f82d75\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_e4a78d8fe07090858f3ca76bd4f82d75.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct sales_sma_lower_30) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\n  \n\nhaving count(distinct sales_sma_lower_30) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_lower_30", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "sales_sma_lower_30", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_60.22e8c9233c": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_timeseries_sma_sales_sma_upper_60", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_timeseries_sma_sales_sma_upper_60.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_60.22e8c9233c", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_timeseries_sma_sales_sma_upper_60"], "alias": "not_null_fct_orders_timeseries_sma_sales_sma_upper_60", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">3"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_upper_60.sql", "unrendered_config": {"severity": "WARN", "error_if": ">3", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.438517, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_timeseries_sma_sales_sma_upper_60`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">1\",error_if=\">3\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_upper_60.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\nwhere sales_sma_upper_60 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_upper_60", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_sma_upper_60", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_60.92afcb3b14": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_60", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_ord_d0a225e71dc2a317acffbf2075634182.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_60.92afcb3b14", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_60"], "alias": "dbt_utils_not_constant_fct_ord_d0a225e71dc2a317acffbf2075634182", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_constant_fct_ord_d0a225e71dc2a317acffbf2075634182", "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_d0a225e71dc2a317acffbf2075634182.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "alias": "dbt_utils_not_constant_fct_ord_d0a225e71dc2a317acffbf2075634182"}, "created_at": 1726254837.439761, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_ord_d0a225e71dc2a317acffbf2075634182`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_constant_fct_ord_d0a225e71dc2a317acffbf2075634182\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_d0a225e71dc2a317acffbf2075634182.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct sales_sma_upper_60) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\n  \n\nhaving count(distinct sales_sma_upper_60) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_upper_60", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "sales_sma_upper_60", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_60.e33970618f": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_timeseries_sma_sales_sma_lower_60", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_timeseries_sma_sales_sma_lower_60.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_60.e33970618f", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_timeseries_sma_sales_sma_lower_60"], "alias": "not_null_fct_orders_timeseries_sma_sales_sma_lower_60", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">3"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_lower_60.sql", "unrendered_config": {"severity": "WARN", "error_if": ">3", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.443028, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_timeseries_sma_sales_sma_lower_60`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">1\",error_if=\">3\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_lower_60.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\nwhere sales_sma_lower_60 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_lower_60", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_sma_lower_60", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_60.669d910d99": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_60", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_ord_4e4727837048e02085511ebb6492be2e.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_60.669d910d99", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_60"], "alias": "dbt_utils_not_constant_fct_ord_4e4727837048e02085511ebb6492be2e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_constant_fct_ord_4e4727837048e02085511ebb6492be2e", "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_4e4727837048e02085511ebb6492be2e.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "alias": "dbt_utils_not_constant_fct_ord_4e4727837048e02085511ebb6492be2e"}, "created_at": 1726254837.444248, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_ord_4e4727837048e02085511ebb6492be2e`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_constant_fct_ord_4e4727837048e02085511ebb6492be2e\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_4e4727837048e02085511ebb6492be2e.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct sales_sma_lower_60) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\n  \n\nhaving count(distinct sales_sma_lower_60) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_lower_60", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "sales_sma_lower_60", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_120.96650466e0": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_timeseries_sma_sales_sma_upper_120", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_timeseries_sma_sales_sma_upper_120.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_120.96650466e0", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_timeseries_sma_sales_sma_upper_120"], "alias": "not_null_fct_orders_timeseries_sma_sales_sma_upper_120", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">3"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_upper_120.sql", "unrendered_config": {"severity": "WARN", "error_if": ">3", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.4471, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_timeseries_sma_sales_sma_upper_120`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">1\",error_if=\">3\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_upper_120.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\nwhere sales_sma_upper_120 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_upper_120", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_sma_upper_120", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_120.0d6017c9ee": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_120", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_ord_743f2829defbbf1738ffc872c1b096c1.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_120.0d6017c9ee", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_120"], "alias": "dbt_utils_not_constant_fct_ord_743f2829defbbf1738ffc872c1b096c1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_constant_fct_ord_743f2829defbbf1738ffc872c1b096c1", "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_743f2829defbbf1738ffc872c1b096c1.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "alias": "dbt_utils_not_constant_fct_ord_743f2829defbbf1738ffc872c1b096c1"}, "created_at": 1726254837.4483461, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_ord_743f2829defbbf1738ffc872c1b096c1`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_constant_fct_ord_743f2829defbbf1738ffc872c1b096c1\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_743f2829defbbf1738ffc872c1b096c1.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct sales_sma_upper_120) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\n  \n\nhaving count(distinct sales_sma_upper_120) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_upper_120", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "sales_sma_upper_120", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_120.efe9376cd5": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_timeseries_sma_sales_sma_lower_120", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_timeseries_sma_sales_sma_lower_120.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_120.efe9376cd5", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_timeseries_sma_sales_sma_lower_120"], "alias": "not_null_fct_orders_timeseries_sma_sales_sma_lower_120", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">3"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_lower_120.sql", "unrendered_config": {"severity": "WARN", "error_if": ">3", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.451659, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_timeseries_sma_sales_sma_lower_120`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">1\",error_if=\">3\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_lower_120.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\nwhere sales_sma_lower_120 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_lower_120", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_sma_lower_120", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_120.3d2213ced4": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_120", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_ord_795f6aa1ee046f25321c2635d7cb356c.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_120.3d2213ced4", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_120"], "alias": "dbt_utils_not_constant_fct_ord_795f6aa1ee046f25321c2635d7cb356c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_constant_fct_ord_795f6aa1ee046f25321c2635d7cb356c", "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_795f6aa1ee046f25321c2635d7cb356c.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "alias": "dbt_utils_not_constant_fct_ord_795f6aa1ee046f25321c2635d7cb356c"}, "created_at": 1726254837.452914, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_ord_795f6aa1ee046f25321c2635d7cb356c`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_constant_fct_ord_795f6aa1ee046f25321c2635d7cb356c\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_795f6aa1ee046f25321c2635d7cb356c.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct sales_sma_lower_120) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\n  \n\nhaving count(distinct sales_sma_lower_120) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_lower_120", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "sales_sma_lower_120", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_250.be8915d053": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_timeseries_sma_sales_sma_upper_250", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_timeseries_sma_sales_sma_upper_250.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_250.be8915d053", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_timeseries_sma_sales_sma_upper_250"], "alias": "not_null_fct_orders_timeseries_sma_sales_sma_upper_250", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">3"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_upper_250.sql", "unrendered_config": {"severity": "WARN", "error_if": ">3", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.4557598, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_timeseries_sma_sales_sma_upper_250`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">1\",error_if=\">3\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_upper_250.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\nwhere sales_sma_upper_250 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_upper_250", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_sma_upper_250", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_250.c11ad8a798": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_250", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_ord_f84d1eb35eba3cfcc40d4349bba399f2.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_250.c11ad8a798", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_250"], "alias": "dbt_utils_not_constant_fct_ord_f84d1eb35eba3cfcc40d4349bba399f2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_constant_fct_ord_f84d1eb35eba3cfcc40d4349bba399f2", "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_f84d1eb35eba3cfcc40d4349bba399f2.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "alias": "dbt_utils_not_constant_fct_ord_f84d1eb35eba3cfcc40d4349bba399f2"}, "created_at": 1726254837.457046, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_ord_f84d1eb35eba3cfcc40d4349bba399f2`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_constant_fct_ord_f84d1eb35eba3cfcc40d4349bba399f2\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_f84d1eb35eba3cfcc40d4349bba399f2.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct sales_sma_upper_250) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\n  \n\nhaving count(distinct sales_sma_upper_250) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_upper_250", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "sales_sma_upper_250", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_250.6bc0b85c8b": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_timeseries_sma_sales_sma_lower_250", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_timeseries_sma_sales_sma_lower_250.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_250.6bc0b85c8b", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_timeseries_sma_sales_sma_lower_250"], "alias": "not_null_fct_orders_timeseries_sma_sales_sma_lower_250", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">3"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_lower_250.sql", "unrendered_config": {"severity": "WARN", "error_if": ">3", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.460483, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_timeseries_sma_sales_sma_lower_250`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">1\",error_if=\">3\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_timeseries_sma_sales_sma_lower_250.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\nwhere sales_sma_lower_250 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_lower_250", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_sma_lower_250", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_250.6f8940f530": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_250", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_ord_a4d3347e6d6645bdfba4f81bb69bfd00.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_250.6f8940f530", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_250"], "alias": "dbt_utils_not_constant_fct_ord_a4d3347e6d6645bdfba4f81bb69bfd00", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_constant_fct_ord_a4d3347e6d6645bdfba4f81bb69bfd00", "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_a4d3347e6d6645bdfba4f81bb69bfd00.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "alias": "dbt_utils_not_constant_fct_ord_a4d3347e6d6645bdfba4f81bb69bfd00"}, "created_at": 1726254837.461739, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_ord_a4d3347e6d6645bdfba4f81bb69bfd00`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_constant_fct_ord_a4d3347e6d6645bdfba4f81bb69bfd00\") }}", "language": "sql", "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_ord_a4d3347e6d6645bdfba4f81bb69bfd00.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct sales_sma_lower_250) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n\n  \n\nhaving count(distinct sales_sma_lower_250) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_sma_lower_250", "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "sales_sma_lower_250", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_timeseries_sma_unequal_agg_sales.36b2dec339": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_timeseries_sma_unequal_agg_sales", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_timeseries_sma_unequal_agg_sales.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_timeseries_sma_unequal_agg_sales.36b2dec339", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_timeseries_sma_unequal_agg_sales"], "alias": "fct_orders_timeseries_sma_unequal_agg_sales", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_timeseries_sma_unequal_agg_sales.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.464532, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_timeseries_sma_unequal_agg_sales`", "raw_code": "{{ dbt_expectations.test_expect_table_aggregation_to_equal_other_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders", "model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_timeseries_sma_unequal_agg_sales.sql", "compiled": true, "compiled_code": "\n    with a as (\n        \n    select\n        \n        sum(sales) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders_timeseries_sma`\n    \n\n    ),\n    b as (\n        \n    select\n        \n        sum(net_revenue_after_tax) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_orders_timeseries_sma", "attached_node": "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test_metadata": {"name": "expect_table_aggregation_to_equal_other_table", "kwargs": {"expression": "sum(sales)", "compare_model": "ref(\"fct_orders\")", "compare_expression": "sum(net_revenue_after_tax)", "model": "{{ get_where_subquery(ref('fct_orders_timeseries_sma')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.not_null_fct_orders_country_id.dd87008526": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_country_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_country_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_country_id.dd87008526", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_country_id"], "alias": "not_null_fct_orders_country_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_country_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.468529, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_country_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_country_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere country_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_id", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_country_id.7ac8b5f6b7": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_country_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_country_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_country_id.7ac8b5f6b7", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_country_id"], "alias": "dbt_utils_not_constant_fct_orders_country_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_country_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.46976, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_country_id`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_country_id.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct country_id) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct country_id) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_id", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "country_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_country_id.f51b3be77c": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_country_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_country_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_country_id.f51b3be77c", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_country_id"], "alias": "fct_orders_unexpected_country_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_country_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.472935, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_country_id`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_country_id.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not country_id >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not country_id <= 22\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_id", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 22, "column_name": "country_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_country.0edcc91e35": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_country", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_country.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_country.0edcc91e35", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_country"], "alias": "not_null_fct_orders_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_country.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.476005, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_country`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_country.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere country is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_country.0a27dd05bc": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_country", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_country.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_country.0a27dd05bc", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_country"], "alias": "dbt_utils_not_constant_fct_orders_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_country.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.477291, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_country`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_country.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct country) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct country) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "country", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_order_id.4e687af8d0": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_order_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_order_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_order_id.4e687af8d0", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_order_id"], "alias": "not_null_fct_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_order_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.4799008, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_order_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.unique_fct_orders_order_id.523ddb6ce5": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "unique_fct_orders_order_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "unique_fct_orders_order_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.unique_fct_orders_order_id.523ddb6ce5", "fqn": ["dbt_analytics_engine", "marts", "unique_fct_orders_order_id"], "alias": "unique_fct_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/unique_fct_orders_order_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.481081, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`unique_fct_orders_order_id`", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/unique_fct_orders_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select order_id as unique_field\n  from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n  where order_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.relationships_fct_orders_order_id__order_id__ref_int_orders_.5a03fd2117": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "relationships_fct_orders_order_id__order_id__ref_int_orders_", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "relationships_fct_orders_order_id__order_id__ref_int_orders_.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.relationships_fct_orders_order_id__order_id__ref_int_orders_.5a03fd2117", "fqn": ["dbt_analytics_engine", "marts", "relationships_fct_orders_order_id__order_id__ref_int_orders_"], "alias": "relationships_fct_orders_order_id__order_id__ref_int_orders_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/relationships_fct_orders_order_id__order_id__ref_int_orders_.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.482819, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`relationships_fct_orders_order_id__order_id__ref_int_orders_`", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}, {"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.int_orders", "model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/relationships_fct_orders_order_id__order_id__ref_int_orders_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select order_id as from_field\n    from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n    where order_id is not null\n),\n\nparent as (\n    select order_id as to_field\n    from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`int_orders`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_orders')", "field": "order_id", "column_name": "order_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_fct_orders_order_status.b83f07f66b": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_order_status", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_order_status.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_order_status.b83f07f66b", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_order_status"], "alias": "not_null_fct_orders_order_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_order_status.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.487736, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_order_status`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_order_status.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere order_status is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_status", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_status", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_order_status.0b6286ed95": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_order_status", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_order_status.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_order_status.0b6286ed95", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_order_status"], "alias": "dbt_utils_not_constant_fct_orders_order_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_order_status.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.488929, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_order_status`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_order_status.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct order_status) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct order_status) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_status", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "order_status", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_order_status.a694a31b07": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_order_status", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_order_status.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_order_status.a694a31b07", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_order_status"], "alias": "fct_orders_unexpected_order_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_order_status.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.4921951, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_order_status`", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_order_status.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        order_status as value_field,\n        count(*) as n_records\n\n    from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n    group by order_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'completed','failed'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_status", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["completed", "failed"], "column_name": "order_status", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_fct_orders_customer_id.16fe324f7b": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_customer_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_customer_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_customer_id.16fe324f7b", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_customer_id"], "alias": "not_null_fct_orders_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_customer_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.4953249, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_customer_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_customer_id.1e994fbbd6": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_customer_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_customer_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_customer_id.1e994fbbd6", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_customer_id"], "alias": "dbt_utils_not_constant_fct_orders_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_customer_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.496543, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_customer_id`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_customer_id.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct customer_id) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct customer_id) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_nb_payments.3cd88a1cae": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_nb_payments", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_nb_payments.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_nb_payments.3cd88a1cae", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_nb_payments"], "alias": "not_null_fct_orders_nb_payments", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_nb_payments.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.499529, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_nb_payments`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_nb_payments.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere nb_payments is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nb_payments", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "nb_payments", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_nb_payments.bcd85f6c8a": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_nb_payments", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_nb_payments.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_nb_payments.bcd85f6c8a", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_nb_payments"], "alias": "dbt_utils_not_constant_fct_orders_nb_payments", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_nb_payments.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.5009081, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_nb_payments`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_nb_payments.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct nb_payments) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct nb_payments) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nb_payments", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "nb_payments", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_nb_payments.fb52011391": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_nb_payments", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_nb_payments.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_nb_payments.fb52011391", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_nb_payments"], "alias": "fct_orders_unexpected_nb_payments", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_nb_payments.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.503569, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_nb_payments`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_nb_payments.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\nwhere not(nb_payments > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nb_payments", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "nb_payments", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_first_name.a89a0764e2": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_first_name", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_first_name.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_first_name.a89a0764e2", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_first_name"], "alias": "not_null_fct_orders_first_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_first_name.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.506498, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_first_name`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_first_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere first_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "first_name", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "first_name", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_first_name.0e5bb2183e": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_first_name", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_first_name.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_first_name.0e5bb2183e", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_first_name"], "alias": "dbt_utils_not_constant_fct_orders_first_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_first_name.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.507967, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_first_name`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_first_name.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct first_name) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct first_name) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "first_name", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "first_name", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_last_name.1e39458222": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_last_name", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_last_name.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_last_name.1e39458222", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_last_name"], "alias": "not_null_fct_orders_last_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_last_name.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.510707, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_last_name`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_last_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere last_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "last_name", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "last_name", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_last_name.1db1f3d23b": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_last_name", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_last_name.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_last_name.1db1f3d23b", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_last_name"], "alias": "dbt_utils_not_constant_fct_orders_last_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_last_name.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.511932, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_last_name`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_last_name.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct last_name) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct last_name) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "last_name", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "last_name", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_is_shipped_bool.281259375c": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_is_shipped_bool", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_is_shipped_bool.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_is_shipped_bool.281259375c", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_is_shipped_bool"], "alias": "fct_orders_unexpected_is_shipped_bool", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_is_shipped_bool.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.5149472, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_is_shipped_bool`", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_is_shipped_bool.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        is_shipped as value_field,\n        count(*) as n_records\n\n    from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n    group by is_shipped\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    True,False\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_shipped", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "is_shipped", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.unique_fct_orders_shipping_id.b0be835405": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "unique_fct_orders_shipping_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "unique_fct_orders_shipping_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.unique_fct_orders_shipping_id.b0be835405", "fqn": ["dbt_analytics_engine", "marts", "unique_fct_orders_shipping_id"], "alias": "unique_fct_orders_shipping_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/unique_fct_orders_shipping_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.51789, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`unique_fct_orders_shipping_id`", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/unique_fct_orders_shipping_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select shipping_id as unique_field\n  from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n  where shipping_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipping_id", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "unique", "kwargs": {"column_name": "shipping_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_shipping_id.1f5b4e61fa": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_shipping_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_shipping_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_shipping_id.1f5b4e61fa", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_shipping_id"], "alias": "dbt_utils_not_constant_fct_orders_shipping_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_shipping_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.519087, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_shipping_id`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_shipping_id.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct shipping_id) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct shipping_id) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipping_id", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "shipping_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_assert_positive_shipping_amount.97b89a1e69": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_assert_positive_shipping_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_assert_positive_shipping_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_assert_positive_shipping_amount.97b89a1e69", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_assert_positive_shipping_amount"], "alias": "fct_orders_assert_positive_shipping_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_assert_positive_shipping_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.521682, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_assert_positive_shipping_amount`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_assert_positive_shipping_amount.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\nwhere not(shipping_amount > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipping_amount", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "shipping_amount", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_payment_method.552e8460b4": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_payment_method", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_payment_method.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_payment_method.552e8460b4", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_payment_method"], "alias": "not_null_fct_orders_payment_method", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_payment_method.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.5246458, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_payment_method`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_payment_method.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere payment_method is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_method", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_method", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_payment_method.e6ed76876e": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_payment_method", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_payment_method.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_payment_method.e6ed76876e", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_payment_method"], "alias": "dbt_utils_not_constant_fct_orders_payment_method", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_payment_method.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.525883, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_payment_method`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_payment_method.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct payment_method) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct payment_method) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_method", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "payment_method", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_payment_method.143499598b": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_payment_method", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_payment_method.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_payment_method.143499598b", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_payment_method"], "alias": "fct_orders_unexpected_payment_method", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_payment_method.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.528914, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_payment_method`", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_payment_method.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        payment_method as value_field,\n        count(*) as n_records\n\n    from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n    group by payment_method\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'amazon_pay','stripe','apple_pay','bitcoin'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_method", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["amazon_pay", "stripe", "apple_pay", "bitcoin"], "column_name": "payment_method", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_fct_orders_gross_revenue.e9774c74d8": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_gross_revenue", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_gross_revenue.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_gross_revenue.e9774c74d8", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_gross_revenue"], "alias": "not_null_fct_orders_gross_revenue", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_gross_revenue.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.5328588, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_gross_revenue`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_gross_revenue.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere gross_revenue is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "gross_revenue", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gross_revenue", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_gross_revenue.be21114f63": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_gross_revenue", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_gross_revenue.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_gross_revenue.be21114f63", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_gross_revenue"], "alias": "dbt_utils_not_constant_fct_orders_gross_revenue", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_gross_revenue.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.534134, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_gross_revenue`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_gross_revenue.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct gross_revenue) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct gross_revenue) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "gross_revenue", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "gross_revenue", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_assert_positive_gross_revenue.d0522b6f57": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_assert_positive_gross_revenue", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_assert_positive_gross_revenue.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_assert_positive_gross_revenue.d0522b6f57", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_assert_positive_gross_revenue"], "alias": "fct_orders_assert_positive_gross_revenue", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_assert_positive_gross_revenue.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.536829, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_assert_positive_gross_revenue`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_assert_positive_gross_revenue.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\nwhere not(gross_revenue > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "gross_revenue", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "gross_revenue", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_tax_rate.83abb81011": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_tax_rate", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_tax_rate.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_tax_rate.83abb81011", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_tax_rate"], "alias": "not_null_fct_orders_tax_rate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_tax_rate.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.5395572, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_tax_rate`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_tax_rate.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere tax_rate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tax_rate", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tax_rate", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_tax_rate.c8727ca0c5": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_tax_rate", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_tax_rate.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_tax_rate.c8727ca0c5", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_tax_rate"], "alias": "dbt_utils_not_constant_fct_orders_tax_rate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_tax_rate.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.540823, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_tax_rate`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_tax_rate.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct tax_rate) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct tax_rate) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tax_rate", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "tax_rate", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_tax_rate.888f839f9c": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_tax_rate", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_tax_rate.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_tax_rate.888f839f9c", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_tax_rate"], "alias": "fct_orders_unexpected_tax_rate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_tax_rate.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.543784, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_tax_rate`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_tax_rate.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not tax_rate >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not tax_rate <= 100\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tax_rate", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 100, "column_name": "tax_rate", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_assert_positive_tax_rate.3bb0614ec6": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_assert_positive_tax_rate", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_assert_positive_tax_rate.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_assert_positive_tax_rate.3bb0614ec6", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_assert_positive_tax_rate"], "alias": "fct_orders_assert_positive_tax_rate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_assert_positive_tax_rate.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.546703, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_assert_positive_tax_rate`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_assert_positive_tax_rate.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\nwhere not(tax_rate > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tax_rate", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "tax_rate", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_tax_amount.405019f249": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_tax_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_tax_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_tax_amount.405019f249", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_tax_amount"], "alias": "not_null_fct_orders_tax_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_tax_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.5494442, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_tax_amount`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_tax_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere tax_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tax_amount", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tax_amount", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_tax_amount.9d065212d2": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_tax_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_tax_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_tax_amount.9d065212d2", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_tax_amount"], "alias": "dbt_utils_not_constant_fct_orders_tax_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_tax_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.550733, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_tax_amount`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_tax_amount.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct tax_amount) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct tax_amount) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tax_amount", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "tax_amount", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_tax_amount.8d62b11a90": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_tax_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_tax_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_tax_amount.8d62b11a90", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_tax_amount"], "alias": "fct_orders_unexpected_tax_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_tax_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.5534441, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_tax_amount`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_tax_amount.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\nwhere not(tax_amount = SAFE_MULTIPLY(SAFE_SUBTRACT(gross_revenue, COALESCE(shipping_amount, 0)), SAFE_DIVIDE(tax_rate, 100)))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tax_amount", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "= SAFE_MULTIPLY(SAFE_SUBTRACT(gross_revenue, COALESCE(shipping_amount, 0)), SAFE_DIVIDE(tax_rate, 100))", "column_name": "tax_amount", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_net_revenue_before_tax.bb8578a9c6": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_net_revenue_before_tax", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_net_revenue_before_tax.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_net_revenue_before_tax.bb8578a9c6", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_net_revenue_before_tax"], "alias": "not_null_fct_orders_net_revenue_before_tax", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_net_revenue_before_tax.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.55649, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_net_revenue_before_tax`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_net_revenue_before_tax.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere net_revenue_before_tax is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "net_revenue_before_tax", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "net_revenue_before_tax", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_net_revenue_before_tax.1c691828cc": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_net_revenue_before_tax", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_net_revenue_before_tax.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_net_revenue_before_tax.1c691828cc", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_net_revenue_before_tax"], "alias": "dbt_utils_not_constant_fct_orders_net_revenue_before_tax", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_net_revenue_before_tax.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.558, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_net_revenue_before_tax`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_net_revenue_before_tax.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct net_revenue_before_tax) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct net_revenue_before_tax) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "net_revenue_before_tax", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "net_revenue_before_tax", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_net_revenue_before_tax.35c5c243a5": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_net_revenue_before_tax", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_net_revenue_before_tax.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_net_revenue_before_tax.35c5c243a5", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_net_revenue_before_tax"], "alias": "fct_orders_unexpected_net_revenue_before_tax", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_net_revenue_before_tax.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.560547, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_net_revenue_before_tax`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_net_revenue_before_tax.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\nwhere not(net_revenue_before_tax = SAFE_SUBTRACT(gross_revenue, COALESCE(shipping_amount, 0)))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "net_revenue_before_tax", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "= SAFE_SUBTRACT(gross_revenue, COALESCE(shipping_amount, 0))", "column_name": "net_revenue_before_tax", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_net_revenue_after_tax.e01b375b4e": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_net_revenue_after_tax", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_net_revenue_after_tax.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_net_revenue_after_tax.e01b375b4e", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_net_revenue_after_tax"], "alias": "not_null_fct_orders_net_revenue_after_tax", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_net_revenue_after_tax.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.563435, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_net_revenue_after_tax`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_net_revenue_after_tax.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere net_revenue_after_tax is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "net_revenue_after_tax", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "net_revenue_after_tax", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_net_revenue_after_tax.d5134dd3ec": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_net_revenue_after_tax", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_net_revenue_after_tax.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_net_revenue_after_tax.d5134dd3ec", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_net_revenue_after_tax"], "alias": "dbt_utils_not_constant_fct_orders_net_revenue_after_tax", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_net_revenue_after_tax.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.564594, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_net_revenue_after_tax`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_net_revenue_after_tax.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct net_revenue_after_tax) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct net_revenue_after_tax) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "net_revenue_after_tax", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "net_revenue_after_tax", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_net_revenue_after_tax.cf4c030292": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_net_revenue_after_tax", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_net_revenue_after_tax.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_net_revenue_after_tax.cf4c030292", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_net_revenue_after_tax"], "alias": "fct_orders_unexpected_net_revenue_after_tax", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_net_revenue_after_tax.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.567466, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_net_revenue_after_tax`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_net_revenue_after_tax.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\nwhere not(net_revenue_after_tax = SAFE_DIVIDE(SAFE_SUBTRACT(gross_revenue, COALESCE(shipping_amount, 0)), (1 + SAFE_DIVIDE(tax_rate, 100))))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "net_revenue_after_tax", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "= SAFE_DIVIDE(SAFE_SUBTRACT(gross_revenue, COALESCE(shipping_amount, 0)), (1 + SAFE_DIVIDE(tax_rate, 100)))", "column_name": "net_revenue_after_tax", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_order_date.84f0a76362": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_order_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_order_date.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_order_date.84f0a76362", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_order_date"], "alias": "not_null_fct_orders_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_order_date.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.57023, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_order_date`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_order_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere order_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_date", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_order_date.369ca05d4f": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_order_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_order_date.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_order_date.369ca05d4f", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_order_date"], "alias": "dbt_utils_not_constant_fct_orders_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_order_date.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.5716312, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_order_date`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_order_date.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct order_date) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct order_date) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "order_date", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_order_date.4a7d73acb5": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_order_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_order_date.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_order_date.4a7d73acb5", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_order_date"], "alias": "fct_orders_unexpected_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_order_date.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.574569, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_order_date`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_order_date.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not order_date <= current_datetime()\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "accepted_range", "kwargs": {"max_value": "current_datetime()", "column_name": "order_date", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_shipping_date.e1289987ed": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_shipping_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_shipping_date.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_shipping_date.e1289987ed", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_shipping_date"], "alias": "dbt_utils_not_constant_fct_orders_shipping_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_shipping_date.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.5771022, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_shipping_date`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_shipping_date.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct shipping_date) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct shipping_date) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipping_date", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "shipping_date", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_shipping_date.2e6bb5ce4f": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_shipping_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_shipping_date.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_shipping_date.2e6bb5ce4f", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_shipping_date"], "alias": "fct_orders_unexpected_shipping_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_shipping_date.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.580412, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_shipping_date`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_shipping_date.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not shipping_date <= current_datetime()\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipping_date", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "accepted_range", "kwargs": {"max_value": "current_datetime()", "column_name": "shipping_date", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_is_returned_bool.3e7d7bb86e": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_is_returned_bool", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_is_returned_bool.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_is_returned_bool.3e7d7bb86e", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_is_returned_bool"], "alias": "fct_orders_unexpected_is_returned_bool", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_is_returned_bool.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.583244, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_is_returned_bool`", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_is_returned_bool.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        is_returned as value_field,\n        count(*) as n_records\n\n    from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n    group by is_returned\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    True,False\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_returned", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "is_returned", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.unique_fct_orders_return_id.87582f9770": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "unique_fct_orders_return_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "unique_fct_orders_return_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.unique_fct_orders_return_id.87582f9770", "fqn": ["dbt_analytics_engine", "marts", "unique_fct_orders_return_id"], "alias": "unique_fct_orders_return_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/unique_fct_orders_return_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.585759, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`unique_fct_orders_return_id`", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/unique_fct_orders_return_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select return_id as unique_field\n  from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n  where return_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_id", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "unique", "kwargs": {"column_name": "return_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_return_id.f0a57fcf42": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_return_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_return_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_return_id.f0a57fcf42", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_return_id"], "alias": "dbt_utils_not_constant_fct_orders_return_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_return_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.58732, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_return_id`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_return_id.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct return_id) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct return_id) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_id", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "return_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_return_date.c4a12821ab": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_return_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_return_date.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_return_date.c4a12821ab", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_return_date"], "alias": "dbt_utils_not_constant_fct_orders_return_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_return_date.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.589932, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_return_date`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_return_date.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct return_date) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct return_date) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_date", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "return_date", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_return_date.faa60b5a52": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_return_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_return_date.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_return_date.faa60b5a52", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_return_date"], "alias": "fct_orders_unexpected_return_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_return_date.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.592772, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_return_date`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_return_date.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not return_date <= current_datetime()\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_date", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "accepted_range", "kwargs": {"max_value": "current_datetime()", "column_name": "return_date", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_return_reason.10f36c5ab1": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_return_reason", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_return_reason.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_return_reason.10f36c5ab1", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_return_reason"], "alias": "dbt_utils_not_constant_fct_orders_return_reason", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_return_reason.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.595648, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_return_reason`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_return_reason.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct return_reason) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct return_reason) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_reason", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "return_reason", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_return_reason.bf2d1cade2": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_return_reason", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_return_reason.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_return_reason.bf2d1cade2", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_return_reason"], "alias": "fct_orders_unexpected_return_reason", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_return_reason.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.598316, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_return_reason`", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_return_reason.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        return_reason as value_field,\n        count(*) as n_records\n\n    from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n    group by return_reason\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Not as Described','Compatibility Issues','Quality Concerns','Technical Difficulties'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_reason", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Not as Described", "Compatibility Issues", "Quality Concerns", "Technical Difficulties"], "column_name": "return_reason", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_fulfillment_days.6ba87ed360": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_fulfillment_days", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_fulfillment_days.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_fulfillment_days.6ba87ed360", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_fulfillment_days"], "alias": "dbt_utils_not_constant_fct_orders_fulfillment_days", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_fulfillment_days.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.601863, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_fulfillment_days`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_fulfillment_days.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct fulfillment_days) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct fulfillment_days) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fulfillment_days", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "fulfillment_days", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_fulfillment_days.224a79c537": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_fulfillment_days", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_fulfillment_days.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_fulfillment_days.224a79c537", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_fulfillment_days"], "alias": "fct_orders_unexpected_fulfillment_days", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_fulfillment_days.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.604789, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_fulfillment_days`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_fulfillment_days.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\nwhere not(fulfillment_days = DATE_DIFF(shipping_date, order_date, DAY))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fulfillment_days", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "= DATE_DIFF(shipping_date, order_date, DAY)", "column_name": "fulfillment_days", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_is_nps.ec1b06649e": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_is_nps", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_is_nps.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_is_nps.ec1b06649e", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_is_nps"], "alias": "dbt_utils_not_constant_fct_orders_is_nps", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_is_nps.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.6075368, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_is_nps`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_is_nps.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct is_nps) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct is_nps) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_nps", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "is_nps", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_is_nps_bool.e8cc54079b": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_is_nps_bool", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_is_nps_bool.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_is_nps_bool.e8cc54079b", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_is_nps_bool"], "alias": "fct_orders_unexpected_is_nps_bool", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_is_nps_bool.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.6104598, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_is_nps_bool`", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_is_nps_bool.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        is_nps as value_field,\n        count(*) as n_records\n\n    from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n    group by is_nps\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    True,False\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_nps", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "is_nps", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_nps_score.4801b7fe57": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_nps_score", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_nps_score.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_nps_score.4801b7fe57", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_nps_score"], "alias": "dbt_utils_not_constant_fct_orders_nps_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_nps_score.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.61316, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_nps_score`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_nps_score.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct nps_score) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct nps_score) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nps_score", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "nps_score", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.dbt_utils_accepted_range_fct_orders_nps_score__10__0.7918938823": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_accepted_range_fct_orders_nps_score__10__0", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_accepted_range_fct_orders_nps_score__10__0.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_accepted_range_fct_orders_nps_score__10__0.7918938823", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_accepted_range_fct_orders_nps_score__10__0"], "alias": "dbt_utils_accepted_range_fct_orders_nps_score__10__0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_accepted_range_fct_orders_nps_score__10__0.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.615975, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_accepted_range_fct_orders_nps_score__10__0`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_accepted_range_fct_orders_nps_score__10__0.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not nps_score >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not nps_score <= 10\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nps_score", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 10, "column_name": "nps_score", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_nps_date.d14f37bd0e": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_nps_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_nps_date.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_nps_date.d14f37bd0e", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_nps_date"], "alias": "dbt_utils_not_constant_fct_orders_nps_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_nps_date.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.618956, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_nps_date`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_nps_date.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct nps_date) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct nps_date) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nps_date", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "nps_date", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_nps_date.18b8cb456d": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_nps_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_nps_date.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_nps_date.18b8cb456d", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_nps_date"], "alias": "fct_orders_unexpected_nps_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_nps_date.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.6215959, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_nps_date`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_nps_date.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not nps_date <= current_datetime()\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nps_date", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "accepted_range", "kwargs": {"max_value": "current_datetime()", "column_name": "nps_date", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_product_category_id.da74e704f7": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_product_category_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_product_category_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_product_category_id.da74e704f7", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_product_category_id"], "alias": "not_null_fct_orders_product_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_product_category_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.624477, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_product_category_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_product_category_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere product_category_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_category_id", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_category_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_product_category_id.92b52ba0ee": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_product_category_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_product_category_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_product_category_id.92b52ba0ee", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_product_category_id"], "alias": "dbt_utils_not_constant_fct_orders_product_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_product_category_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.625729, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_product_category_id`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_product_category_id.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct product_category_id) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct product_category_id) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_category_id", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "product_category_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_product_category_id.0e1442b69c": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_product_category_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_product_category_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_product_category_id.0e1442b69c", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_product_category_id"], "alias": "fct_orders_unexpected_product_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_product_category_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.629075, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_product_category_id`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_product_category_id.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not product_category_id >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not product_category_id <= 5\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_category_id", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 5, "column_name": "product_category_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_product_category.1766c71bb2": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_product_category", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_product_category.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_product_category.1766c71bb2", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_product_category"], "alias": "not_null_fct_orders_product_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_product_category.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.631765, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_product_category`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_product_category.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere product_category is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_category", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_category", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_product_category.112df2d465": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_product_category", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_product_category.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_product_category.112df2d465", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_product_category"], "alias": "dbt_utils_not_constant_fct_orders_product_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_product_category.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.633225, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_product_category`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_product_category.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct product_category) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct product_category) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_category", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "product_category", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_product_category.796f7162be": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_product_category", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_product_category.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_product_category.796f7162be", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_product_category"], "alias": "fct_orders_unexpected_product_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_product_category.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.636142, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_product_category`", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_product_category.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        product_category as value_field,\n        count(*) as n_records\n\n    from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n    group by product_category\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Design Templates','Fonts & Typography','Graphic Assets','Stock Photography','Video & Animation'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_category", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Design Templates", "Fonts & Typography", "Graphic Assets", "Stock Photography", "Video & Animation"], "column_name": "product_category", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_fct_orders_product_id.8e73ef4e24": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_product_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_product_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_product_id.8e73ef4e24", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_product_id"], "alias": "not_null_fct_orders_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_product_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.638775, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_product_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_product_id.f591e3ef76": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_product_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_product_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_product_id.f591e3ef76", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_product_id"], "alias": "dbt_utils_not_constant_fct_orders_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_product_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.6399739, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_product_id`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_product_id.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct product_id) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct product_id) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_product_id.03e8fa5b21": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_product_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_product_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_product_id.03e8fa5b21", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_product_id"], "alias": "fct_orders_unexpected_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_product_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.6428769, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_product_id`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_product_id.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not product_id >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not product_id <= 5\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 5, "column_name": "product_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_product_name.a9a0af8e44": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_product_name", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_product_name.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_product_name.a9a0af8e44", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_product_name"], "alias": "not_null_fct_orders_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_product_name.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.6455538, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_product_name`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_product_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere product_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_name", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_product_name.04af613d46": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_product_name", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_product_name.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_product_name.04af613d46", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_product_name"], "alias": "dbt_utils_not_constant_fct_orders_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_product_name.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.646732, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_product_name`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_product_name.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct product_name) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct product_name) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_name", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_cogs.0b19f968ef": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_cogs", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_cogs.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_cogs.0b19f968ef", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_cogs"], "alias": "not_null_fct_orders_cogs", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_cogs.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.649517, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_cogs`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_cogs.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere cogs is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cogs", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cogs", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_cogs.68c7e7b990": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_cogs", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_cogs.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_cogs.68c7e7b990", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_cogs"], "alias": "dbt_utils_not_constant_fct_orders_cogs", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_cogs.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.650858, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_cogs`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_cogs.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct cogs) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct cogs) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cogs", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "cogs", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_cogs.001142e58f": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_cogs", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_cogs.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_cogs.001142e58f", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_cogs"], "alias": "fct_orders_unexpected_cogs", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_cogs.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.653594, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_cogs`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_cogs.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\nwhere not(cogs > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cogs", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "cogs", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_returned_cogs.5259a715e3": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_returned_cogs", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_returned_cogs.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_returned_cogs.5259a715e3", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_returned_cogs"], "alias": "not_null_fct_orders_returned_cogs", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_returned_cogs.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.656047, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_returned_cogs`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_returned_cogs.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere returned_cogs is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "returned_cogs", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "returned_cogs", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_returned_cogs.ce6d78c725": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_returned_cogs", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_returned_cogs.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_returned_cogs.ce6d78c725", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_returned_cogs"], "alias": "dbt_utils_not_constant_fct_orders_returned_cogs", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_returned_cogs.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.657224, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_returned_cogs`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_returned_cogs.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct returned_cogs) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct returned_cogs) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "returned_cogs", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "returned_cogs", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_returned_cogs.72a465536d": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_returned_cogs", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_returned_cogs.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_returned_cogs.72a465536d", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_returned_cogs"], "alias": "fct_orders_unexpected_returned_cogs", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "returned_cogs > 0", "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_returned_cogs.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "where": "returned_cogs > 0"}, "created_at": 1726254837.660345, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_returned_cogs`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(where=\"returned_cogs > 0\") }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_returned_cogs.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom (select * from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders` where returned_cogs > 0) dbt_subquery\n\nwhere not(returned_cogs = cogs)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "returned_cogs", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "= cogs", "column_name": "returned_cogs", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_refund_amount.f6e3861bf0": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_refund_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_refund_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_refund_amount.f6e3861bf0", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_refund_amount"], "alias": "not_null_fct_orders_refund_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_refund_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.663193, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_refund_amount`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_refund_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere refund_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "refund_amount", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "refund_amount", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_refund_amount.3a865afd77": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_refund_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_refund_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_refund_amount.3a865afd77", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_refund_amount"], "alias": "dbt_utils_not_constant_fct_orders_refund_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_refund_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.6643698, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_refund_amount`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_refund_amount.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct refund_amount) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct refund_amount) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "refund_amount", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "refund_amount", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_refund_amount.79c3344f36": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_refund_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_refund_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_refund_amount.79c3344f36", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_refund_amount"], "alias": "fct_orders_unexpected_refund_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "refund_amount > 0", "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_refund_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "where": "refund_amount > 0"}, "created_at": 1726254837.6673942, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_refund_amount`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(where=\"refund_amount > 0\") }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_refund_amount.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom (select * from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders` where refund_amount > 0) dbt_subquery\n\nwhere not(refund_amount = (gross_revenue - shipping_amount))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "refund_amount", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "= (gross_revenue - shipping_amount)", "column_name": "refund_amount", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_payment_fee.cb62252086": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_payment_fee", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_payment_fee.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_payment_fee.cb62252086", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_payment_fee"], "alias": "not_null_fct_orders_payment_fee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_payment_fee.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.670264, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_payment_fee`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_payment_fee.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere payment_fee is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_fee", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_fee", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_payment_fee.51eecf2763": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_payment_fee", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_payment_fee.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_payment_fee.51eecf2763", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_payment_fee"], "alias": "dbt_utils_not_constant_fct_orders_payment_fee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_payment_fee.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.671479, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_payment_fee`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_payment_fee.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct payment_fee) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct payment_fee) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_fee", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "payment_fee", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_assert_positive_payment_fee.3fc91c0b12": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_assert_positive_payment_fee", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_assert_positive_payment_fee.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_assert_positive_payment_fee.3fc91c0b12", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_assert_positive_payment_fee"], "alias": "fct_orders_assert_positive_payment_fee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_assert_positive_payment_fee.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.6740742, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_assert_positive_payment_fee`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_assert_positive_payment_fee.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\nwhere not(payment_fee > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_fee", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "payment_fee", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_cm.e44709b283": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_cm", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_cm.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_cm.e44709b283", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_cm"], "alias": "not_null_fct_orders_cm", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_cm.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.676694, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_cm`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_cm.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere cm is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cm", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cm", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_cm.8fc3956ee5": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_cm", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_cm.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_cm.8fc3956ee5", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_cm"], "alias": "dbt_utils_not_constant_fct_orders_cm", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_cm.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.6779, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_cm`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_cm.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct cm) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct cm) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cm", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "cm", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_cm.8fd4691b5f": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_cm", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_cm.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_cm.8fd4691b5f", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_cm"], "alias": "fct_orders_unexpected_cm", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_cm.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.680931, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_cm`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_cm.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\nwhere not(cm < gross_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cm", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< gross_revenue", "column_name": "cm", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_customer_order_nb.79c7350630": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_customer_order_nb", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_customer_order_nb.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_customer_order_nb.79c7350630", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_customer_order_nb"], "alias": "not_null_fct_orders_customer_order_nb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_customer_order_nb.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.68396, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_customer_order_nb`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_customer_order_nb.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere customer_order_nb is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_order_nb", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_order_nb", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_customer_order_nb.b5fec9bc97": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_customer_order_nb", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_customer_order_nb.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_customer_order_nb.b5fec9bc97", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_customer_order_nb"], "alias": "dbt_utils_not_constant_fct_orders_customer_order_nb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_customer_order_nb.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.685146, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_customer_order_nb`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_customer_order_nb.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct customer_order_nb) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct customer_order_nb) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_order_nb", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "customer_order_nb", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_orders_customer_type.5d273b0b2b": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_orders_customer_type", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_orders_customer_type.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_orders_customer_type.5d273b0b2b", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_orders_customer_type"], "alias": "not_null_fct_orders_customer_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_customer_type.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.687783, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_orders_customer_type`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_orders_customer_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\nwhere customer_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_type", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_type", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_customer_type.5b997d97e0": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_orders_customer_type", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_orders_customer_type.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_customer_type.5b997d97e0", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_orders_customer_type"], "alias": "dbt_utils_not_constant_fct_orders_customer_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_customer_type.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.688952, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_orders_customer_type`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_orders_customer_type.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct customer_type) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n\n  \n\nhaving count(distinct customer_type) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_type", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "customer_type", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_orders_unexpected_customer_type.69983a7d22": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unexpected_customer_type", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unexpected_customer_type.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unexpected_customer_type.69983a7d22", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unexpected_customer_type"], "alias": "fct_orders_unexpected_customer_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_customer_type.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.692147, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unexpected_customer_type`", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unexpected_customer_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        customer_type as value_field,\n        count(*) as n_records\n\n    from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n    group by customer_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Returning','New'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_type", "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Returning", "New"], "column_name": "customer_type", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.fct_orders_unequal_agg_gross_revenue.91ab358fda": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unequal_agg_gross_revenue", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unequal_agg_gross_revenue.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unequal_agg_gross_revenue.91ab358fda", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unequal_agg_gross_revenue"], "alias": "fct_orders_unequal_agg_gross_revenue", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unequal_agg_gross_revenue.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.69521, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unequal_agg_gross_revenue`", "raw_code": "{{ dbt_expectations.test_expect_table_aggregation_to_equal_other_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_payments", "package": null, "version": null}, {"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.int_payments", "model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unequal_agg_gross_revenue.sql", "compiled": true, "compiled_code": "\n    with a as (\n        \n    select\n        \n        sum(gross_revenue) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n    \n\n    ),\n    b as (\n        \n    select\n        \n        sum(gross_revenue) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`int_payments`\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "expect_table_aggregation_to_equal_other_table", "kwargs": {"expression": "sum(gross_revenue)", "compare_model": "ref(\"int_payments\")", "compare_expression": "sum(gross_revenue)", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.fct_orders_unequal_agg_cogs.39983bc63a": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unequal_agg_cogs", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unequal_agg_cogs.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unequal_agg_cogs.39983bc63a", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unequal_agg_cogs"], "alias": "fct_orders_unequal_agg_cogs", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unequal_agg_cogs.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.6983821, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unequal_agg_cogs`", "raw_code": "{{ dbt_expectations.test_expect_table_aggregation_to_equal_other_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}, {"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.int_orders", "model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unequal_agg_cogs.sql", "compiled": true, "compiled_code": "\n    with a as (\n        \n    select\n        \n        sum(cogs) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n    \n\n    ),\n    b as (\n        \n    select\n        \n        sum(inbound_shipping_cost) + sum(product_cost) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`int_orders`\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "expect_table_aggregation_to_equal_other_table", "kwargs": {"expression": "sum(cogs)", "compare_model": "ref(\"int_orders\")", "compare_expression": "sum(inbound_shipping_cost) + sum(product_cost)", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.fct_orders_unequal_agg_shipping_amount.f398ff09f4": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_orders_unequal_agg_shipping_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_orders_unequal_agg_shipping_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_orders_unequal_agg_shipping_amount.f398ff09f4", "fqn": ["dbt_analytics_engine", "marts", "fct_orders_unequal_agg_shipping_amount"], "alias": "fct_orders_unequal_agg_shipping_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unequal_agg_shipping_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.702419, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_orders_unequal_agg_shipping_amount`", "raw_code": "{{ dbt_expectations.test_expect_table_aggregation_to_equal_other_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_orders", "package": null, "version": null}, {"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.int_orders", "model.dbt_analytics_engine.fct_orders"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_orders_unequal_agg_shipping_amount.sql", "compiled": true, "compiled_code": "\n    with a as (\n        \n    select\n        \n        sum(shipping_amount) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_orders`\n    \n\n    ),\n    b as (\n        \n    select\n        \n        sum(shipping_amount) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`int_orders`\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_orders", "attached_node": "model.dbt_analytics_engine.fct_orders", "test_metadata": {"name": "expect_table_aggregation_to_equal_other_table", "kwargs": {"expression": "sum(shipping_amount)", "compare_model": "ref(\"int_orders\")", "compare_expression": "sum(shipping_amount)", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.not_null_fct_payment_methods_country_id.b66edb05ed": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_payment_methods_country_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_payment_methods_country_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_payment_methods_country_id.b66edb05ed", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_payment_methods_country_id"], "alias": "not_null_fct_payment_methods_country_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_country_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.705958, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_payment_methods_country_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_country_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\nwhere country_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_id", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_id", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_country_id.b42ed05717": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_payment_methods_country_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_payment_methods_country_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_country_id.b42ed05717", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_payment_methods_country_id"], "alias": "dbt_utils_not_constant_fct_payment_methods_country_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_payment_methods_country_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.707468, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_payment_methods_country_id`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_payment_methods_country_id.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct country_id) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n\n  \n\nhaving count(distinct country_id) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_id", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "country_id", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_payment_methods_unexpected_country_id.63b418f2a9": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_payment_methods_unexpected_country_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_payment_methods_unexpected_country_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_payment_methods_unexpected_country_id.63b418f2a9", "fqn": ["dbt_analytics_engine", "marts", "fct_payment_methods_unexpected_country_id"], "alias": "fct_payment_methods_unexpected_country_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unexpected_country_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.710433, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_payment_methods_unexpected_country_id`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unexpected_country_id.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not country_id >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not country_id <= 22\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_id", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 22, "column_name": "country_id", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_payment_methods_country.eb06966f71": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_payment_methods_country", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_payment_methods_country.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_payment_methods_country.eb06966f71", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_payment_methods_country"], "alias": "not_null_fct_payment_methods_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_country.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.7130492, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_payment_methods_country`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_country.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\nwhere country is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_country.f361beadad": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_payment_methods_country", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_payment_methods_country.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_country.f361beadad", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_payment_methods_country"], "alias": "dbt_utils_not_constant_fct_payment_methods_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_payment_methods_country.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.714229, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_payment_methods_country`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_payment_methods_country.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct country) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n\n  \n\nhaving count(distinct country) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "country", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_payment_methods_order_id.ddee004099": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_payment_methods_order_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_payment_methods_order_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_payment_methods_order_id.ddee004099", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_payment_methods_order_id"], "alias": "not_null_fct_payment_methods_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_order_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.717333, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_payment_methods_order_id`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.unique_fct_payment_methods_order_id.acc4722fd2": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "unique_fct_payment_methods_order_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "unique_fct_payment_methods_order_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.unique_fct_payment_methods_order_id.acc4722fd2", "fqn": ["dbt_analytics_engine", "marts", "unique_fct_payment_methods_order_id"], "alias": "unique_fct_payment_methods_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/unique_fct_payment_methods_order_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.7185311, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`unique_fct_payment_methods_order_id`", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/unique_fct_payment_methods_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select order_id as unique_field\n  from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n  where order_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_order_id.00cc07e79d": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_payment_methods_order_id", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_payment_methods_order_id.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_order_id.00cc07e79d", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_payment_methods_order_id"], "alias": "dbt_utils_not_constant_fct_payment_methods_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_payment_methods_order_id.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.719727, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_payment_methods_order_id`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_payment_methods_order_id.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct order_id) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n\n  \n\nhaving count(distinct order_id) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.relationships_fct_payment_methods_order_id__order_id__ref_int_payments_.05d9a1bed3": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "relationships_fct_payment_methods_order_id__order_id__ref_int_payments_", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "relationships_fct_payment_meth_0683abd124324eb777cc740e1f6a852b.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.relationships_fct_payment_methods_order_id__order_id__ref_int_payments_.05d9a1bed3", "fqn": ["dbt_analytics_engine", "marts", "relationships_fct_payment_methods_order_id__order_id__ref_int_payments_"], "alias": "relationships_fct_payment_meth_0683abd124324eb777cc740e1f6a852b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_payment_meth_0683abd124324eb777cc740e1f6a852b", "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/relationships_fct_payment_meth_0683abd124324eb777cc740e1f6a852b.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "alias": "relationships_fct_payment_meth_0683abd124324eb777cc740e1f6a852b"}, "created_at": 1726254837.7224069, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`relationships_fct_payment_meth_0683abd124324eb777cc740e1f6a852b`", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_payment_meth_0683abd124324eb777cc740e1f6a852b\") }}", "language": "sql", "refs": [{"name": "int_payments", "package": null, "version": null}, {"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.int_payments", "model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/relationships_fct_payment_meth_0683abd124324eb777cc740e1f6a852b.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select order_id as from_field\n    from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n    where order_id is not null\n),\n\nparent as (\n    select order_id as to_field\n    from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`int_payments`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_payments')", "field": "order_id", "column_name": "order_id", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_fct_payment_methods_nb_payments.7a94409e31": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_payment_methods_nb_payments", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_payment_methods_nb_payments.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_payment_methods_nb_payments.7a94409e31", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_payment_methods_nb_payments"], "alias": "not_null_fct_payment_methods_nb_payments", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_nb_payments.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.726004, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_payment_methods_nb_payments`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_nb_payments.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\nwhere nb_payments is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nb_payments", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "nb_payments", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.fct_payment_methods_assert_positive_nb_payments.bcb7a7d8c9": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_payment_methods_assert_positive_nb_payments", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_payment_methods_assert_positive_nb_payments.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_payment_methods_assert_positive_nb_payments.bcb7a7d8c9", "fqn": ["dbt_analytics_engine", "marts", "fct_payment_methods_assert_positive_nb_payments"], "alias": "fct_payment_methods_assert_positive_nb_payments", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_assert_positive_nb_payments.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.7271922, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_payment_methods_assert_positive_nb_payments`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_assert_positive_nb_payments.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n\nwhere not(nb_payments > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nb_payments", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "nb_payments", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_payment_methods_payment_methods.b1f93b15ca": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_payment_methods_payment_methods", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_payment_methods_payment_methods.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_payment_methods_payment_methods.b1f93b15ca", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_payment_methods_payment_methods"], "alias": "not_null_fct_payment_methods_payment_methods", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_payment_methods.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.730245, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_payment_methods_payment_methods`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_payment_methods.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\nwhere payment_methods is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_methods", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_methods", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_fct_payment_methods_order_date.21aeb8313c": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_payment_methods_order_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_payment_methods_order_date.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_payment_methods_order_date.21aeb8313c", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_payment_methods_order_date"], "alias": "not_null_fct_payment_methods_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_order_date.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.7316961, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_payment_methods_order_date`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_order_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\nwhere order_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_date", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_order_date.c02b07ac0e": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_payment_methods_order_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_payment_methods_order_date.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_order_date.c02b07ac0e", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_payment_methods_order_date"], "alias": "dbt_utils_not_constant_fct_payment_methods_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_payment_methods_order_date.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.7331011, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_payment_methods_order_date`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_payment_methods_order_date.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct order_date) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n\n  \n\nhaving count(distinct order_date) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "order_date", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_payment_methods_unexpected_order_date.01981f60c8": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_payment_methods_unexpected_order_date", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_payment_methods_unexpected_order_date.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_payment_methods_unexpected_order_date.01981f60c8", "fqn": ["dbt_analytics_engine", "marts", "fct_payment_methods_unexpected_order_date"], "alias": "fct_payment_methods_unexpected_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unexpected_order_date.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.735769, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_payment_methods_unexpected_order_date`", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unexpected_order_date.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not order_date <= current_datetime()\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "accepted_range", "kwargs": {"max_value": "current_datetime()", "column_name": "order_date", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_payment_methods_order_status.c48b155ca0": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_payment_methods_order_status", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_payment_methods_order_status.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_payment_methods_order_status.c48b155ca0", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_payment_methods_order_status"], "alias": "not_null_fct_payment_methods_order_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_order_status.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.738251, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_payment_methods_order_status`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_order_status.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\nwhere order_status is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_status", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_status", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.fct_payment_methods_unexpected_order_status.35a4bb0b99": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_payment_methods_unexpected_order_status", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_payment_methods_unexpected_order_status.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_payment_methods_unexpected_order_status.35a4bb0b99", "fqn": ["dbt_analytics_engine", "marts", "fct_payment_methods_unexpected_order_status"], "alias": "fct_payment_methods_unexpected_order_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unexpected_order_status.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.7396631, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_payment_methods_unexpected_order_status`", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unexpected_order_status.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        order_status as value_field,\n        count(*) as n_records\n\n    from `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n    group by order_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'completed','failed'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_status", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["completed", "failed"], "column_name": "order_status", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.not_null_fct_payment_methods_total_gross_revenue.afe445581b": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_payment_methods_total_gross_revenue", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_payment_methods_total_gross_revenue.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_payment_methods_total_gross_revenue.afe445581b", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_payment_methods_total_gross_revenue"], "alias": "not_null_fct_payment_methods_total_gross_revenue", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_total_gross_revenue.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.7424588, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_payment_methods_total_gross_revenue`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_total_gross_revenue.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\nwhere total_gross_revenue is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_gross_revenue", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_gross_revenue", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.fct_payment_methods_assert_positive_total_gross_revenue.c0d9bfabd1": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_payment_methods_assert_positive_total_gross_revenue", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_payment_methods_assert_positive_total_gross_revenue.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_payment_methods_assert_positive_total_gross_revenue.c0d9bfabd1", "fqn": ["dbt_analytics_engine", "marts", "fct_payment_methods_assert_positive_total_gross_revenue"], "alias": "fct_payment_methods_assert_positive_total_gross_revenue", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_assert_positive_total_gross_revenue.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.743752, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_payment_methods_assert_positive_total_gross_revenue`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_assert_positive_total_gross_revenue.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n\nwhere not(total_gross_revenue > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_gross_revenue", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "total_gross_revenue", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_payment_methods_total_payment_fees.7bda1ae723": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_payment_methods_total_payment_fees", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_payment_methods_total_payment_fees.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_payment_methods_total_payment_fees.7bda1ae723", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_payment_methods_total_payment_fees"], "alias": "not_null_fct_payment_methods_total_payment_fees", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_total_payment_fees.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.746191, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_payment_methods_total_payment_fees`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_total_payment_fees.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\nwhere total_payment_fees is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_payment_fees", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_payment_fees", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.fct_payment_methods_assert_positive_total_payment_fees.e8836651e3": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_payment_methods_assert_positive_total_payment_fees", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_payment_methods_assert_positive_total_payment_fees.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_payment_methods_assert_positive_total_payment_fees.e8836651e3", "fqn": ["dbt_analytics_engine", "marts", "fct_payment_methods_assert_positive_total_payment_fees"], "alias": "fct_payment_methods_assert_positive_total_payment_fees", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_assert_positive_total_payment_fees.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.747398, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_payment_methods_assert_positive_total_payment_fees`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_assert_positive_total_payment_fees.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n\nwhere not(total_payment_fees > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_payment_fees", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "total_payment_fees", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_payment_methods_amazon_pay_payment_fees.8ccf82be46": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_payment_methods_amazon_pay_payment_fees", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_payment_methods_amazon_pay_payment_fees.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_payment_methods_amazon_pay_payment_fees.8ccf82be46", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_payment_methods_amazon_pay_payment_fees"], "alias": "not_null_fct_payment_methods_amazon_pay_payment_fees", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_amazon_pay_payment_fees.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.750023, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_payment_methods_amazon_pay_payment_fees`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_amazon_pay_payment_fees.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\nwhere amazon_pay_payment_fees is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "amazon_pay_payment_fees", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "amazon_pay_payment_fees", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_amazon_pay_payment_fees.5ca4935050": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_payment_methods_amazon_pay_payment_fees", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_pay_e8311164492a85011b25a15a86e84a09.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_amazon_pay_payment_fees.5ca4935050", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_payment_methods_amazon_pay_payment_fees"], "alias": "dbt_utils_not_constant_fct_pay_e8311164492a85011b25a15a86e84a09", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_constant_fct_pay_e8311164492a85011b25a15a86e84a09", "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_pay_e8311164492a85011b25a15a86e84a09.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "alias": "dbt_utils_not_constant_fct_pay_e8311164492a85011b25a15a86e84a09"}, "created_at": 1726254837.751209, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_pay_e8311164492a85011b25a15a86e84a09`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_constant_fct_pay_e8311164492a85011b25a15a86e84a09\") }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_pay_e8311164492a85011b25a15a86e84a09.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct amazon_pay_payment_fees) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n\n  \n\nhaving count(distinct amazon_pay_payment_fees) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "amazon_pay_payment_fees", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "amazon_pay_payment_fees", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_payment_methods_unexpected_amazon_pay_payment_fees.ee2028ca88": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_payment_methods_unexpected_amazon_pay_payment_fees", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_payment_methods_unexpected_amazon_pay_payment_fees.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_payment_methods_unexpected_amazon_pay_payment_fees.ee2028ca88", "fqn": ["dbt_analytics_engine", "marts", "fct_payment_methods_unexpected_amazon_pay_payment_fees"], "alias": "fct_payment_methods_unexpected_amazon_pay_payment_fees", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unexpected_amazon_pay_payment_fees.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.754026, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_payment_methods_unexpected_amazon_pay_payment_fees`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unexpected_amazon_pay_payment_fees.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n\nwhere not(amazon_pay_payment_fees >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "amazon_pay_payment_fees", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "amazon_pay_payment_fees", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_payment_methods_apple_pay_payment_fees.ca555fc60d": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_payment_methods_apple_pay_payment_fees", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_payment_methods_apple_pay_payment_fees.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_payment_methods_apple_pay_payment_fees.ca555fc60d", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_payment_methods_apple_pay_payment_fees"], "alias": "not_null_fct_payment_methods_apple_pay_payment_fees", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_apple_pay_payment_fees.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.7568839, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_payment_methods_apple_pay_payment_fees`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_apple_pay_payment_fees.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\nwhere apple_pay_payment_fees is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "apple_pay_payment_fees", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "apple_pay_payment_fees", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_apple_pay_payment_fees.e0ab54115b": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_payment_methods_apple_pay_payment_fees", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_pay_813a2b537ee01f456263166ec9a97dbf.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_apple_pay_payment_fees.e0ab54115b", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_payment_methods_apple_pay_payment_fees"], "alias": "dbt_utils_not_constant_fct_pay_813a2b537ee01f456263166ec9a97dbf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_not_constant_fct_pay_813a2b537ee01f456263166ec9a97dbf", "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_pay_813a2b537ee01f456263166ec9a97dbf.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests", "alias": "dbt_utils_not_constant_fct_pay_813a2b537ee01f456263166ec9a97dbf"}, "created_at": 1726254837.758303, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_pay_813a2b537ee01f456263166ec9a97dbf`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_constant_fct_pay_813a2b537ee01f456263166ec9a97dbf\") }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_pay_813a2b537ee01f456263166ec9a97dbf.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct apple_pay_payment_fees) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n\n  \n\nhaving count(distinct apple_pay_payment_fees) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "apple_pay_payment_fees", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "apple_pay_payment_fees", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_payment_methods_unexpected_apple_pay_payment_fees.8d0aed3e47": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_payment_methods_unexpected_apple_pay_payment_fees", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_payment_methods_unexpected_apple_pay_payment_fees.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_payment_methods_unexpected_apple_pay_payment_fees.8d0aed3e47", "fqn": ["dbt_analytics_engine", "marts", "fct_payment_methods_unexpected_apple_pay_payment_fees"], "alias": "fct_payment_methods_unexpected_apple_pay_payment_fees", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unexpected_apple_pay_payment_fees.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.761268, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_payment_methods_unexpected_apple_pay_payment_fees`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unexpected_apple_pay_payment_fees.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n\nwhere not(apple_pay_payment_fees >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "apple_pay_payment_fees", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "apple_pay_payment_fees", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_payment_methods_bitcoin_payment_fees.cf4eee780e": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_payment_methods_bitcoin_payment_fees", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_payment_methods_bitcoin_payment_fees.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_payment_methods_bitcoin_payment_fees.cf4eee780e", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_payment_methods_bitcoin_payment_fees"], "alias": "not_null_fct_payment_methods_bitcoin_payment_fees", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_bitcoin_payment_fees.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.763794, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_payment_methods_bitcoin_payment_fees`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_bitcoin_payment_fees.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\nwhere bitcoin_payment_fees is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bitcoin_payment_fees", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "bitcoin_payment_fees", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_bitcoin_payment_fees.4cfe95cb5e": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_payment_methods_bitcoin_payment_fees", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_payment_methods_bitcoin_payment_fees.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_bitcoin_payment_fees.4cfe95cb5e", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_payment_methods_bitcoin_payment_fees"], "alias": "dbt_utils_not_constant_fct_payment_methods_bitcoin_payment_fees", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_payment_methods_bitcoin_payment_fees.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.765093, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_payment_methods_bitcoin_payment_fees`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_payment_methods_bitcoin_payment_fees.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct bitcoin_payment_fees) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n\n  \n\nhaving count(distinct bitcoin_payment_fees) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bitcoin_payment_fees", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "bitcoin_payment_fees", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_payment_methods_unexpected_bitcoin_payment_fees.2680568c3c": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_payment_methods_unexpected_bitcoin_payment_fees", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_payment_methods_unexpected_bitcoin_payment_fees.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_payment_methods_unexpected_bitcoin_payment_fees.2680568c3c", "fqn": ["dbt_analytics_engine", "marts", "fct_payment_methods_unexpected_bitcoin_payment_fees"], "alias": "fct_payment_methods_unexpected_bitcoin_payment_fees", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unexpected_bitcoin_payment_fees.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.767785, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_payment_methods_unexpected_bitcoin_payment_fees`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unexpected_bitcoin_payment_fees.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n\nwhere not(bitcoin_payment_fees >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bitcoin_payment_fees", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "bitcoin_payment_fees", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_payment_methods_stripe_payment_fees.78f2cdbed9": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_payment_methods_stripe_payment_fees", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_payment_methods_stripe_payment_fees.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_payment_methods_stripe_payment_fees.78f2cdbed9", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_payment_methods_stripe_payment_fees"], "alias": "not_null_fct_payment_methods_stripe_payment_fees", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_stripe_payment_fees.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.770306, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_payment_methods_stripe_payment_fees`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_stripe_payment_fees.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\nwhere stripe_payment_fees is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stripe_payment_fees", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stripe_payment_fees", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_stripe_payment_fees.df8b964557": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_payment_methods_stripe_payment_fees", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_payment_methods_stripe_payment_fees.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_stripe_payment_fees.df8b964557", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_payment_methods_stripe_payment_fees"], "alias": "dbt_utils_not_constant_fct_payment_methods_stripe_payment_fees", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_payment_methods_stripe_payment_fees.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.771512, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_payment_methods_stripe_payment_fees`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_payment_methods_stripe_payment_fees.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct stripe_payment_fees) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n\n  \n\nhaving count(distinct stripe_payment_fees) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stripe_payment_fees", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "stripe_payment_fees", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_payment_methods_unexpected_stripe_payment_fees.09c5a52271": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_payment_methods_unexpected_stripe_payment_fees", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_payment_methods_unexpected_stripe_payment_fees.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_payment_methods_unexpected_stripe_payment_fees.09c5a52271", "fqn": ["dbt_analytics_engine", "marts", "fct_payment_methods_unexpected_stripe_payment_fees"], "alias": "fct_payment_methods_unexpected_stripe_payment_fees", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unexpected_stripe_payment_fees.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.774198, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_payment_methods_unexpected_stripe_payment_fees`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unexpected_stripe_payment_fees.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n\nwhere not(stripe_payment_fees >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stripe_payment_fees", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "stripe_payment_fees", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_payment_methods_amazon_pay_amount.470294cec0": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_payment_methods_amazon_pay_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_payment_methods_amazon_pay_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_payment_methods_amazon_pay_amount.470294cec0", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_payment_methods_amazon_pay_amount"], "alias": "not_null_fct_payment_methods_amazon_pay_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_amazon_pay_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.776766, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_payment_methods_amazon_pay_amount`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_amazon_pay_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\nwhere amazon_pay_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "amazon_pay_amount", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "amazon_pay_amount", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_amazon_pay_amount.7d9e9abbfd": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_payment_methods_amazon_pay_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_payment_methods_amazon_pay_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_amazon_pay_amount.7d9e9abbfd", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_payment_methods_amazon_pay_amount"], "alias": "dbt_utils_not_constant_fct_payment_methods_amazon_pay_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_payment_methods_amazon_pay_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.7779992, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_payment_methods_amazon_pay_amount`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_payment_methods_amazon_pay_amount.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct amazon_pay_amount) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n\n  \n\nhaving count(distinct amazon_pay_amount) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "amazon_pay_amount", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "amazon_pay_amount", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_payment_methods_unexpected_amazon_pay_amount.d41fa1103d": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_payment_methods_unexpected_amazon_pay_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_payment_methods_unexpected_amazon_pay_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_payment_methods_unexpected_amazon_pay_amount.d41fa1103d", "fqn": ["dbt_analytics_engine", "marts", "fct_payment_methods_unexpected_amazon_pay_amount"], "alias": "fct_payment_methods_unexpected_amazon_pay_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unexpected_amazon_pay_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.780551, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_payment_methods_unexpected_amazon_pay_amount`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unexpected_amazon_pay_amount.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n\nwhere not(amazon_pay_amount >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "amazon_pay_amount", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "amazon_pay_amount", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_payment_methods_apple_pay_amount.35570bd1df": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_payment_methods_apple_pay_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_payment_methods_apple_pay_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_payment_methods_apple_pay_amount.35570bd1df", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_payment_methods_apple_pay_amount"], "alias": "not_null_fct_payment_methods_apple_pay_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_apple_pay_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.783427, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_payment_methods_apple_pay_amount`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_apple_pay_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\nwhere apple_pay_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "apple_pay_amount", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "apple_pay_amount", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_apple_pay_amount.269ff4d35e": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_payment_methods_apple_pay_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_payment_methods_apple_pay_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_apple_pay_amount.269ff4d35e", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_payment_methods_apple_pay_amount"], "alias": "dbt_utils_not_constant_fct_payment_methods_apple_pay_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_payment_methods_apple_pay_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.7845912, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_payment_methods_apple_pay_amount`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_payment_methods_apple_pay_amount.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct apple_pay_amount) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n\n  \n\nhaving count(distinct apple_pay_amount) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "apple_pay_amount", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "apple_pay_amount", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_payment_methods_unexpected_apple_pay_amount.d0161e7049": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_payment_methods_unexpected_apple_pay_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_payment_methods_unexpected_apple_pay_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_payment_methods_unexpected_apple_pay_amount.d0161e7049", "fqn": ["dbt_analytics_engine", "marts", "fct_payment_methods_unexpected_apple_pay_amount"], "alias": "fct_payment_methods_unexpected_apple_pay_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unexpected_apple_pay_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.787216, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_payment_methods_unexpected_apple_pay_amount`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unexpected_apple_pay_amount.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n\nwhere not(apple_pay_amount >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "apple_pay_amount", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "apple_pay_amount", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_payment_methods_bitcoin_amount.d7592abe44": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_payment_methods_bitcoin_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_payment_methods_bitcoin_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_payment_methods_bitcoin_amount.d7592abe44", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_payment_methods_bitcoin_amount"], "alias": "not_null_fct_payment_methods_bitcoin_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_bitcoin_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.789888, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_payment_methods_bitcoin_amount`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_bitcoin_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\nwhere bitcoin_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bitcoin_amount", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "bitcoin_amount", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_bitcoin_amount.15818a9c60": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_payment_methods_bitcoin_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_payment_methods_bitcoin_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_bitcoin_amount.15818a9c60", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_payment_methods_bitcoin_amount"], "alias": "dbt_utils_not_constant_fct_payment_methods_bitcoin_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_payment_methods_bitcoin_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.791328, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_payment_methods_bitcoin_amount`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_payment_methods_bitcoin_amount.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct bitcoin_amount) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n\n  \n\nhaving count(distinct bitcoin_amount) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bitcoin_amount", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "bitcoin_amount", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_payment_methods_unexpected_bitcoin_amount.00b3640521": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_payment_methods_unexpected_bitcoin_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_payment_methods_unexpected_bitcoin_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_payment_methods_unexpected_bitcoin_amount.00b3640521", "fqn": ["dbt_analytics_engine", "marts", "fct_payment_methods_unexpected_bitcoin_amount"], "alias": "fct_payment_methods_unexpected_bitcoin_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unexpected_bitcoin_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.79391, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_payment_methods_unexpected_bitcoin_amount`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unexpected_bitcoin_amount.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n\nwhere not(bitcoin_amount >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bitcoin_amount", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "bitcoin_amount", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.not_null_fct_payment_methods_stripe_amount.3e4367e046": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "not_null_fct_payment_methods_stripe_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "not_null_fct_payment_methods_stripe_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.not_null_fct_payment_methods_stripe_amount.3e4367e046", "fqn": ["dbt_analytics_engine", "marts", "not_null_fct_payment_methods_stripe_amount"], "alias": "not_null_fct_payment_methods_stripe_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_stripe_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.796492, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`not_null_fct_payment_methods_stripe_amount`", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/not_null_fct_payment_methods_stripe_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\nwhere stripe_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stripe_amount", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stripe_amount", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": null}}, "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_stripe_amount.9456b323b5": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "dbt_utils_not_constant_fct_payment_methods_stripe_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "dbt_utils_not_constant_fct_payment_methods_stripe_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_stripe_amount.9456b323b5", "fqn": ["dbt_analytics_engine", "marts", "dbt_utils_not_constant_fct_payment_methods_stripe_amount"], "alias": "dbt_utils_not_constant_fct_payment_methods_stripe_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_payment_methods_stripe_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.797699, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`dbt_utils_not_constant_fct_payment_methods_stripe_amount`", "raw_code": "{{ dbt_utils.test_not_constant(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_not_constant", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/dbt_utils_not_constant_fct_payment_methods_stripe_amount.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct stripe_amount) as filler_column\n\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n\n  \n\nhaving count(distinct stripe_amount) = 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stripe_amount", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "not_constant", "kwargs": {"column_name": "stripe_amount", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_payment_methods_unexpected_stripe_amount.d0d4124728": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_payment_methods_unexpected_stripe_amount", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_payment_methods_unexpected_stripe_amount.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_payment_methods_unexpected_stripe_amount.d0d4124728", "fqn": ["dbt_analytics_engine", "marts", "fct_payment_methods_unexpected_stripe_amount"], "alias": "fct_payment_methods_unexpected_stripe_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unexpected_stripe_amount.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.800437, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_payment_methods_unexpected_stripe_amount`", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unexpected_stripe_amount.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n\nwhere not(stripe_amount >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stripe_amount", "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "stripe_amount", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_analytics_engine.fct_payment_methods_unequal_agg_gross_revenue.61f110d7e7": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_payment_methods_unequal_agg_gross_revenue", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_payment_methods_unequal_agg_gross_revenue.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_payment_methods_unequal_agg_gross_revenue.61f110d7e7", "fqn": ["dbt_analytics_engine", "marts", "fct_payment_methods_unequal_agg_gross_revenue"], "alias": "fct_payment_methods_unequal_agg_gross_revenue", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unequal_agg_gross_revenue.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.8029969, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_payment_methods_unequal_agg_gross_revenue`", "raw_code": "{{ dbt_expectations.test_expect_table_aggregation_to_equal_other_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_payments", "package": null, "version": null}, {"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.int_payments", "model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unequal_agg_gross_revenue.sql", "compiled": true, "compiled_code": "\n    with a as (\n        \n    select\n        \n        sum(total_gross_revenue) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n    \n\n    ),\n    b as (\n        \n    select\n        \n        sum(gross_revenue) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`int_payments`\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "expect_table_aggregation_to_equal_other_table", "kwargs": {"expression": "sum(total_gross_revenue)", "compare_model": "ref(\"int_payments\")", "compare_expression": "sum(gross_revenue)", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_expectations"}}, "test.dbt_analytics_engine.fct_payment_methods_unequal_agg_payment_fees.41bf364193": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_dev_failed_tests", "name": "fct_payment_methods_unequal_agg_payment_fees", "resource_type": "test", "package_name": "dbt_analytics_engine", "path": "fct_payment_methods_unequal_agg_payment_fees.sql", "original_file_path": "models/marts/_marts_models.yml", "unique_id": "test.dbt_analytics_engine.fct_payment_methods_unequal_agg_payment_fees.41bf364193", "fqn": ["dbt_analytics_engine", "marts", "fct_payment_methods_unequal_agg_payment_fees"], "alias": "fct_payment_methods_unequal_agg_payment_fees", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "failed_tests", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": 20, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">20"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unequal_agg_payment_fees.sql", "unrendered_config": {"severity": "error", "error_if": ">20", "warn_if": ">1", "limit": 20, "store_failures": true, "schema": "failed_tests"}, "created_at": 1726254837.806319, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_dev_failed_tests`.`fct_payment_methods_unequal_agg_payment_fees`", "raw_code": "{{ dbt_expectations.test_expect_table_aggregation_to_equal_other_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_payments", "package": null, "version": null}, {"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.dbt_analytics_engine.int_payments", "model.dbt_analytics_engine.fct_payment_methods"]}, "compiled_path": "target/compiled/dbt_analytics_engine/models/marts/_marts_models.yml/fct_payment_methods_unequal_agg_payment_fees.sql", "compiled": true, "compiled_code": "\n    with a as (\n        \n    select\n        \n        sum(total_payment_fees) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`fct_payment_methods`\n    \n\n    ),\n    b as (\n        \n    select\n        \n        sum(payment_fee) as expression\n    from\n        `moes-dbt-layer`.`dbt_analytics_engine_dev`.`int_payments`\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_payment_methods", "attached_node": "model.dbt_analytics_engine.fct_payment_methods", "test_metadata": {"name": "expect_table_aggregation_to_equal_other_table", "kwargs": {"expression": "sum(total_payment_fees)", "compare_model": "ref(\"int_payments\")", "compare_expression": "sum(payment_fee)", "model": "{{ get_where_subquery(ref('fct_payment_methods')) }}"}, "namespace": "dbt_expectations"}}}, "sources": {"source.dbt_analytics_engine.raw.customers": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_sources", "name": "customers", "resource_type": "source", "package_name": "dbt_analytics_engine", "path": "models/staging/_src_schemas.yml", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "source.dbt_analytics_engine.raw.customers", "fqn": ["dbt_analytics_engine", "staging", "raw", "customers"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "customers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_sources`.`customers`", "created_at": 1726251875.089519}, "source.dbt_analytics_engine.raw.nps": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_sources", "name": "nps", "resource_type": "source", "package_name": "dbt_analytics_engine", "path": "models/staging/_src_schemas.yml", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "source.dbt_analytics_engine.raw.nps", "fqn": ["dbt_analytics_engine", "staging", "raw", "nps"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "nps", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_loaded_at", "freshness": {"warn_after": {"count": 6, "period": "day"}, "error_after": {"count": 12, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {"order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "is_nps": {"name": "is_nps", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "nps_score": {"name": "nps_score", "description": "", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "nps_date": {"name": "nps_date", "description": "", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_sources`.`nps`", "created_at": 1726251875.1186292}, "source.dbt_analytics_engine.raw.orders": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_sources", "name": "orders", "resource_type": "source", "package_name": "dbt_analytics_engine", "path": "models/staging/_src_schemas.yml", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "source.dbt_analytics_engine.raw.orders", "fqn": ["dbt_analytics_engine", "staging", "raw", "orders"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "orders", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_loaded_at", "freshness": {"warn_after": {"count": 3, "period": "day"}, "error_after": {"count": 6, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {"order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "order_status": {"name": "order_status", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "product_category_id": {"name": "product_category_id", "description": "", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_sources`.`orders`", "created_at": 1726251875.153298}, "source.dbt_analytics_engine.raw.payments": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_sources", "name": "payments", "resource_type": "source", "package_name": "dbt_analytics_engine", "path": "models/staging/_src_schemas.yml", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "source.dbt_analytics_engine.raw.payments", "fqn": ["dbt_analytics_engine", "staging", "raw", "payments"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "payments", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_loaded_at", "freshness": {"warn_after": {"count": 3, "period": "day"}, "error_after": {"count": 6, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {"order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "payment_id": {"name": "payment_id", "description": "", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "payment_method": {"name": "payment_method", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "payment_amount": {"name": "payment_amount", "description": "", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "payment_country_id": {"name": "payment_country_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "payment_status": {"name": "payment_status", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_sources`.`payments`", "created_at": 1726251875.1913211}, "source.dbt_analytics_engine.raw.returns": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_sources", "name": "returns", "resource_type": "source", "package_name": "dbt_analytics_engine", "path": "models/staging/_src_schemas.yml", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "source.dbt_analytics_engine.raw.returns", "fqn": ["dbt_analytics_engine", "staging", "raw", "returns"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "returns", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_loaded_at", "freshness": {"warn_after": {"count": 6, "period": "day"}, "error_after": {"count": 12, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {"order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "return_id": {"name": "return_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "is_returned": {"name": "is_returned", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "return_date": {"name": "return_date", "description": "", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "return_reason": {"name": "return_reason", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_sources`.`returns`", "created_at": 1726251875.2179031}, "source.dbt_analytics_engine.raw.shipping": {"database": "moes-dbt-layer", "schema": "dbt_analytics_engine_sources", "name": "shipping", "resource_type": "source", "package_name": "dbt_analytics_engine", "path": "models/staging/_src_schemas.yml", "original_file_path": "models/staging/_src_schemas.yml", "unique_id": "source.dbt_analytics_engine.raw.shipping", "fqn": ["dbt_analytics_engine", "staging", "raw", "shipping"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "shipping", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_loaded_at", "freshness": {"warn_after": {"count": 3, "period": "day"}, "error_after": {"count": 6, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {"order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "shipping_id": {"name": "shipping_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "is_shipped": {"name": "is_shipped", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "shipping_date": {"name": "shipping_date", "description": "", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "shipping_amount": {"name": "shipping_amount", "description": "", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`moes-dbt-layer`.`dbt_analytics_engine_sources`.`shipping`", "created_at": 1726251875.243913}}, "macros": {"macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.864458, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.864671, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.864929, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.869204, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.869678, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.8698041, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.8699431, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.87008, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.8702211, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.870388, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.870642, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.870794, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.8711638, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.871514, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.8721101, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.872268, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.8725219, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.872876, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.8730218, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.873688, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.874219, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = bigquery__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.874942, "supported_languages": ["sql"]}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.879945, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n{%- set raw_partition_by = config.get('partition_by', none) -%}\n{%- set raw_cluster_by = config.get('cluster_by', none) -%}\n{%- set enable_list_inference = config.get('enable_list_inference', true) -%}\n{%- set intermediate_format = config.get('intermediate_format', none) -%}\n\n{%- set partition_config = adapter.parse_partition_by(raw_partition_by) %}\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\nspark.conf.set(\"enableListInference\", \"{{ enable_list_inference }}\")\n{% if intermediate_format %}\nspark.conf.set(\"intermediateFormat\", \"{{ intermediate_format }}\")\n{% endif %}\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"indirect\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  {%- if partition_config is not none %}\n  {%- if partition_config.data_type | lower in ('date','timestamp','datetime') %}\n  .option(\"partitionField\", \"{{- partition_config.field -}}\") \\\n  {%- if partition_config.granularity is not none %}\n  .option(\"partitionType\", \"{{- partition_config.granularity| upper -}}\") \\\n  {%- endif %}\n  {%- endif %}\n  {%- endif %}\n  {%- if raw_cluster_by is not none %}\n  .option(\"clusteredFields\", \"{{- raw_cluster_by | join(',') -}}\") \\\n  {%- endif %}\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.88127, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(ref_table.get('package'), ref_table.name, version=ref_table.get('version'))) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.882693, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.885115, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.8854349, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.886241, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.886941, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy != 'insert_overwrite' %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.891247, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.8917701, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.891961, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.892124, "supported_languages": null}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.892353, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.892514, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set avoid_require_partition_filter = predicate_for_avoid_require_partition_filter() -%}\n    {%- if avoid_require_partition_filter is not none -%}\n        {% do predicates.append(avoid_require_partition_filter) %}\n    {%- endif -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.893975, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.894901, "supported_languages": null}, "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter": {"name": "predicate_for_avoid_require_partition_filter", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter", "macro_sql": "{% macro predicate_for_avoid_require_partition_filter(target='DBT_INTERNAL_DEST') %}\n\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- set predicate = none -%}\n\n    {% if partition_config and config.get('require_partition_filter') -%}\n        {%- set partition_field = partition_config.time_partitioning_field() if partition_config.time_ingestion_partitioning else partition_config.field -%}\n        {% set predicate %}\n            (\n                `{{ target }}`.`{{ partition_field }}` is null\n                or `{{ target }}`.`{{ partition_field }}` is not null\n            )\n        {% endset %}\n    {%- endif -%}\n\n    {{ return(predicate) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.8955898, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.898985, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.data_type == 'int64' %}\n      {% set partition = partition | as_text %}\n    {% elif partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.900394, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9009988, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif %}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.90209, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {%- if tmp_relation_exists is false -%}\n  {# We run temp table creation in a separated script to move to partitions copy if it doesn't already exist #}\n    {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n      {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n    }}\n    {%- endcall %}\n  {%- endif -%}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.902843, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9040692, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.905688, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.906133, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.906409, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9071229, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.907507, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n    {% do adapter.drop_relation(relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.907701, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/options.sql", "original_file_path": "macros/relations/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.908164, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/cluster.sql", "original_file_path": "macros/relations/cluster.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.90869, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9089038, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/partition.sql", "original_file_path": "macros/relations/partition.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.909846, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_materialized_view": {"name": "bigquery__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_materialized_view", "macro_sql": "{% macro bigquery__drop_materialized_view(relation) %}\n    drop materialized view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.910014, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql": {"name": "bigquery__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_replace_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create or replace materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.910708, "supported_languages": null}, "macro.dbt_bigquery.bigquery__refresh_materialized_view": {"name": "bigquery__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_bigquery.bigquery__refresh_materialized_view", "macro_sql": "{% macro bigquery__refresh_materialized_view(relation) %}\n    call bq.refresh_materialized_view('{{ relation.database }}.{{ relation.schema }}.{{ relation.identifier }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.910958, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql": {"name": "bigquery__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n    {% else %}\n\n        alter materialized view {{ relation }}\n            set {{ bigquery_options(configuration_changes.options.context.as_ddl_dict()) }}\n\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.911621, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes": {"name": "bigquery__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes", "macro_sql": "{% macro bigquery__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = adapter.describe_relation(existing_relation) %}\n    {% set _configuration_changes = existing_relation.materialized_view_config_changeset(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.911948, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql": {"name": "bigquery__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_create_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.912619, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_table": {"name": "bigquery__drop_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_table", "macro_sql": "{% macro bigquery__drop_table(relation) %}\n    drop table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.912776, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/options.sql", "original_file_path": "macros/relations/table/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.913103, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_table_sql": {"name": "bigquery__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_table_sql", "macro_sql": "{%- macro bigquery__get_rename_table_sql(relation, new_name) -%}\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9133, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_view": {"name": "bigquery__drop_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_view", "macro_sql": "{% macro bigquery__drop_view(relation) %}\n    drop view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.913543, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_view": {"name": "bigquery__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_view", "macro_sql": "{% macro bigquery__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt_bigquery.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9154592, "supported_languages": null}, "macro.dbt_bigquery.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.915683, "supported_languages": null}, "macro.dbt_bigquery.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.915927, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/options.sql", "original_file_path": "macros/relations/view/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.91622, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_view_sql": {"name": "bigquery__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_view_sql", "macro_sql": "{%- macro bigquery__get_rename_view_sql(relation, new_name) -%}\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9164102, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog_relations": {"name": "bigquery__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_relation.sql", "original_file_path": "macros/catalog/by_relation.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog_relations", "macro_sql": "{% macro bigquery__get_catalog_relations(information_schema, relations) -%}\n\n    {%- if (relations | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards_stage as ({{ _bigquery__get_table_shards_sql(information_schema) }}),\n                table_shards as (\n                    select * from table_shards_stage\n                    where (\n                        {%- for relation in relations -%}\n                            (\n                                upper(table_schema) = upper('{{ relation.schema }}')\n                            and upper(table_name) = upper('{{ relation.identifier }}')\n                            )\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9179862, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_shards_sql": {"name": "_bigquery__get_table_shards_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro_sql": "{% macro _bigquery__get_table_shards_sql(information_schema) %}\n    select\n        tables.project_id as table_catalog,\n        tables.dataset_id as table_schema,\n        coalesce(REGEXP_EXTRACT(tables.table_id, '^(.+)[0-9]{8}$'), tables.table_id) as table_name,\n        tables.table_id as shard_name,\n        REGEXP_EXTRACT(tables.table_id, '^.+([0-9]{8})$') as shard_index,\n        REGEXP_CONTAINS(tables.table_id, '^.+[0-9]{8}$') and tables.type = 1 as is_date_shard,\n        case\n            when materialized_views.table_name is not null then 'materialized view'\n            when tables.type = 1 then 'table'\n            when tables.type = 2 then 'view'\n            else 'external'\n        end as table_type,\n        tables.type = 1 as is_table,\n        JSON_VALUE(table_description.option_value) as table_comment,\n        tables.size_bytes,\n        tables.row_count\n    from {{ information_schema.replace(information_schema_view='__TABLES__') }} tables\n    left join {{ information_schema.replace(information_schema_view='MATERIALIZED_VIEWS') }} materialized_views\n        on materialized_views.table_catalog = tables.project_id\n        and materialized_views.table_schema = tables.dataset_id\n        and materialized_views.table_name = tables.table_id\n    left join {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }} table_description\n        on table_description.table_catalog = tables.project_id\n        and table_description.table_schema = tables.dataset_id\n        and table_description.table_name = tables.table_id\n        and table_description.option_name = 'description'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9212449, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_tables_sql": {"name": "_bigquery__get_tables_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_tables_sql", "macro_sql": "{% macro _bigquery__get_tables_sql() %}\n    select distinct\n        table_catalog,\n        table_schema,\n        table_name,\n        is_date_shard,\n        table_type,\n        is_table,\n        table_comment\n    from table_shards\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.921352, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_stats_sql": {"name": "_bigquery__get_table_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro_sql": "{% macro _bigquery__get_table_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        table_name,\n        max(shard_name) as latest_shard_name,\n        min(shard_index) as shard_min,\n        max(shard_index) as shard_max,\n        count(shard_index) as shard_count,\n        sum(size_bytes) as size_bytes,\n        sum(row_count) as row_count\n    from table_shards\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.921462, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_columns_sql": {"name": "_bigquery__get_columns_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_columns_sql", "macro_sql": "{% macro _bigquery__get_columns_sql(information_schema) %}\n    select\n        columns.table_catalog,\n        columns.table_schema,\n        columns.table_name as shard_name,\n        coalesce(paths.field_path, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields\n        -- BQ does not treat these nested properties as independent fields\n        row_number() over (\n            partition by\n                columns.table_catalog,\n                columns.table_schema,\n                columns.table_name\n            order by\n                columns.ordinal_position,\n                paths.field_path\n        ) as column_index,\n        coalesce(paths.data_type, '<unknown>') as column_type,\n        paths.description as column_comment,\n        case when columns.is_partitioning_column = 'YES' then 1 else 0 end as is_partitioning_column,\n        case when columns.is_partitioning_column = 'YES' then paths.field_path end as partition_column,\n        case when columns.clustering_ordinal_position is not null then 1 else 0 end as is_clustering_column,\n        case when columns.clustering_ordinal_position is not null then paths.field_path end as cluster_column,\n        columns.clustering_ordinal_position\n    from {{ information_schema.replace(information_schema_view='COLUMNS') }} columns\n    join {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }} paths\n        on paths.table_catalog = columns.table_catalog\n        and paths.table_schema = columns.table_schema\n        and paths.table_name = columns.table_name\n        and paths.column_name = columns.column_name\n    where columns.ordinal_position is not null\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.921789, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_column_stats_sql": {"name": "_bigquery__get_column_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro_sql": "{% macro _bigquery__get_column_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        shard_name,\n        max(is_partitioning_column) = 1 as is_partitioned,\n        max(partition_column) as partition_column,\n        max(is_clustering_column) = 1 as is_clustered,\n        array_to_string(\n            array_agg(\n                cluster_column ignore nulls\n                order by clustering_ordinal_position\n            ), ', '\n        ) as clustering_columns\n    from columns\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.921912, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_extended_catalog_sql": {"name": "_bigquery__get_extended_catalog_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro_sql": "{% macro _bigquery__get_extended_catalog_sql() %}\n    select\n        tables.table_catalog as table_database,\n        tables.table_schema,\n        case\n            when tables.is_date_shard then concat(tables.table_name, '*')\n            else tables.table_name\n        end as table_name,\n        tables.table_type,\n        tables.table_comment,\n        -- coalesce column metadata fields to ensure they are non-null for catalog generation\n        -- external table columns are not present in COLUMN_FIELD_PATHS\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        coalesce(columns.column_index, 1) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        coalesce(columns.column_comment, '') as column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_stats.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        tables.is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_stats.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        tables.is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_stats.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        tables.is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        table_stats.row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        tables.is_table as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        table_stats.size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        tables.is_table as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        column_stats.partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        column_stats.is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        column_stats.clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        column_stats.is_clustered as `stats__clustering_fields__include`\n\n    from tables\n    join table_stats\n        on table_stats.table_catalog = tables.table_catalog\n        and table_stats.table_schema = tables.table_schema\n        and table_stats.table_name = tables.table_name\n    left join column_stats\n        on column_stats.table_catalog = tables.table_catalog\n        and column_stats.table_schema = tables.table_schema\n        and column_stats.shard_name = table_stats.latest_shard_name\n    left join columns\n        on columns.table_catalog = tables.table_catalog\n        and columns.table_schema = tables.table_schema\n        and columns.shard_name = table_stats.latest_shard_name\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.922237, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_schema.sql", "original_file_path": "macros/catalog/by_schema.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n    {%- if (schemas | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards as (\n                    {{ _bigquery__get_table_shards_sql(information_schema) }}\n                    where (\n                        {%- for schema in schemas -%}\n                            upper(tables.dataset_id) = upper('{{ schema }}')\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.923603, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.923727, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.92398, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.924171, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.924371, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.92446, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9245708, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9248462, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.925793, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.926451, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.926644, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9271748, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.927447, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9278889, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.928416, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n{%- if type.lower().startswith('array') and field is iterable and (field is not string and field is not mapping) and field | length > 0 -%}\n    {#-- Extract nested type from 'array<nested_type>' --#}\n    {% set nested_type = type.lower()[6:-1] %}\n    {#-- BigQuery does not support direct casts to arrays. instead, each element must be cast individually + reaggregated into an array --#}\n    {%- if cast_from_string_unsupported_for(nested_type)  %}\n        (select array_agg(safe_cast(i as {{ nested_type }})) from unnest([\n            {%- for nested_field in field %}\n                {{ nested_field.strip('\"').strip(\"'\") }}{{ ',' if not loop.last }}\n            {%- endfor %}\n        ]) i)\n    {%- else -%}\n        (select array_agg(safe_cast(i as {{nested_type}})) from unnest({{field}}) i)\n    {%- endif -%}\n\n{%- elif type.lower() == 'json' and field is mapping -%}\n    safe_cast(json {{ dbt.string_literal(tojson(field)) }} as json)\n{%- elif cast_from_string_unsupported_for(type) and field is string -%}\n    safe_cast({{field.strip('\"').strip(\"'\")}} as {{type}})\n{%- else -%}\n    safe_cast({{field}} as {{type}})\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.cast_from_string_unsupported_for", "macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9300601, "supported_languages": null}, "macro.dbt_bigquery.cast_from_string_unsupported_for": {"name": "cast_from_string_unsupported_for", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.cast_from_string_unsupported_for", "macro_sql": "{% macro cast_from_string_unsupported_for(type) %}\n    {{ return(type.lower().startswith('struct') or type.lower() == 'geography') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9303071, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.930492, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9306922, "supported_languages": null}, "macro.dbt_bigquery.bigquery__string_literal": {"name": "bigquery__string_literal", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/string_literal.sql", "original_file_path": "macros/utils/string_literal.sql", "unique_id": "macro.dbt_bigquery.bigquery__string_literal", "macro_sql": "{%- macro bigquery__string_literal(value) -%}\n    '''{{ value }}'''\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9308429, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.931036, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.931187, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.931869, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9320629, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.932395, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9326248, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9334028, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9336698, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.933938, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_subquery_sql": {"name": "bigquery__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_subquery_sql", "macro_sql": "{% macro bigquery__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false and current_timestamp() = current_timestamp()\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.934261, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.934527, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.935715, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.935934, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.936095, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9362528, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9364119, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.936833, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.937145, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9374652, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.937956, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.938275, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.942299, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.942561, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9427998, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.94358, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9437592, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.943941, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.94544, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.946898, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.951881, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.952202, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.952389, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.952488, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9526489, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.952783, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.953011, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.953964, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.954176, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.954446, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.954915, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9621692, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.965226, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.966509, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9668548, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.967087, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.967752, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.968181, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9686022, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.970527, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.976382, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.976825, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.977108, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.978614, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.978873, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.979595, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.98287, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.986136, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.98797, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.988574, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.9892879, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.989551, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.990346, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.998137, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233317.999956, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.000254, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0013509, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.001654, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.002381, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.003084, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.004087, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.004351, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.004562, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0048928, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0051, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.005427, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.005641, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.005934, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.006144, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.006316, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.006623, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0124989, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.019378, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.02079, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0220811, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0230231, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.023288, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.023419, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.023747, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0239491, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0282738, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0318348, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0378199, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.038791, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.03905, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.039593, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.039812, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0399659, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.040128, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.04026, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.040441, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.040575, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.041109, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.041321, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0427032, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.043178, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.043595, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0441961, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0444858, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.044801, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0452402, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0455208, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.046349, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.046774, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0469792, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.047203, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.047416, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.048353, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0497332, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.050161, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0504441, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.050742, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0509791, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.05134, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.051577, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0523882, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.05286, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0531058, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.05344, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.053833, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.054131, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.054678, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.055169, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.055542, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0557718, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.056053, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.056193, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.056499, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.056736, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0570822, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0572338, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.057547, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0577128, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.058409, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.05862, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.058928, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0590951, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0594041, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0595682, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.060724, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.06086, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.061431, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0616121, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.061764, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.063224, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.format_column", "macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.063639, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0640142, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0642939, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0644338, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.064736, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.064918, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0652301, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.065392, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.066357, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.066567, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.06704, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.067797, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0683022, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.06851, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0686998, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0689752, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.069112, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.070107, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.070288, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.071584, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.071806, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.072072, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0723772, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0725381, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.073, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.07318, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.073382, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0738611, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.074256, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0746062, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.074888, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.07552, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0771542, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.077784, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.078099, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0802271, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0815759, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0823832, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0826418, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.082892, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.082981, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.083837, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.084481, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0847402, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0851672, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.085537, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0858529, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.086215, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.086401, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0866728, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.08681, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.087757, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.088203, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0884101, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.088968, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.089252, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.089375, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.089749, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.090016, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0902631, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.090351, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.090639, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.090796, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0911229, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.091276, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.092018, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0924659, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.092844, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.093027, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.09334, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.093496, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.093786, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.09396, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.094236, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.094409, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0947142, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.094858, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.095135, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.095318, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0956328, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.095784, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.096054, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.096169, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.097209, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.097378, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0975602, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0977302, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0979068, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0980759, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0982552, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.098449, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0986292, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.098798, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.098977, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.099143, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.099325, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.099481, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.0997891, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.100016, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.100286, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1004028, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1007822, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.101078, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.101244, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.101853, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.102039, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.10229, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.102598, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1027431, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1031559, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1034172, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1037152, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.103866, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1042821, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1044831, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.104664, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1048691, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.10542, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1056662, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.105828, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.105946, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.106125, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.106213, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.106396, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.10658, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.107553, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.107706, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.107886, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.108323, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.108536, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1086879, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.10886, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.109003, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.111399, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1115808, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1118221, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.112132, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.112468, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.112818, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.113027, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.113227, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1135008, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.114109, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1143801, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.114552, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1150222, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1154711, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.115788, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.116041, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1180701, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.118206, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.118392, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1185222, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1188962, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.119104, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.119238, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.119741, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.119974, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.120219, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.120447, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1206982, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.121433, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1216471, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.121919, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1221719, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.123422, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.12387, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.124074, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ compiled_code }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.124287, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.125057, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1252449, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1254709, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.125655, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.125947, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1639411, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.168184, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.168481, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.168716, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.169004, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.169201, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1693802, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.169585, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.169846, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.170082, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.170412, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1706219, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.170811, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1710248, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.171208, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1713972, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1715689, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.171795, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1720629, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.174651, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.174874, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.175225, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1754649, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1756868, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1758878, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1771672, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.177556, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.177758, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.178132, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.178389, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1790988, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1793752, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.180317, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.184217, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.184834, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.186054, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.186294, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1864011, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.188307, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1884859, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1893802, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.189831, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.190465, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.190994, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.191082, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.191658, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.191941, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.192287, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.19262, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1930351, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.193631, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.194178, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1949, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.195275, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.195646, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.196903, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.198035, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.1990342, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.200199, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2009401, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.201327, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.202146, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.203063, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.203548, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.204045, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.204741, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.205267, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.205908, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.206414, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.207156, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2080069, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.208724, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.209435, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2100549, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.210434, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.210885, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2112792, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.212066, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.21297, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.214017, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2150211, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2172868, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.221642, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.222286, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.222616, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2267368, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.228417, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.228719, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.228906, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2293901, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2296991, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2299142, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2302039, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2303958, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.231074, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.232009, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.232822, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2334669, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.233734, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.23414, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2345731, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.235269, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2356212, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2360032, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.236801, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.237726, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.238708, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.239158, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2393658, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.239935, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.24073, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2416599, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.242118, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.242422, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.243923, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2455192, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.247036, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.248765, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.249113, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.249265, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.253216, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.256955, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2572958, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.25757, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.258643, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2588968, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.259089, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2593, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.259488, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.259679, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.259874, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2603111, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.260582, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.261009, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2616189, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.261995, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.262356, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.266232, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2666361, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.267492, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.268289, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.268851, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2701812, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2718341, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.27307, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.27399, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.274543, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.275446, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.276397, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.276903, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.27712, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.277569, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.278217, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.278738, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2794418, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.280093, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.280257, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.280419, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.280579, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2811751, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2820659, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.283293, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2836008, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.284211, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.285089, "supported_languages": null}, "macro.audit_helper.compare_which_query_columns_differ": {"name": "compare_which_query_columns_differ", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_which_query_columns_differ.sql", "original_file_path": "macros/compare_which_query_columns_differ.sql", "unique_id": "macro.audit_helper.compare_which_query_columns_differ", "macro_sql": "{% macro compare_which_query_columns_differ(a_query, b_query, primary_key_columns=[], columns=[], event_time=None) %}\n    {{ return(adapter.dispatch('compare_which_query_columns_differ', 'audit_helper')(a_query, b_query, primary_key_columns, columns, event_time)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_which_query_columns_differ"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.288212, "supported_languages": null}, "macro.audit_helper.default__compare_which_query_columns_differ": {"name": "default__compare_which_query_columns_differ", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_which_query_columns_differ.sql", "original_file_path": "macros/compare_which_query_columns_differ.sql", "unique_id": "macro.audit_helper.default__compare_which_query_columns_differ", "macro_sql": "{% macro default__compare_which_query_columns_differ(a_query, b_query, primary_key_columns, columns, event_time) %}\n    {% set columns = audit_helper._ensure_all_pks_are_in_column_set(primary_key_columns, columns) %}\n    {% if event_time %}\n        {% set event_time_props = audit_helper._get_comparison_bounds(event_time) %}\n    {% endif %}\n\n    {% set joined_cols = columns | join (\", \") %}\n\n        with a as (\n            select \n                {{ joined_cols }},\n                {{ audit_helper._generate_null_safe_surrogate_key(primary_key_columns) }} as dbt_audit_surrogate_key\n            from ({{ a_query }}) as a_subq\n            {{ audit_helper.event_time_filter(event_time_props) }}\n        ),\n        b as (\n            select \n                {{ joined_cols }},\n                {{ audit_helper._generate_null_safe_surrogate_key(primary_key_columns) }} as dbt_audit_surrogate_key\n            from ({{ b_query }}) as b_subq\n            {{ audit_helper.event_time_filter(event_time_props) }}\n        ),\n\n        calculated as (\n            select \n                {% for column in columns %}\n                    {% set quoted_column = adapter.quote(column) %}\n                    {% set compare_statement %}\n                        (\n                            (a.{{ quoted_column }} != b.{{ quoted_column }})\n                            or (a.{{ quoted_column }} is null and b.{{ quoted_column }} is not null)\n                            or (a.{{ quoted_column }} is not null and b.{{ quoted_column }} is null)\n                        )\n                    {% endset %}\n                \n                {{ dbt.bool_or(compare_statement) }} as {{ column | lower }}_has_difference\n\n                {%- if not loop.last %}, {% endif %}\n                {% endfor %}\n            from a\n            inner join b on a.dbt_audit_surrogate_key = b.dbt_audit_surrogate_key\n        )\n\n    {% for column in columns %}\n    \n    select \n        '{{ column }}' as column_name, \n        {{ column | lower }}_has_difference as has_difference\n    \n    from calculated\n\n    {% if not loop.last %}\n        \n    union all \n\n    {% endif %}\n\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._ensure_all_pks_are_in_column_set", "macro.audit_helper._get_comparison_bounds", "macro.audit_helper._generate_null_safe_surrogate_key", "macro.audit_helper.event_time_filter", "macro.dbt.bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.289631, "supported_languages": null}, "macro.audit_helper.compare_and_classify_relation_rows": {"name": "compare_and_classify_relation_rows", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_and_classify_relation_rows.sql", "original_file_path": "macros/compare_and_classify_relation_rows.sql", "unique_id": "macro.audit_helper.compare_and_classify_relation_rows", "macro_sql": "{% macro compare_and_classify_relation_rows(a_relation, b_relation, primary_key_columns=[], columns=None, event_time=None, sample_limit=20) %}\n    {%- if not columns -%}\n        {%- set columns = audit_helper._get_intersecting_columns_from_relations(a_relation, b_relation) -%}\n    {%- endif -%}\n\n    {{ \n        audit_helper.compare_and_classify_query_results(\n            \"select * from \" ~ a_relation,\n            \"select * from \" ~ b_relation,\n            primary_key_columns,\n            columns,\n            event_time,\n            sample_limit\n        )\n    }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._get_intersecting_columns_from_relations", "macro.audit_helper.compare_and_classify_query_results"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.29031, "supported_languages": null}, "macro.audit_helper.compare_which_relation_columns_differ": {"name": "compare_which_relation_columns_differ", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_which_relation_columns_differ.sql", "original_file_path": "macros/compare_which_relation_columns_differ.sql", "unique_id": "macro.audit_helper.compare_which_relation_columns_differ", "macro_sql": "{% macro compare_which_relation_columns_differ(a_relation, b_relation, primary_key_columns=[], columns=[], event_time=None) %}\n    {%- if not columns -%}\n        {%- set columns = audit_helper._get_intersecting_columns_from_relations(a_relation, b_relation) -%}\n    {%- endif -%}\n\n    {{ \n        audit_helper.compare_which_query_columns_differ(\n            \"select * from \" ~ a_relation,\n            \"select * from \" ~ b_relation,\n            primary_key_columns,\n            columns,\n            event_time\n        )\n    }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._get_intersecting_columns_from_relations", "macro.audit_helper.compare_which_query_columns_differ"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.290933, "supported_languages": null}, "macro.audit_helper.compare_row_counts": {"name": "compare_row_counts", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_row_counts.sql", "original_file_path": "macros/compare_row_counts.sql", "unique_id": "macro.audit_helper.compare_row_counts", "macro_sql": "{% macro compare_row_counts(a_relation, b_relation) %}\n  {{ return(adapter.dispatch('compare_row_counts', 'audit_helper')(a_relation, b_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_row_counts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.291363, "supported_languages": null}, "macro.audit_helper.default__compare_row_counts": {"name": "default__compare_row_counts", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_row_counts.sql", "original_file_path": "macros/compare_row_counts.sql", "unique_id": "macro.audit_helper.default__compare_row_counts", "macro_sql": "{% macro default__compare_row_counts(a_relation, b_relation) %}\n\n        select\n            '{{ a_relation }}' as relation_name,\n            count(*) as total_records\n        from {{ a_relation }}\n\n        union all\n\n        select\n            '{{ b_relation }}' as relation_name,\n            count(*) as total_records\n        from {{ b_relation }}\n  \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.291573, "supported_languages": null}, "macro.audit_helper.compare_relations": {"name": "compare_relations", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relations.sql", "original_file_path": "macros/compare_relations.sql", "unique_id": "macro.audit_helper.compare_relations", "macro_sql": "{% macro compare_relations(a_relation, b_relation, exclude_columns=[], primary_key=None, summarize=true, limit=None) %}\n\n{% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\n{% set column_selection %}\n\n  {% for column_name in column_names %} \n    {{ adapter.quote(column_name) }} \n    {% if not loop.last %}\n      , \n    {% endif %} \n  {% endfor %}\n\n{% endset %}\n\n{% set a_query %}\nselect\n\n  {{ column_selection }}\n\nfrom {{ a_relation }}\n{% endset %}\n\n{% set b_query %}\nselect\n\n  {{ column_selection }}\n\nfrom {{ b_relation }}\n{% endset %}\n\n{{ audit_helper.compare_queries(a_query, b_query, primary_key, summarize, limit) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation", "macro.audit_helper.compare_queries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2926688, "supported_languages": null}, "macro.audit_helper.compare_and_classify_query_results": {"name": "compare_and_classify_query_results", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_and_classify_query_results.sql", "original_file_path": "macros/compare_and_classify_query_results.sql", "unique_id": "macro.audit_helper.compare_and_classify_query_results", "macro_sql": "{% macro compare_and_classify_query_results(a_query, b_query, primary_key_columns=[], columns=[], event_time=None, sample_limit=20) %}\n    \n    {% set columns = audit_helper._ensure_all_pks_are_in_column_set(primary_key_columns, columns) %}\n    {% set joined_cols = columns | join(\", \") %}\n\n    {% if event_time %}\n        {% set event_time_props = audit_helper._get_comparison_bounds(a_query, b_query, event_time) %}\n    {% endif %}\n\n    with \n\n    {{ audit_helper._generate_set_results(a_query, b_query, primary_key_columns, columns, event_time_props)}}\n    \n    ,\n\n    all_records as (\n\n        select\n            *,\n            true as dbt_audit_in_a,\n            true as dbt_audit_in_b\n        from a_intersect_b\n\n        union all\n\n        select\n            *,\n            true as dbt_audit_in_a,\n            false as dbt_audit_in_b\n        from a_except_b\n\n        union all\n\n        select\n            *,\n            false as dbt_audit_in_a,\n            true as dbt_audit_in_b\n        from b_except_a\n\n    ),\n\n    classified as (\n        select \n            *,\n            {{ audit_helper._classify_audit_row_status() }} as dbt_audit_row_status\n        from all_records\n    ),\n\n    final as (\n        select \n            *,\n            {{ audit_helper._count_num_rows_in_status() }} as dbt_audit_num_rows_in_status,\n            -- using dense_rank so that modified rows (which have a full row for both the left and right side) both get picked up in the sample. \n            -- For every other type this is equivalent to a row_number()\n            dense_rank() over (partition by dbt_audit_row_status order by dbt_audit_surrogate_key, dbt_audit_pk_row_num) as dbt_audit_sample_number\n        from classified\n    )\n\n    select * from final\n    {% if sample_limit %}\n        where dbt_audit_sample_number <= {{ sample_limit }}\n    {% endif %}\n    order by dbt_audit_row_status, dbt_audit_sample_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._ensure_all_pks_are_in_column_set", "macro.audit_helper._get_comparison_bounds", "macro.audit_helper._generate_set_results", "macro.audit_helper._classify_audit_row_status", "macro.audit_helper._count_num_rows_in_status"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2943208, "supported_languages": null}, "macro.audit_helper.compare_all_columns": {"name": "compare_all_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_all_columns.sql", "original_file_path": "macros/compare_all_columns.sql", "unique_id": "macro.audit_helper.compare_all_columns", "macro_sql": "{% macro compare_all_columns( a_relation, b_relation, primary_key,  exclude_columns=[],summarize=true ) -%}\n  {{ return(adapter.dispatch('compare_all_columns', 'audit_helper')( a_relation, b_relation, primary_key, exclude_columns, summarize )) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_all_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2960792, "supported_languages": null}, "macro.audit_helper.default__compare_all_columns": {"name": "default__compare_all_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_all_columns.sql", "original_file_path": "macros/compare_all_columns.sql", "unique_id": "macro.audit_helper.default__compare_all_columns", "macro_sql": "{% macro default__compare_all_columns( a_relation, b_relation, primary_key, exclude_columns=[], summarize=true ) -%}\n\n  {% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\n  {# We explictly select the primary_key and rename to support any sql as the primary_key -\n  a column or concatenated columns. this assumes that a_relation and b_relation do not already \n  have a field named dbt_audit_helper_pk #}\n\n  {% set a_query %}      \n    select\n      *,\n      {{ primary_key }} as dbt_audit_helper_pk\n    from {{ a_relation }}\n  {% endset %}\n\n  {% set b_query %}\n    select\n      *,\n      {{ primary_key }} as dbt_audit_helper_pk\n    from {{ b_relation }}\n  {% endset %}\n\n  {% for column_name in column_names %}\n\n    {% set audit_query = audit_helper.compare_column_values_verbose(\n      a_query=a_query,\n      b_query=b_query,\n      primary_key=\"dbt_audit_helper_pk\",\n      column_to_compare=column_name\n    ) %}\n\n    /*  Create a query combining results from all columns so that the user, or the \n    test suite, can examine all at once.\n    */\n    \n    {% if loop.first %}\n\n    /*  Create a CTE that wraps all the unioned subqueries that are created\n        in this for loop\n    */\n      with main as ( \n\n    {% endif %}\n\n    /*  There will be one audit_query subquery for each column\n    */\n    ( {{ audit_query }} )\n\n    {% if not loop.last %}\n\n      union all\n\n    {% else %}\n\n    ), \n    \n      {%- if summarize %}\n\n        final as (\n          select\n            upper(column_name) as column_name,\n            sum(case when perfect_match then 1 else 0 end) as perfect_match,\n            sum(case when null_in_a then 1 else 0 end) as null_in_a,\n            sum(case when null_in_b then 1 else 0 end) as null_in_b,\n            sum(case when missing_from_a then 1 else 0 end) as missing_from_a,\n            sum(case when missing_from_b then 1 else 0 end) as missing_from_b,\n            sum(case when conflicting_values then 1 else 0 end) as conflicting_values\n          from main\n          group by 1\n          order by column_name\n        )\n\n      {%- else %}\n\n        final as (\n          select\n            primary_key,           \n            upper(column_name) as column_name,\n            perfect_match,\n            null_in_a,\n            null_in_b,\n            missing_from_a,\n            missing_from_b,\n            conflicting_values\n          from main    \n          order by primary_key\n        )\n\n      {%- endif %}\n\n      select * from final\n    \n    {% endif %}\n\n  {% endfor %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation", "macro.audit_helper.compare_column_values_verbose"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.2971818, "supported_languages": null}, "macro.audit_helper.compare_column_values_verbose": {"name": "compare_column_values_verbose", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values_verbose.sql", "original_file_path": "macros/compare_column_values_verbose.sql", "unique_id": "macro.audit_helper.compare_column_values_verbose", "macro_sql": "{% macro compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\n  {{ return(adapter.dispatch('compare_column_values_verbose', 'audit_helper')(a_query, b_query, primary_key, column_to_compare)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_column_values_verbose"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.299925, "supported_languages": null}, "macro.audit_helper.default__compare_column_values_verbose": {"name": "default__compare_column_values_verbose", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values_verbose.sql", "original_file_path": "macros/compare_column_values_verbose.sql", "unique_id": "macro.audit_helper.default__compare_column_values_verbose", "macro_sql": "{% macro default__compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n)\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as primary_key,\n\n        {% if target.name == 'postgres' or target.name == 'redshift' %}\n            '{{ column_to_compare }}'::text as column_name,\n        {% else %}\n            '{{ column_to_compare }}' as column_name,\n        {% endif %}\n\n        coalesce(\n            a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} and \n                a_query.{{ primary_key }} is not null and b_query.{{ primary_key }} is not null,\n            (a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null),\n            false\n        ) as perfect_match,\n        a_query.{{ column_to_compare }} is null and a_query.{{ primary_key }} is not null as null_in_a,\n        b_query.{{ column_to_compare }} is null and b_query.{{ primary_key }} is not null as null_in_b,\n        a_query.{{ primary_key }} is null as missing_from_a,\n        b_query.{{ primary_key }} is null as missing_from_b,\n        coalesce(\n            a_query.{{ primary_key }} is not null and b_query.{{ primary_key }} is not null and \n            -- ensure that neither value is missing before considering it a conflict\n            (\n                a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} or -- two not-null values that do not match\n                (a_query.{{ column_to_compare }} is not null and b_query.{{ column_to_compare }} is null) or -- null in b and not null in a\n                (a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is not null) -- null in a and not null in b\n            ), \n            false\n        ) as conflicting_values\n        -- considered a conflict if the values do not match AND at least one of the values is not null.\n\n    from a_query\n\n    full outer join b_query on (a_query.{{ primary_key }} = b_query.{{ primary_key }})\n\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.300852, "supported_languages": null}, "macro.audit_helper.quick_are_queries_identical": {"name": "quick_are_queries_identical", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/quick_are_queries_identical.sql", "original_file_path": "macros/quick_are_queries_identical.sql", "unique_id": "macro.audit_helper.quick_are_queries_identical", "macro_sql": "{% macro quick_are_queries_identical(query_a, query_b, columns=[], event_time=None) %}\n    {{ return (adapter.dispatch('quick_are_queries_identical', 'audit_helper')(query_a, query_b, columns, event_time)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.bigquery__quick_are_queries_identical"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3024378, "supported_languages": null}, "macro.audit_helper.default__quick_are_queries_identical": {"name": "default__quick_are_queries_identical", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/quick_are_queries_identical.sql", "original_file_path": "macros/quick_are_queries_identical.sql", "unique_id": "macro.audit_helper.default__quick_are_queries_identical", "macro_sql": "{% macro default__quick_are_queries_identical(query_a, query_b, columns, event_time) %}\n    {% if execute %}\n        {# Need to only throw this error when the macro is actually trying to be used, not during intial parse phase #}\n        {# if/when unit tests get support for `enabled` config, this check can be removed as they won't be supplied for parse anyway #}\n        {% do exceptions.raise_compiler_error(\"quick_are_queries_identical() is not implemented for adapter '\"~ target.type ~ \"'\" ) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.302738, "supported_languages": null}, "macro.audit_helper.bigquery__quick_are_queries_identical": {"name": "bigquery__quick_are_queries_identical", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/quick_are_queries_identical.sql", "original_file_path": "macros/quick_are_queries_identical.sql", "unique_id": "macro.audit_helper.bigquery__quick_are_queries_identical", "macro_sql": "{% macro bigquery__quick_are_queries_identical(query_a, query_b, columns, event_time) %}\n    {% set joined_cols = columns | join(\", \") %}\n    {% if event_time %}\n        {% set event_time_props = audit_helper._get_comparison_bounds(a_query, b_query, event_time) %}\n    {% endif %}\n\n    with query_a as (\n        select {{ joined_cols }}\n        from ({{ query_a }})\n        {{ audit_helper.event_time_filter(event_time_props) }}\n    ), \n    query_b as (\n        select {{ joined_cols }}\n        from ({{ query_b }})\n        {{ audit_helper.event_time_filter(event_time_props) }}\n    )\n\n    select count(distinct hash_result) = 1 as are_tables_identical\n    from (\n        select bit_xor(farm_fingerprint(to_json_string(query_a))) as hash_result\n        from query_a\n\n        union all\n        \n        select bit_xor(farm_fingerprint(to_json_string(query_b))) as hash_result\n        from query_b\n    ) as hashes\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._get_comparison_bounds", "macro.audit_helper.event_time_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3032992, "supported_languages": null}, "macro.audit_helper.snowflake__quick_are_queries_identical": {"name": "snowflake__quick_are_queries_identical", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/quick_are_queries_identical.sql", "original_file_path": "macros/quick_are_queries_identical.sql", "unique_id": "macro.audit_helper.snowflake__quick_are_queries_identical", "macro_sql": "{% macro snowflake__quick_are_queries_identical(query_a, query_b, columns, event_time) %}\n    {% set joined_cols = columns | join(\", \") %}\n    {% if event_time %}\n        {% set event_time_props = audit_helper._get_comparison_bounds(a_query, b_query, event_time) %}\n    {% endif %}\n\n    select count(distinct hash_result) = 1 as are_tables_identical\n    from (\n        select hash_agg({{ joined_cols }}) as hash_result\n        from ({{ query_a }}) query_a_subq\n        {{ audit_helper.event_time_filter(event_time_props) }}\n\n        union all\n        \n        select hash_agg({{ joined_cols }}) as hash_result\n        from ({{ query_b }}) query_b_subq\n        {{ audit_helper.event_time_filter(event_time_props) }}\n\n    ) as hashes\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._get_comparison_bounds", "macro.audit_helper.event_time_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.303859, "supported_languages": null}, "macro.audit_helper.compare_column_values": {"name": "compare_column_values", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values.sql", "original_file_path": "macros/compare_column_values.sql", "unique_id": "macro.audit_helper.compare_column_values", "macro_sql": "{% macro compare_column_values(a_query, b_query, primary_key, column_to_compare, emojis=True, a_relation_name='a', b_relation_name='b') -%}\n  {{ return(adapter.dispatch('compare_column_values', 'audit_helper')(a_query, b_query, primary_key, column_to_compare, emojis, a_relation_name, b_relation_name)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.307464, "supported_languages": null}, "macro.audit_helper.default__compare_column_values": {"name": "default__compare_column_values", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values.sql", "original_file_path": "macros/compare_column_values.sql", "unique_id": "macro.audit_helper.default__compare_column_values", "macro_sql": "{% macro default__compare_column_values(a_query, b_query, primary_key, column_to_compare, emojis, a_relation_name, b_relation_name) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n),\n\njoined as (\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as {{ primary_key }},\n        a_query.{{ column_to_compare }} as a_query_value,\n        b_query.{{ column_to_compare }} as b_query_value,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then '{% if emojis %}\u2705: {% endif %}perfect match'\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then '{% if emojis %}\u2705: {% endif %}both are null'\n            when a_query.{{ primary_key }} is null then '{% if emojis %}\ud83e\udd37: {% endif %}missing from {{ a_relation_name }}'\n            when b_query.{{ primary_key }} is null then '{% if emojis %}\ud83e\udd37: {% endif %}missing from {{ b_relation_name }}'\n            when a_query.{{ column_to_compare }} is null then '{% if emojis %}\ud83e\udd37: {% endif %}value is null in {{ a_relation_name }} only'\n            when b_query.{{ column_to_compare }} is null then '{% if emojis %}\ud83e\udd37: {% endif %}value is null in {{ b_relation_name }} only'\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then '{% if emojis %}\u274c: {% endif %}\u200dvalues do not match'\n            else 'unknown' -- this should never happen\n        end as match_status,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then 0\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then 1\n            when a_query.{{ primary_key }} is null then 2\n            when b_query.{{ primary_key }} is null then 3\n            when a_query.{{ column_to_compare }} is null then 4\n            when b_query.{{ column_to_compare }} is null then 5\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then 6\n            else 7 -- this should never happen\n        end as match_order\n\n    from a_query\n\n    full outer join b_query on a_query.{{ primary_key }} = b_query.{{ primary_key }}\n),\n\naggregated as (\n    select\n        '{{ column_to_compare }}' as column_name,\n        match_status,\n        match_order,\n        count(*) as count_records\n    from joined\n\n    group by column_name, match_status, match_order\n)\n\nselect\n    column_name,\n    match_status,\n    count_records,\n    round(100.0 * count_records / sum(count_records) over (), 2) as percent_of_total\n\nfrom aggregated\n\norder by match_order\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.308775, "supported_languages": null}, "macro.audit_helper.compare_queries": {"name": "compare_queries", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_queries.sql", "original_file_path": "macros/compare_queries.sql", "unique_id": "macro.audit_helper.compare_queries", "macro_sql": "{% macro compare_queries(a_query, b_query, primary_key=None, summarize=true, limit=None) -%}\n  {{ return(adapter.dispatch('compare_queries', 'audit_helper')(a_query, b_query, primary_key, summarize, limit)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_queries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.309809, "supported_languages": null}, "macro.audit_helper.default__compare_queries": {"name": "default__compare_queries", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_queries.sql", "original_file_path": "macros/compare_queries.sql", "unique_id": "macro.audit_helper.default__compare_queries", "macro_sql": "{% macro default__compare_queries(a_query, b_query, primary_key=None, summarize=true, limit=None) %}\n\nwith a as (\n\n    {{ a_query }}\n\n),\n\nb as (\n\n    {{ b_query }}\n\n),\n\na_intersect_b as (\n\n    select * from a\n    {{ dbt.intersect() }}\n    select * from b\n\n),\n\na_except_b as (\n\n    select * from a\n    {{ dbt.except() }}\n    select * from b\n\n),\n\nb_except_a as (\n\n    select * from b\n    {{ dbt.except() }}\n    select * from a\n\n),\n\nall_records as (\n\n    select\n        *,\n        true as in_a,\n        true as in_b\n    from a_intersect_b\n\n    union all\n\n    select\n        *,\n        true as in_a,\n        false as in_b\n    from a_except_b\n\n    union all\n\n    select\n        *,\n        false as in_a,\n        true as in_b\n    from b_except_a\n\n),\n\n{%- if summarize %}\n\nsummary_stats as (\n\n    select\n\n        in_a,\n        in_b,\n        count(*) as count\n\n    from all_records\n    group by 1, 2\n\n),\n\nfinal as (\n\n    select\n\n        *,\n        round(100.0 * count / sum(count) over (), 2) as percent_of_total\n\n    from summary_stats\n    order by in_a desc, in_b desc\n\n)\n\n{%- else %}\n\nfinal as (\n    \n    select * from all_records\n    where not (in_a and in_b)\n    order by {{ primary_key ~ \", \" if primary_key is not none }} in_a desc, in_b desc\n\n)\n\n{%- endif %}\n\nselect * from final\n{%- if limit and not summarize %}\nlimit {{ limit }}\n{%- endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.intersect", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3104582, "supported_languages": null}, "macro.audit_helper.compare_relation_columns": {"name": "compare_relation_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.compare_relation_columns", "macro_sql": "{% macro compare_relation_columns(a_relation, b_relation) %}\n  {{ return(adapter.dispatch('compare_relation_columns', 'audit_helper')(a_relation, b_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_relation_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3117409, "supported_languages": null}, "macro.audit_helper.default__compare_relation_columns": {"name": "default__compare_relation_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.default__compare_relation_columns", "macro_sql": "{% macro default__compare_relation_columns(a_relation, b_relation) %}\n\nwith a_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(a_relation) }}\n),\n\nb_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(b_relation) }}\n)\n\nselect\n    column_name,\n    a_cols.ordinal_position as a_ordinal_position,\n    b_cols.ordinal_position as b_ordinal_position,\n    a_cols.data_type as a_data_type,\n    b_cols.data_type as b_data_type,\n    coalesce(a_cols.ordinal_position = b_cols.ordinal_position, false) as has_ordinal_position_match,\n    coalesce(a_cols.data_type = b_cols.data_type, false) as has_data_type_match,\n    a_cols.data_type is not null and b_cols.data_type is null as in_a_only,\n    b_cols.data_type is not null and a_cols.data_type is null as in_b_only,\n    b_cols.data_type is not null and a_cols.data_type is not null as in_both\nfrom a_cols\nfull outer join b_cols using (column_name)\norder by coalesce(a_cols.ordinal_position, b_cols.ordinal_position)\n\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.312008, "supported_languages": null}, "macro.audit_helper.get_columns_in_relation_sql": {"name": "get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.get_columns_in_relation_sql", "macro_sql": "{% macro get_columns_in_relation_sql(relation) %}\n\n{{ adapter.dispatch('get_columns_in_relation_sql', 'audit_helper')(relation) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.bigquery__get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.312202, "supported_languages": null}, "macro.audit_helper.default__get_columns_in_relation_sql": {"name": "default__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.default__get_columns_in_relation_sql", "macro_sql": "{% macro default__get_columns_in_relation_sql(relation) %}\n    \n  {% set columns = adapter.get_columns_in_relation(relation) %}\n  {% for column in columns %}\n    select \n      {{ dbt.string_literal(column.name) }} as column_name, \n      {{ loop.index }} as ordinal_position,\n      {{ dbt.string_literal(column.data_type) }} as data_type\n\n  {% if not loop.last -%}\n    union all \n  {%- endif %}\n  {% endfor %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3126552, "supported_languages": null}, "macro.audit_helper.redshift__get_columns_in_relation_sql": {"name": "redshift__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.redshift__get_columns_in_relation_sql", "macro_sql": "{% macro redshift__get_columns_in_relation_sql(relation) %}\n  {# You can't store the results of an info schema query to a table/view in Redshift, because the data only lives on the leader node #}\n  {{ return (audit_helper.default__get_columns_in_relation_sql(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.312845, "supported_languages": null}, "macro.audit_helper.snowflake__get_columns_in_relation_sql": {"name": "snowflake__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.snowflake__get_columns_in_relation_sql", "macro_sql": "{% macro snowflake__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/dev/louisa-may-alcott/plugins/snowflake/dbt/include/snowflake/macros/adapters.sql#L48\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from\n  {{ relation.information_schema('columns') }}\n\n  where table_name ilike '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema ilike '{{ relation.schema }}'\n    {% endif %}\n    {% if relation.database %}\n    and table_catalog ilike '{{ relation.database }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.313229, "supported_languages": null}, "macro.audit_helper.postgres__get_columns_in_relation_sql": {"name": "postgres__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.postgres__get_columns_in_relation_sql", "macro_sql": "{% macro postgres__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/23484b18b71010f701b5312f920f04529ceaa6b2/plugins/postgres/dbt/include/postgres/macros/adapters.sql#L32\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from {{ relation.information_schema('columns') }}\n  where table_name = '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema = '{{ relation.schema }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.313791, "supported_languages": null}, "macro.audit_helper.bigquery__get_columns_in_relation_sql": {"name": "bigquery__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.bigquery__get_columns_in_relation_sql", "macro_sql": "{% macro bigquery__get_columns_in_relation_sql(relation) %}\n\n  select\n      ordinal_position,\n      column_name,\n      data_type\n\n  from `{{ relation.database }}`.`{{ relation.schema }}`.INFORMATION_SCHEMA.COLUMNS\n  where table_name = '{{ relation.identifier }}'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3139908, "supported_languages": null}, "macro.audit_helper.quick_are_relations_identical": {"name": "quick_are_relations_identical", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/quick_are_relations_identical.sql", "original_file_path": "macros/quick_are_relations_identical.sql", "unique_id": "macro.audit_helper.quick_are_relations_identical", "macro_sql": "{% macro quick_are_relations_identical(a_relation, b_relation, columns=None, event_time=None) %}\n    {% if not columns %}\n        {% set columns = audit_helper._get_intersecting_columns_from_relations(a_relation, b_relation) %}\n    {% endif %}\n\n    {{\n        audit_helper.quick_are_queries_identical(\n            \"select * from \" ~ a_relation,\n            \"select * from \" ~ b_relation,\n            columns, \n            event_time\n        )\n    }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._get_intersecting_columns_from_relations", "macro.audit_helper.quick_are_queries_identical"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3145568, "supported_languages": null}, "macro.audit_helper._get_intersecting_columns_from_relations": {"name": "_get_intersecting_columns_from_relations", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/utils/_get_intersecting_columns_from_relations.sql", "original_file_path": "macros/utils/_get_intersecting_columns_from_relations.sql", "unique_id": "macro.audit_helper._get_intersecting_columns_from_relations", "macro_sql": "{% macro _get_intersecting_columns_from_relations(a_relation, b_relation) %}        \n    {%- set a_cols = dbt_utils.get_filtered_columns_in_relation(a_relation) -%}\n    {%- set b_cols = dbt_utils.get_filtered_columns_in_relation(b_relation) -%}\n    \n    {%- set intersection = [] -%}\n    {%- for col in a_cols -%}\n        {%- if col in b_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {% do return(intersection) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3152158, "supported_languages": null}, "macro.audit_helper._generate_null_safe_surrogate_key": {"name": "_generate_null_safe_surrogate_key", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/utils/_generate_null_safe_sk.sql", "original_file_path": "macros/utils/_generate_null_safe_sk.sql", "unique_id": "macro.audit_helper._generate_null_safe_surrogate_key", "macro_sql": "\n\n{%- macro _generate_null_safe_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('_generate_null_safe_surrogate_key', 'audit_helper')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default___generate_null_safe_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3156428, "supported_languages": null}, "macro.audit_helper.default___generate_null_safe_surrogate_key": {"name": "default___generate_null_safe_surrogate_key", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/utils/_generate_null_safe_sk.sql", "original_file_path": "macros/utils/_generate_null_safe_sk.sql", "unique_id": "macro.audit_helper.default___generate_null_safe_surrogate_key", "macro_sql": "\n\n{%- macro default___generate_null_safe_surrogate_key(field_list) -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '_dbt_audit_helper_surrogate_key_null_')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.316154, "supported_languages": null}, "macro.audit_helper._generate_set_results": {"name": "_generate_set_results", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/utils/_generate_set_results.sql", "original_file_path": "macros/utils/_generate_set_results.sql", "unique_id": "macro.audit_helper._generate_set_results", "macro_sql": "{% macro _generate_set_results(a_query, b_query, primary_key_columns, columns, event_time_props=None) %}\n  {{ return(adapter.dispatch('_generate_set_results', 'audit_helper')(a_query, b_query, primary_key_columns, columns, event_time_props)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.bigquery___generate_set_results"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.32246, "supported_languages": null}, "macro.audit_helper.default___generate_set_results": {"name": "default___generate_set_results", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/utils/_generate_set_results.sql", "original_file_path": "macros/utils/_generate_set_results.sql", "unique_id": "macro.audit_helper.default___generate_set_results", "macro_sql": "{% macro default___generate_set_results(a_query, b_query, primary_key_columns, columns, event_time_props) %}\n    {% set joined_cols = columns | join(\", \") %}\n\n    a_base as (\n        select \n            {{ joined_cols }}, \n            {{ audit_helper._generate_null_safe_surrogate_key(primary_key_columns) }} as dbt_audit_surrogate_key\n        from ( {{-  a_query  -}} ) a_base_subq\n        {{ audit_helper.event_time_filter(event_time_props) }}\n    ),\n\n    b_base as (\n        select \n            {{ joined_cols }}, \n            {{ audit_helper._generate_null_safe_surrogate_key(primary_key_columns) }} as dbt_audit_surrogate_key\n        from ( {{-  b_query  -}} ) b_base_subq\n        {{ audit_helper.event_time_filter(event_time_props) }}\n    ),\n\n    a as (\n        select \n            *, \n            row_number() over (partition by dbt_audit_surrogate_key order by dbt_audit_surrogate_key) as dbt_audit_pk_row_num\n        from a_base\n    ),\n\n    b as (\n        select \n            *, \n            row_number() over (partition by dbt_audit_surrogate_key order by dbt_audit_surrogate_key) as dbt_audit_pk_row_num\n        from b_base\n    ),\n\n    a_intersect_b as (\n\n        select * from a\n        {{ dbt.intersect() }}\n        select * from b\n\n    ),\n\n    a_except_b as (\n\n        select * from a\n        {{ dbt.except() }}\n        select * from b\n\n    ),\n\n    b_except_a as (\n\n        select * from b\n        {{ dbt.except() }}\n        select * from a\n\n    )\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._generate_null_safe_surrogate_key", "macro.audit_helper.event_time_filter", "macro.dbt.intersect", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.323158, "supported_languages": null}, "macro.audit_helper.bigquery___generate_set_results": {"name": "bigquery___generate_set_results", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/utils/_generate_set_results.sql", "original_file_path": "macros/utils/_generate_set_results.sql", "unique_id": "macro.audit_helper.bigquery___generate_set_results", "macro_sql": "{% macro bigquery___generate_set_results(a_query, b_query, primary_key_columns, columns, event_time_props) %}\n    {% set joined_cols = columns | join(\", \") %}\n    {% set surrogate_key = audit_helper._generate_null_safe_surrogate_key(primary_key_columns) %}\n    subset_columns_a as (\n        select \n            {{ joined_cols }}, \n            {{ surrogate_key }} as dbt_audit_surrogate_key,\n            row_number() over (partition by {{ surrogate_key }} order by 1 ) as dbt_audit_pk_row_num\n        from ( {{-  a_query  -}} )\n        {{ audit_helper.event_time_filter(event_time_props) }}\n    ),\n\n    subset_columns_b as (\n        select \n            {{ joined_cols }}, \n            {{ surrogate_key }} as dbt_audit_surrogate_key,\n            row_number() over (partition by {{ surrogate_key }} order by 1 ) as dbt_audit_pk_row_num\n        from ( {{-  b_query  -}} )\n        {{ audit_helper.event_time_filter(event_time_props) }}\n    ),\n\n    a as (\n        select\n            *,\n            farm_fingerprint(to_json_string(subset_columns_a)) as dbt_audit_row_hash\n        from subset_columns_a\n    ), \n\n    b as (\n        select\n            *,\n            farm_fingerprint(to_json_string(subset_columns_b)) as dbt_audit_row_hash\n        from subset_columns_b\n    ),\n\n    a_intersect_b as (\n\n        select * from a\n        where a.dbt_audit_row_hash in (select b.dbt_audit_row_hash from b)\n\n    ),\n\n    a_except_b as (\n\n        select * from a\n        where a.dbt_audit_row_hash not in (select b.dbt_audit_row_hash from b)\n\n    ),\n\n    b_except_a as (\n\n        select * from b\n        where b.dbt_audit_row_hash not in (select a.dbt_audit_row_hash from a)\n\n    )\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._generate_null_safe_surrogate_key", "macro.audit_helper.event_time_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.323814, "supported_languages": null}, "macro.audit_helper.databricks___generate_set_results": {"name": "databricks___generate_set_results", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/utils/_generate_set_results.sql", "original_file_path": "macros/utils/_generate_set_results.sql", "unique_id": "macro.audit_helper.databricks___generate_set_results", "macro_sql": "{% macro databricks___generate_set_results(a_query, b_query, primary_key_columns, columns, event_time_props) %}\n    {% set cast_columns = [] %}\n    {# Map types can't be compared by default (you need to opt in to a legacy behaviour flag) #}\n    {# so everything needs to be cast as a string first :( #}\n    {% for col in columns %}\n        {% do cast_columns.append(dbt.cast(col, api.Column.translate_type(\"string\"))) %}\n    {% endfor %}\n    {% set joined_cols = cast_columns | join(\", \") %}\n    {% set surrogate_key = audit_helper._generate_null_safe_surrogate_key(primary_key_columns) %}\n    a as (\n        select \n            {{ joined_cols }}, \n            {{ surrogate_key }} as dbt_audit_surrogate_key,\n            row_number() over (partition by {{ surrogate_key }} order by 1 ) as dbt_audit_pk_row_num,\n            xxhash64({{ joined_cols }}, dbt_audit_pk_row_num) as dbt_audit_row_hash\n        from ( {{-  a_query  -}} )\n        {{ audit_helper.event_time_filter(event_time_props) }}\n    ),\n\n    b as (\n        select \n            {{ joined_cols }}, \n            {{ surrogate_key }} as dbt_audit_surrogate_key,\n            row_number() over (partition by {{ surrogate_key }} order by 1 ) as dbt_audit_pk_row_num,\n            xxhash64({{ joined_cols }}, dbt_audit_pk_row_num) as dbt_audit_row_hash\n        from ( {{-  b_query  -}} )\n        {{ audit_helper.event_time_filter(event_time_props) }}\n    ),\n\n    a_intersect_b as (\n\n        select * from a\n        where a.dbt_audit_row_hash in (select b.dbt_audit_row_hash from b)\n\n    ),\n\n    a_except_b as (\n\n        select * from a\n        where a.dbt_audit_row_hash not in (select b.dbt_audit_row_hash from b)\n\n    ),\n\n    b_except_a as (\n\n        select * from b\n        where b.dbt_audit_row_hash not in (select a.dbt_audit_row_hash from a)\n\n    )   \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast", "macro.audit_helper._generate_null_safe_surrogate_key", "macro.audit_helper.event_time_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.324765, "supported_languages": null}, "macro.audit_helper.snowflake___generate_set_results": {"name": "snowflake___generate_set_results", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/utils/_generate_set_results.sql", "original_file_path": "macros/utils/_generate_set_results.sql", "unique_id": "macro.audit_helper.snowflake___generate_set_results", "macro_sql": "{% macro snowflake___generate_set_results(a_query, b_query, primary_key_columns, columns, event_time_props) %}\n    {% set joined_cols = columns | join(\", \") %}\n    a as (\n        select \n            {{ joined_cols }}, \n            {{ audit_helper._generate_null_safe_surrogate_key(primary_key_columns) }} as dbt_audit_surrogate_key,\n            row_number() over (partition by dbt_audit_surrogate_key order by dbt_audit_surrogate_key ) as dbt_audit_pk_row_num,\n            hash({{ joined_cols }}, dbt_audit_pk_row_num) as dbt_audit_row_hash\n        from ( {{-  a_query  -}} )\n        {{ audit_helper.event_time_filter(event_time_props) }}\n    ),\n\n    b as (\n        select \n            {{ joined_cols }}, \n            {{ audit_helper._generate_null_safe_surrogate_key(primary_key_columns) }} as dbt_audit_surrogate_key,\n            row_number() over (partition by dbt_audit_surrogate_key order by dbt_audit_surrogate_key ) as dbt_audit_pk_row_num,\n            hash({{ joined_cols }}, dbt_audit_pk_row_num) as dbt_audit_row_hash\n        from ( {{-  b_query  -}} )\n        {{ audit_helper.event_time_filter(event_time_props) }}\n    ),\n\n    a_intersect_b as (\n\n        select * from a\n        where a.dbt_audit_row_hash in (select b.dbt_audit_row_hash from b)\n\n    ),\n\n    a_except_b as (\n\n        select * from a\n        where a.dbt_audit_row_hash not in (select b.dbt_audit_row_hash from b)\n\n    ),\n\n    b_except_a as (\n\n        select * from b\n        where b.dbt_audit_row_hash not in (select a.dbt_audit_row_hash from a)\n\n    )\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._generate_null_safe_surrogate_key", "macro.audit_helper.event_time_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3253918, "supported_languages": null}, "macro.audit_helper._classify_audit_row_status": {"name": "_classify_audit_row_status", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/utils/_classify_audit_row_status.sql", "original_file_path": "macros/utils/_classify_audit_row_status.sql", "unique_id": "macro.audit_helper._classify_audit_row_status", "macro_sql": "{% macro _classify_audit_row_status() %}\n    {{ return(adapter.dispatch('_classify_audit_row_status', 'audit_helper')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default___classify_audit_row_status"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.325871, "supported_languages": null}, "macro.audit_helper.default___classify_audit_row_status": {"name": "default___classify_audit_row_status", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/utils/_classify_audit_row_status.sql", "original_file_path": "macros/utils/_classify_audit_row_status.sql", "unique_id": "macro.audit_helper.default___classify_audit_row_status", "macro_sql": "\n\n{%- macro default___classify_audit_row_status() -%}\n    case \n        when max(dbt_audit_pk_row_num) over (partition by dbt_audit_surrogate_key) > 1 then 'nonunique_pk'\n        when dbt_audit_in_a and dbt_audit_in_b then 'identical'\n        when {{ dbt.bool_or('dbt_audit_in_a') }} over (partition by dbt_audit_surrogate_key, dbt_audit_pk_row_num) \n            and {{ dbt.bool_or('dbt_audit_in_b') }} over (partition by dbt_audit_surrogate_key, dbt_audit_pk_row_num)\n            then 'modified'\n        when dbt_audit_in_a then 'removed'\n        when dbt_audit_in_b then 'added'\n    end\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.326092, "supported_languages": null}, "macro.audit_helper.redshift___classify_audit_row_status": {"name": "redshift___classify_audit_row_status", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/utils/_classify_audit_row_status.sql", "original_file_path": "macros/utils/_classify_audit_row_status.sql", "unique_id": "macro.audit_helper.redshift___classify_audit_row_status", "macro_sql": "\n\n\n{%- macro redshift___classify_audit_row_status() -%}\n    {#- Redshift doesn't support bitwise operations (e.g. bool_or) inside of a window function :( -#}\n    case \n        when max(dbt_audit_pk_row_num) over (partition by dbt_audit_surrogate_key) > 1 then 'nonunique_pk'\n        when dbt_audit_in_a and dbt_audit_in_b then 'identical'\n        when max(case when dbt_audit_in_a then 1 else 0 end) over (partition by dbt_audit_surrogate_key, dbt_audit_pk_row_num) = 1\n            and max(case when dbt_audit_in_b then 1 else 0 end) over (partition by dbt_audit_surrogate_key, dbt_audit_pk_row_num) = 1\n            then 'modified'\n        when dbt_audit_in_a then 'removed'\n        when dbt_audit_in_b then 'added'\n    end{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.326226, "supported_languages": null}, "macro.audit_helper._count_num_rows_in_status": {"name": "_count_num_rows_in_status", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/utils/_count_num_rows_in_status.sql", "original_file_path": "macros/utils/_count_num_rows_in_status.sql", "unique_id": "macro.audit_helper._count_num_rows_in_status", "macro_sql": "{% macro _count_num_rows_in_status() %}\n    {{ return(adapter.dispatch('_count_num_rows_in_status', 'audit_helper')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.bigquery___count_num_rows_in_status"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.326776, "supported_languages": null}, "macro.audit_helper.default___count_num_rows_in_status": {"name": "default___count_num_rows_in_status", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/utils/_count_num_rows_in_status.sql", "original_file_path": "macros/utils/_count_num_rows_in_status.sql", "unique_id": "macro.audit_helper.default___count_num_rows_in_status", "macro_sql": "\n\n{%- macro default___count_num_rows_in_status() -%}\n    count(distinct dbt_audit_surrogate_key, dbt_audit_pk_row_num) over (partition by dbt_audit_row_status)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.326874, "supported_languages": null}, "macro.audit_helper.bigquery___count_num_rows_in_status": {"name": "bigquery___count_num_rows_in_status", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/utils/_count_num_rows_in_status.sql", "original_file_path": "macros/utils/_count_num_rows_in_status.sql", "unique_id": "macro.audit_helper.bigquery___count_num_rows_in_status", "macro_sql": "\n\n{%- macro bigquery___count_num_rows_in_status() -%}\n    count(distinct {{ dbt.concat([\"dbt_audit_surrogate_key\", \"dbt_audit_pk_row_num\"]) }}) over (partition by dbt_audit_row_status)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3270478, "supported_languages": null}, "macro.audit_helper.postgres___count_num_rows_in_status": {"name": "postgres___count_num_rows_in_status", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/utils/_count_num_rows_in_status.sql", "original_file_path": "macros/utils/_count_num_rows_in_status.sql", "unique_id": "macro.audit_helper.postgres___count_num_rows_in_status", "macro_sql": "\n\n{%- macro postgres___count_num_rows_in_status() -%}\n    {{ audit_helper._count_num_rows_in_status_without_distinct_window_func() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._count_num_rows_in_status_without_distinct_window_func"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3271801, "supported_languages": null}, "macro.audit_helper.databricks___count_num_rows_in_status": {"name": "databricks___count_num_rows_in_status", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/utils/_count_num_rows_in_status.sql", "original_file_path": "macros/utils/_count_num_rows_in_status.sql", "unique_id": "macro.audit_helper.databricks___count_num_rows_in_status", "macro_sql": "\n\n{%- macro databricks___count_num_rows_in_status() -%}\n    {{ audit_helper._count_num_rows_in_status_without_distinct_window_func() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._count_num_rows_in_status_without_distinct_window_func"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.327308, "supported_languages": null}, "macro.audit_helper._count_num_rows_in_status_without_distinct_window_func": {"name": "_count_num_rows_in_status_without_distinct_window_func", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/utils/_count_num_rows_in_status.sql", "original_file_path": "macros/utils/_count_num_rows_in_status.sql", "unique_id": "macro.audit_helper._count_num_rows_in_status_without_distinct_window_func", "macro_sql": "{% macro _count_num_rows_in_status_without_distinct_window_func() %}\n    {#- Some platforms don't support count(distinct) inside of window functions -#}\n    {#- You can get the same outcome by dense_rank, assuming no nulls (we've already handled that) #}\n    {# https://stackoverflow.com/a/22347502 -#}\n    dense_rank() over (partition by dbt_audit_row_status order by dbt_audit_surrogate_key, dbt_audit_pk_row_num)\n    + dense_rank() over (partition by dbt_audit_row_status order by dbt_audit_surrogate_key desc, dbt_audit_pk_row_num desc)\n    - 1\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.327434, "supported_languages": null}, "macro.audit_helper._get_comparison_bounds": {"name": "_get_comparison_bounds", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/utils/_get_comparison_bounds.sql", "original_file_path": "macros/utils/_get_comparison_bounds.sql", "unique_id": "macro.audit_helper._get_comparison_bounds", "macro_sql": "{% macro _get_comparison_bounds(a_query, b_query, event_time) %}\n    {% set min_max_queries %}\n        with min_maxes as (\n            select min({{ event_time }}) as min_event_time, max({{ event_time }}) as max_event_time\n            from ({{ a_query }}) a_subq\n            union all \n            select min({{ event_time }}) as min_event_time, max({{ event_time }}) as max_event_time\n            from ({{ b_query }}) b_subq\n        )\n        select max(min_event_time) as min_event_time, min(max_event_time) as max_event_time\n        from min_maxes\n    {% endset %}\n\n    {% set query_response = dbt_utils.get_query_results_as_dict(min_max_queries) %}\n    \n    {% set event_time_props = {\"event_time\": event_time} %}\n    \n    {# query_response.keys() are only `min_event_time` and `max_event_time`, but they have indeterminate capitalisation #}\n    {# hence the dynamic approach for what is otherwise just two well-known values #}\n    {% for k in query_response.keys() %}\n        {% do event_time_props.update({k | lower: query_response[k][0]}) %}\n    {% endfor %}\n    \n    {% do return(event_time_props) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.328973, "supported_languages": null}, "macro.audit_helper.event_time_filter": {"name": "event_time_filter", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/utils/_get_comparison_bounds.sql", "original_file_path": "macros/utils/_get_comparison_bounds.sql", "unique_id": "macro.audit_helper.event_time_filter", "macro_sql": "{% macro event_time_filter(event_time_props) %}\n    {% if event_time_props %}\n        where {{ event_time_props[\"event_time\"] }} >= '{{ event_time_props[\"min_event_time\"] }}'\n        and {{ event_time_props[\"event_time\"] }} <= '{{ event_time_props[\"max_event_time\"] }}'\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3293, "supported_languages": null}, "macro.audit_helper._ensure_all_pks_are_in_column_set": {"name": "_ensure_all_pks_are_in_column_set", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/utils/_ensure_all_pks_are_in_column_set.sql", "original_file_path": "macros/utils/_ensure_all_pks_are_in_column_set.sql", "unique_id": "macro.audit_helper._ensure_all_pks_are_in_column_set", "macro_sql": "{% macro _ensure_all_pks_are_in_column_set(primary_key_columns, columns) %}\n    {% set lower_cols = columns | map('lower') | list %}\n    {% set missing_pks = [] %}\n\n    {% for pk in primary_key_columns %}\n        {% if pk | lower not in lower_cols %}\n            {% do missing_pks.append(pk) %}\n        {% endif %}\n    {% endfor %}\n\n    {% if missing_pks | length > 0 %}\n        {% set columns = missing_pks + columns %}\n    {% endif %}\n    \n    {% do return (columns) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.330148, "supported_languages": null}, "macro.dbt_meta_testing.fetch_configured_models": {"name": "fetch_configured_models", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/fetch_configured_models.sql", "original_file_path": "macros/fetch_configured_models.sql", "unique_id": "macro.dbt_meta_testing.fetch_configured_models", "macro_sql": "{% macro fetch_configured_models(meta_config, models=none, resource_type=\"model\") %}\n\t{{ return(adapter.dispatch(\"fetch_configured_models\", \"dbt_meta_testing\")(meta_config, models, resource_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.default__fetch_configured_models"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3322382, "supported_languages": null}, "macro.dbt_meta_testing.default__fetch_configured_models": {"name": "default__fetch_configured_models", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/fetch_configured_models.sql", "original_file_path": "macros/fetch_configured_models.sql", "unique_id": "macro.dbt_meta_testing.default__fetch_configured_models", "macro_sql": "{% macro default__fetch_configured_models(meta_config, models, resource_type) %}\n\n    {% set configured_models = [] %}\n\n    {{ dbt_meta_testing.logger(\"var `models` is: \" ~ models) }}\n\n    {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", resource_type) %}\n\n        {% if meta_config in node.config.keys() %}\n\n            {% do configured_models.append(node) %}\n\n        {% endif %}\n\n    {% endfor %}\n\n    /* \n    If arg `models` is provided, filter fetched models to only those\n    provided, either in space delimited string or via `dbt list -m <selection_syntax>`.\n\n    See documentation here for more details: https://github.com/tnightengale/quality-assurance-dbt.\n    */\n    {% if models is not none and resource_type == \"model\" %}\n\n        {% set filtered_models_list = [] %}\n        {% set final_models_list = [] %}\n        {% set models_list = models.split(\" \") %}\n\n        {{ dbt_meta_testing.logger(\"Building `filtered_models_list`:\") }}\n        {% for m in models_list %}\n\n            /* \n            Assumes \".\" delimited string is output from `dbt list` and the last\n            delimitee is the model name, eg. dbt_meta_testing.example.model_1\n            */\n            {% if \".\" in m %} {% set m = m.split(\".\")[-1] %} {% endif %}\n\n            {% do filtered_models_list.append(m) %}\n            {{ dbt_meta_testing.logger(\"Appended to `filtered_models_list`: \" ~ m) }}\n\n        {% endfor %}\n\n        {{ dbt_meta_testing.logger(\"`filtered_models_list` is: \" ~ filtered_models_list) }}\n        {% for m in configured_models %}\n\n\n            {{ dbt_meta_testing.logger(\"`filtered_models_loop: \" ~ loop.index ~ \" \" ~ m.name in filtered_models_list)}}\n            {% if m.name in filtered_models_list %}\n\n                {% do final_models_list.append(m) %}\n                {{ dbt_meta_testing.logger(\"m is: \" ~ m) }}\n            \n            {% endif %}\n\n        {% endfor %}\n    \n    {% else %}\n\n        {{ dbt_meta_testing.logger(\"else in fetch models triggered, configured is: \" ~ configured_models) }}\n        {% set final_models_list = configured_models %}\n\n    {% endif %}\n\n    {{ dbt_meta_testing.logger(\"`final_models_list` is: \" ~ final_models_list) }}\n    {{ return(final_models_list) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.logger"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3341749, "supported_languages": null}, "macro.dbt_meta_testing.required_tests": {"name": "required_tests", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/required_tests.sql", "original_file_path": "macros/required_tests.sql", "unique_id": "macro.dbt_meta_testing.required_tests", "macro_sql": "{% macro required_tests(models=none) %}\n\t{{ return(adapter.dispatch(\"required_tests\", \"dbt_meta_testing\")(models)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.default__required_tests"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.335, "supported_languages": null}, "macro.dbt_meta_testing.default__required_tests": {"name": "default__required_tests", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/required_tests.sql", "original_file_path": "macros/required_tests.sql", "unique_id": "macro.dbt_meta_testing.default__required_tests", "macro_sql": "{% macro default__required_tests(models) %}\n\n    -- Start\n    {% set start_msg = \"Checking `required_tests` config...\" %}\n    {% if not var(\"running_intergration_tests\", false) is true %}{{ log(start_msg, info=true) }}{% endif %}\n\n    -- Fetch models based on config and `models` var\n    {% set filtered_models = dbt_meta_testing.fetch_configured_models('required_tests', models) %}\n\n    -- Validate configuration\n    {% set any_error = dbt_meta_testing.validate_required_tests(filtered_models) %}\n    {% if any_error is not none %}\n    \n        {{ return(dbt_meta_testing.format_raise_error(any_error)) }}\n        \n    {% endif %}\n\n    -- Evaluate configuration\n    {% set any_error = dbt_meta_testing.evaluate_required_tests(filtered_models) %}\n    {% if any_error is not none %}\n\n        {% set result = dbt_meta_testing.format_raise_error(any_error) %}\n\n    {% else %}\n\n        {% set result = \"Success. `required_tests` passed.\" %}\n        {% if not var(\"running_intergration_tests\", false) is true %}{{ log(result, info=true) }}{% endif %}\n\n    {% endif %}\n\n    {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.fetch_configured_models", "macro.dbt_meta_testing.validate_required_tests", "macro.dbt_meta_testing.format_raise_error", "macro.dbt_meta_testing.evaluate_required_tests"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3360882, "supported_languages": null}, "macro.dbt_meta_testing.required_docs": {"name": "required_docs", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/required_docs.sql", "original_file_path": "macros/required_docs.sql", "unique_id": "macro.dbt_meta_testing.required_docs", "macro_sql": "{% macro required_docs(models=none) %}\n\t{{ return(adapter.dispatch(\"required_docs\", \"dbt_meta_testing\")(models))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.default__required_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.336899, "supported_languages": null}, "macro.dbt_meta_testing.default__required_docs": {"name": "default__required_docs", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/required_docs.sql", "original_file_path": "macros/required_docs.sql", "unique_id": "macro.dbt_meta_testing.default__required_docs", "macro_sql": "{% macro default__required_docs(models) %}\n\n    -- Start\n    {% set start_msg = \"Checking `required_docs` config...\" %}\n    {% if not var(\"running_intergration_tests\", false) is true %}{{ log(start_msg, info=true) }}{% endif %}\n\n    -- Fetch models based on config and `models` var\n    {% set filtered_models = dbt_meta_testing.fetch_configured_models('required_docs', models) %}\n\n    -- Validate configuration\n    {% set any_error = dbt_meta_testing.validate_required_docs(filtered_models) %}\n    {% if any_error is not none %}\n\n        {% set result = dbt_meta_testing.format_raise_error(any_error) %}\n        \n    {% endif %}\n\n    -- Evaluate configuration\n    {% set any_error = dbt_meta_testing.evaluate_required_docs(filtered_models) %}\n    {% if any_error is not none %}\n        \n        {% set result = dbt_meta_testing.format_raise_error(any_error) %}\n\n    {% else %}\n\n        {% set result = \"Success: `required_docs` passed.\" %}\n        {% if not var(\"running_intergration_tests\", false) is true %}{{ log(result, info=true) }}{% endif %}\n\n    {% endif %}\n\n    {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.fetch_configured_models", "macro.dbt_meta_testing.validate_required_docs", "macro.dbt_meta_testing.format_raise_error", "macro.dbt_meta_testing.evaluate_required_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.337993, "supported_languages": null}, "macro.dbt_meta_testing.logger": {"name": "logger", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/logger.sql", "original_file_path": "macros/logger.sql", "unique_id": "macro.dbt_meta_testing.logger", "macro_sql": "{% macro logger(log_message, log_level=\"DEBUG\", format='%H:%M:%S') %}\n\t{{ return(adapter.dispatch(\"logger\", \"dbt_meta_testing\")(log_message, log_level=\"DEBUG\", format='%H:%M:%S')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.default__logger"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.33871, "supported_languages": null}, "macro.dbt_meta_testing.default__logger": {"name": "default__logger", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/logger.sql", "original_file_path": "macros/logger.sql", "unique_id": "macro.dbt_meta_testing.default__logger", "macro_sql": "{% macro default__logger(log_message, log_level=\"DEBUG\", format='%H:%M:%S') %}\n\n    {% set log_levels = {\n        \"DEBUG\": 0,\n        \"INFO\": 1,\n        \"WARNING\": 2,\n        \"ERROR\": 3,\n        \"CRITICAL\": 4\n    } %}\n\n    {% set setting_level = var(\"logging_level\", \"INFO\") %}\n\n    {% if not log_level in log_levels.keys() %}\n        {% set formatted_keys = log_levels.keys() | list | join(',') %}\n        {{ \n            exceptions.raise_compiler_error(\n                \"Invalid logging level. Got '\" ~ level ~ \"'. Require one of: '\" \n                ~ formatted_keys ~ \"'\") \n        }}\n    {% endif %}\n    \n    {% set log_bool = log_levels[log_level] >= log_levels[setting_level] %}\n    {{ log(modules.datetime.datetime.now() ~ ' ' ~ log_level ~ ':' ~ this ~ ':' ~ log_message, info=log_bool) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.33969, "supported_languages": null}, "macro.dbt_meta_testing._get_meta_test_namespaces": {"name": "_get_meta_test_namespaces", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/_get_meta_tests_namespace.sql", "original_file_path": "macros/utils/_get_meta_tests_namespace.sql", "unique_id": "macro.dbt_meta_testing._get_meta_test_namespaces", "macro_sql": "{% macro _get_meta_test_namespaces() %}\n  {% set override_namespaces = var('dbt_meta_test_dispatch_list', []) %}\n  {% do return(override_namespaces + ['dbt_meta_testing']) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.34001, "supported_languages": null}, "macro.dbt_meta_testing.validate_required_docs": {"name": "validate_required_docs", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/required_docs/validate_required_docs.sql", "original_file_path": "macros/utils/required_docs/validate_required_docs.sql", "unique_id": "macro.dbt_meta_testing.validate_required_docs", "macro_sql": "{% macro validate_required_docs(models_to_validate) %}\n\t{{ return(adapter.dispatch(\"validate_required_docs\", \"dbt_meta_testing\")(models_to_validate))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.default__validate_required_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.340391, "supported_languages": null}, "macro.dbt_meta_testing.default__validate_required_docs": {"name": "default__validate_required_docs", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/required_docs/validate_required_docs.sql", "original_file_path": "macros/utils/required_docs/validate_required_docs.sql", "unique_id": "macro.dbt_meta_testing.default__validate_required_docs", "macro_sql": "{% macro default__validate_required_docs(models_to_validate) %}\n\n    {# /*\n    Validate that all +required_docs configs are bool.\n    */ #}\n\n    {{ dbt_meta_testing.logger('models to validate are ' ~ models_to_validate) }}\n\n    {% for model in models_to_validate %}\n\n        {% if not model.config.required_docs is boolean %}\n\n            {{ return(dbt_meta_testing.error_invalid_config_docs(config, model.name)) }}\n\n        {% endif %}\n\n    {% endfor %}\n\n    {{ return(none) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.logger", "macro.dbt_meta_testing.error_invalid_config_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3408508, "supported_languages": null}, "macro.dbt_meta_testing.evaluate_required_docs": {"name": "evaluate_required_docs", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/required_docs/evaluate_required_docs.sql", "original_file_path": "macros/utils/required_docs/evaluate_required_docs.sql", "unique_id": "macro.dbt_meta_testing.evaluate_required_docs", "macro_sql": "{% macro evaluate_required_docs(models_to_evaluate) %}\n\t{{ return(adapter.dispatch(\"evaluate_required_docs\", \"dbt_meta_testing\")(models_to_evaluate))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.default__evaluate_required_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3430662, "supported_languages": null}, "macro.dbt_meta_testing.default__evaluate_required_docs": {"name": "default__evaluate_required_docs", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/required_docs/evaluate_required_docs.sql", "original_file_path": "macros/utils/required_docs/evaluate_required_docs.sql", "unique_id": "macro.dbt_meta_testing.default__evaluate_required_docs", "macro_sql": "{% macro default__evaluate_required_docs(models_to_evaluate) %}\n\n    {# /*\n    Evaluate if each model meets +required_docs config.\n    */ #}\n\n    {% set missing_model_errors = [] %}\n    {% set missing_columns_errors = [] %}\n    {% set missing_description_errors = [] %}\n\n    {% for model in models_to_evaluate %}\n\n        {% if model.config.required_docs==True and model.config.get(\"materialized\", \"\") not in (\"\", \"ephemeral\")%}\n            \n            {% set model_columns = adapter.get_columns_in_relation(ref(model.package_name, model.name)) \n                | map(attribute=\"column\") | list %}\n            {{ dbt_meta_testing.logger(model_columns | map(attribute=\"column\") | list) }}\n\n            {% if model.description == \"\" %}\n\n                {% do missing_model_errors.append(model.name) %}\n\n            {% endif %}\n\n            {% for column in model_columns %}\n\n                {% if var(\"convert_column_names_to_lower_case\", true) %}\n                    {% set column = column | lower %}\n                {% endif %}\n\n                {% if column in model.columns.keys() %}\n\n                    {{ dbt_meta_testing.logger(column ~ \" is in \" ~ model.columns.keys()) }}\n                    {% if model.columns[column].description == \"\" %}\n\n                        {% do missing_description_errors.append((model.name, column)) %}\n\n                    {% endif %}\n                \n                {% else %}\n\n                    {% do missing_columns_errors.append((model.name, column)) %}\n\n                {% endif %}\n\n            {% endfor %}\n        \n        {% endif %}\n\n    {% endfor %}\n\n    {% set errors = missing_model_errors + missing_columns_errors + missing_description_errors %}\n    {% if errors | length > 0 %}\n\n        {{ dbt_meta_testing.logger(missing_model_errors) }}\n        {{ dbt_meta_testing.logger(missing_columns_errors) }}\n        {{ dbt_meta_testing.logger(missing_description_errors) }}\n\n        {% set result = dbt_meta_testing.error_required_docs(\n            missing_model_errors, \n            missing_columns_errors, \n            missing_description_errors\n            )\n        %}\n\n    {% else %}\n\n        {% set result = none %}\n\n    {% endif %}\n\n    {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.logger", "macro.dbt_meta_testing.error_required_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.345304, "supported_languages": null}, "macro.dbt_meta_testing.format_raise_error": {"name": "format_raise_error", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/formatters/format_raise_error.sql", "original_file_path": "macros/utils/formatters/format_raise_error.sql", "unique_id": "macro.dbt_meta_testing.format_raise_error", "macro_sql": "{% macro format_raise_error(error_to_raise) %}\n\t{{ return(adapter.dispatch(\"format_raise_error\", \"dbt_meta_testing\")(error_to_raise))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.default__format_raise_error"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3456798, "supported_languages": null}, "macro.dbt_meta_testing.default__format_raise_error": {"name": "default__format_raise_error", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/formatters/format_raise_error.sql", "original_file_path": "macros/utils/formatters/format_raise_error.sql", "unique_id": "macro.dbt_meta_testing.default__format_raise_error", "macro_sql": "{% macro default__format_raise_error(error_to_raise) %}\n\n    {% if var(\"running_intergration_tests\", false) is true %}\n\n        {{ return(error_to_raise) }}\n\n    {% else %}\n\n        {{ exceptions.raise_compiler_error(error_to_raise) }}\n    \n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3459961, "supported_languages": null}, "macro.dbt_meta_testing.format_error_tests": {"name": "format_error_tests", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/formatters/format_error_tests.sql", "original_file_path": "macros/utils/formatters/format_error_tests.sql", "unique_id": "macro.dbt_meta_testing.format_error_tests", "macro_sql": "{% macro format_error_tests(error_list) %}\n\t{{ return(adapter.dispatch(\"format_error_tests\", \"dbt_meta_testing\")(error_list))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.default__format_error_tests"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.346434, "supported_languages": null}, "macro.dbt_meta_testing.default__format_error_tests": {"name": "default__format_error_tests", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/formatters/format_error_tests.sql", "original_file_path": "macros/utils/formatters/format_error_tests.sql", "unique_id": "macro.dbt_meta_testing.default__format_error_tests", "macro_sql": "{% macro default__format_error_tests(error_list) %}\n\n{# /*\nFormats a list of tuples into a bulleted list for error output in error_required_tests.\n*/ #}\n\n    {% set output_list = [] %}\n\n    {% for obj in error_list %}\n\n        {% if obj is iterable %}\n\n            {% do output_list.append(\"- Model: '\" ~ obj[0] ~ \"' Test: '\" ~ obj[1] ~ \"' Got: \" ~ obj[2] ~ \" Expected: \"  ~ obj[3]) %}\n\n        {% else %}\n\n            {{ exceptions.raise_compiler_error(\"List elements must be ordered tuple of (model, test, required, provided).\") }}\n\n        {% endif %}\n\n    {% endfor %}\n\n    {{ return(output_list) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.347052, "supported_languages": null}, "macro.dbt_meta_testing.format_error_docs": {"name": "format_error_docs", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/formatters/format_error_docs.sql", "original_file_path": "macros/utils/formatters/format_error_docs.sql", "unique_id": "macro.dbt_meta_testing.format_error_docs", "macro_sql": "{% macro format_error_docs(error_list) %}\n\t{{ return(adapter.dispatch(\"format_error_docs\", \"dbt_meta_testing\")(error_list))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.default__format_error_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.34754, "supported_languages": null}, "macro.dbt_meta_testing.default__format_error_docs": {"name": "default__format_error_docs", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/formatters/format_error_docs.sql", "original_file_path": "macros/utils/formatters/format_error_docs.sql", "unique_id": "macro.dbt_meta_testing.default__format_error_docs", "macro_sql": "{% macro default__format_error_docs(error_list) %}\n\n{# /*\nFormats a list of either strings or tuples into a bulleted list for error output in error_required_docs.\n*/ #}\n\n    {% set output_list = [] %}\n\n    {% for obj in error_list %}\n\n        {% if obj is string %}\n\n            {% do output_list.append(\" - \" ~ obj) %}\n\n        {% elif obj is iterable %}\n\n            {% do output_list.append(\" - \" ~ obj[0] ~ \".\" ~ obj[1]) %}\n\n        {% else %}\n\n            {{ exceptions.raise_compiler_error(\"List elements must be string or tuple.\") }}\n\n        {% endif %}\n\n    {% endfor %}\n\n    {{ return(output_list | sort | join(\"\\n\")) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.348236, "supported_languages": null}, "macro.dbt_meta_testing.evaluate_required_tests": {"name": "evaluate_required_tests", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/required_tests/evaluate_required_tests.sql", "original_file_path": "macros/utils/required_tests/evaluate_required_tests.sql", "unique_id": "macro.dbt_meta_testing.evaluate_required_tests", "macro_sql": "{% macro evaluate_required_tests(models_to_evaluate) %}\n\t{{ return(adapter.dispatch(\"evaluate_required_tests\", \"dbt_meta_testing\")(models_to_evaluate))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.default__evaluate_required_tests"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.349077, "supported_languages": null}, "macro.dbt_meta_testing.default__evaluate_required_tests": {"name": "default__evaluate_required_tests", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/required_tests/evaluate_required_tests.sql", "original_file_path": "macros/utils/required_tests/evaluate_required_tests.sql", "unique_id": "macro.dbt_meta_testing.default__evaluate_required_tests", "macro_sql": "{% macro default__evaluate_required_tests(models_to_evaluate) %}\n\n    {# /*\n    Evaluate if each model meets +required_tests minimum.\n    */ #}\n    \n    {% set tests_per_model = dbt_meta_testing.tests_per_model() %}\n    {% set test_errors = [] %}\n\n    {% for model in models_to_evaluate %}{% if model.config.required_tests is mapping %}\n        {% for test_key in model.config.required_tests.keys() %}\n\n            {% set provided_test_list = tests_per_model[model.unique_id] %}\n\n            {% set required_test_count = model.config.required_tests[test_key] %}\n            {% set matching_test_count = dbt_meta_testing.get_regex_match_count(provided_test_list, test_key) %}\n            \n            {% if matching_test_count < required_test_count %} \n                {% do test_errors.append((model.name, test_key, matching_test_count, required_test_count)) %}\n            {% endif %}\n            \n        {% endfor %}{% endif %}\n    {% endfor %}\n\n\n    {% if test_errors | length > 0 %}\n        {% set result = dbt_meta_testing.error_required_tests(test_errors) %}\n    {% else %}\n        {% set result = none %}\n    {% endif %}\n\n    {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.tests_per_model", "macro.dbt_meta_testing.get_regex_match_count", "macro.dbt_meta_testing.error_required_tests"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.350202, "supported_languages": null}, "macro.dbt_meta_testing.validate_required_tests": {"name": "validate_required_tests", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/required_tests/validate_required_tests.sql", "original_file_path": "macros/utils/required_tests/validate_required_tests.sql", "unique_id": "macro.dbt_meta_testing.validate_required_tests", "macro_sql": "{% macro validate_required_tests(models_to_validate) %}\n\t{{ return(adapter.dispatch(\"validate_required_tests\", \"dbt_meta_testing\")(models_to_validate))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.default__validate_required_tests"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.351406, "supported_languages": null}, "macro.dbt_meta_testing.default__validate_required_tests": {"name": "default__validate_required_tests", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/required_tests/validate_required_tests.sql", "original_file_path": "macros/utils/required_tests/validate_required_tests.sql", "unique_id": "macro.dbt_meta_testing.default__validate_required_tests", "macro_sql": "{% macro default__validate_required_tests(models_to_validate) %}\n\n    {# /*\n    Validate that all +required_tests configs are either dict or None \n    and that all keys in a dict are defined tests.\n    */ #}\n\n    {{ dbt_meta_testing.logger('models to validate are ' ~ models_to_validate) }}\n\n    -- # TO DO: break out into function that asserts against a contract\n    -- Fetch unique tests from +required_tests config\n    {% set all_required_tests = [] %}\n\n    {% for model in models_to_validate %}\n\n        {% set config = model.config.required_tests %}\n\n        {{ dbt_meta_testing.logger('config is: ' ~ config) }}\n\n        -- Validate that config is dict or none\n        {% if config is mapping %}\n\n            {% for k in config.keys() %} \n\n                {% do all_required_tests.append(k) %}\n\n            {% endfor %}\n        \n        {% elif config is none %}\n            \n            -- Pass\n            {{ dbt_meta_testing.logger(\"model '\" ~ model.name ~ \"' has required_tests=null\") }}\n        \n        {% else %}\n\n            {{ return(dbt_meta_testing.errors_invalid_config_tests(config, model.name)) }}\n        \n        {% endif %}\n\n    {% endfor %}\n\n\n    {% set unique_required_tests = all_required_tests | unique | list %}\n\n    {{ dbt_meta_testing.logger('unique_required_tests: ' ~ unique_required_tests) }}\n\n\n    -- Fetch unique defined tests from graph\n    {% set unique_defined_tests = [] %}\n\n    {% for test_name in graph.nodes.values() \n        | selectattr(\"resource_type\", \"equalto\", \"test\")\n        | selectattr(\"test_metadata\", \"defined\")\n        | map(attribute=\"test_metadata\")\n        | map(attribute=\"name\") \n        | unique %}\n\n        {{ dbt_meta_testing.logger('test name ' ~ loop.index ~ ' ' ~ test_name) }}\n\n        {% do unique_defined_tests.append(test_name) %}\n\n    {% endfor %}\n\n    {{ return(none) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.logger", "macro.dbt_meta_testing.errors_invalid_config_tests"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.352936, "supported_languages": null}, "macro.dbt_meta_testing.get_regex_match_count": {"name": "get_regex_match_count", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/required_tests/get_regex_match_count.sql", "original_file_path": "macros/utils/required_tests/get_regex_match_count.sql", "unique_id": "macro.dbt_meta_testing.get_regex_match_count", "macro_sql": "{% macro get_regex_match_count(list_of_strings, regex_to_check) %}\n\t{{ return(adapter.dispatch(\"get_regex_match_count\", \"dbt_meta_testing\")(list_of_strings, regex_to_check))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.default__get_regex_match_count"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3533492, "supported_languages": null}, "macro.dbt_meta_testing.default__get_regex_match_count": {"name": "default__get_regex_match_count", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/required_tests/get_regex_match_count.sql", "original_file_path": "macros/utils/required_tests/get_regex_match_count.sql", "unique_id": "macro.dbt_meta_testing.default__get_regex_match_count", "macro_sql": "{% macro default__get_regex_match_count(list_of_strings, regex_to_check) %}\n\n    {# Return count of strings in list_of_strings that match regex_to_check #}\n    {% set matches = [] %}\n    {% for string in list_of_strings %}\n        {% set match = modules.re.fullmatch(regex_to_check, string) %}\n        {% if match %}{% do matches.append(match) %}{% endif %}\n    {% endfor %}\n\n    {% do return(matches | length) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.353825, "supported_languages": null}, "macro.dbt_meta_testing.tests_per_model": {"name": "tests_per_model", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/required_tests/tests_per_model.sql", "original_file_path": "macros/utils/required_tests/tests_per_model.sql", "unique_id": "macro.dbt_meta_testing.tests_per_model", "macro_sql": "{% macro tests_per_model() %}\n\t{{ return(adapter.dispatch(\"tests_per_model\", \"dbt_meta_testing\")())}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.default__tests_per_model"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.354452, "supported_languages": null}, "macro.dbt_meta_testing.default__tests_per_model": {"name": "default__tests_per_model", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/required_tests/tests_per_model.sql", "original_file_path": "macros/utils/required_tests/tests_per_model.sql", "unique_id": "macro.dbt_meta_testing.default__tests_per_model", "macro_sql": "{% macro default__tests_per_model() %}\n\n    {# /*\n    Construct a dict of all models and their schema tests in the current project.\n    */ #}\n\n    {% set enabled_model_names = dbt_meta_testing.fetch_configured_models(\"enabled\", resource_type=\"model\") | map(attribute=\"unique_id\") | list %}\n    {% set enabled_test_nodes = dbt_meta_testing.fetch_configured_models(\"enabled\", resource_type=\"test\") %}\n    \n    -- Create `result` dict with all enabled models unique_id's as keys and empty lists as values\n    {% set result = {} %}\n    {% for id in enabled_model_names %}{% do result.update({id: []}) %}{% endfor %}\n    \n    {% for test_node in enabled_test_nodes %}\n        {% for dependent_node in test_node.depends_on.nodes %}\n            {% if dependent_node.startswith('model.') %}\n                -- Use common names for schema tests, (e.g. \"unique\") under the \"test_metadata\" key\n                {% set test_identifier = test_node.get(\"test_metadata\",{}).get(\"name\") or test_node[\"name\"] %}\n                {% do result[dependent_node].append(test_identifier) %}\n            {% endif %}\n        {% endfor %}\n    {% endfor %}\n\n    {% do return(result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.fetch_configured_models"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3555882, "supported_languages": null}, "macro.dbt_meta_testing.error_required_docs": {"name": "error_required_docs", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/errors/error_required_docs.sql", "original_file_path": "macros/utils/errors/error_required_docs.sql", "unique_id": "macro.dbt_meta_testing.error_required_docs", "macro_sql": "{% macro error_required_docs(missing_model_errors, missing_columns_errors, missing_description_errors) %}\n\t{{ return(\n        adapter.dispatch(\"error_required_docs\", \n        \"dbt_meta_testing\")(\n            missing_model_errors, \n            missing_columns_errors, \n            missing_description_errors\n            )\n        ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.default__error_required_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3563468, "supported_languages": null}, "macro.dbt_meta_testing.default__error_required_docs": {"name": "default__error_required_docs", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/errors/error_required_docs.sql", "original_file_path": "macros/utils/errors/error_required_docs.sql", "unique_id": "macro.dbt_meta_testing.default__error_required_docs", "macro_sql": "{% macro default__error_required_docs(\n            missing_model_errors, \n            missing_columns_errors, \n            missing_description_errors\n            ) %}\n\n    {% set all_errors = [] %}\n    {% if missing_model_errors | length > 0 %}\n\n        {% do all_errors.append(\"The following models are missing descriptions:\") %}\n        {% do all_errors.append(dbt_meta_testing.format_error_docs(missing_model_errors)) %}{% endif %}\n\n    {% if missing_columns_errors | length > 0 %}\n\n        {% do all_errors.append(\"The following columns are missing from the model yml:\") %}\n        {% do all_errors.append(dbt_meta_testing.format_error_docs(missing_columns_errors)) %}{% endif %}\n\n    {% if missing_description_errors | length > 0 %}\n\n        {% do all_errors.append(\"The following columns are missing descriptions:\") %}\n        {% do all_errors.append(dbt_meta_testing.format_error_docs(missing_description_errors)) %}{% endif %}\n\n    {{ return(all_errors | join(\"\\n\")) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.format_error_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.357245, "supported_languages": null}, "macro.dbt_meta_testing.error_invalid_config_docs": {"name": "error_invalid_config_docs", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/errors/error_invalid_config_docs.sql", "original_file_path": "macros/utils/errors/error_invalid_config_docs.sql", "unique_id": "macro.dbt_meta_testing.error_invalid_config_docs", "macro_sql": "{% macro error_invalid_config_docs() %}\n\t{{ return(adapter.dispatch(\"error_invalid_config_docs\", \"dbt_meta_testing\")(varargs))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.default__error_invalid_config_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.357588, "supported_languages": null}, "macro.dbt_meta_testing.default__error_invalid_config_docs": {"name": "default__error_invalid_config_docs", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/errors/error_invalid_config_docs.sql", "original_file_path": "macros/utils/errors/error_invalid_config_docs.sql", "unique_id": "macro.dbt_meta_testing.default__error_invalid_config_docs", "macro_sql": "{% macro default__error_invalid_config_docs(varargs) %}\n   \n    {% set error %}\n    Invalid 'required_docs' configuration.  \n    Expected boolean. Received: '{{ varargs[0] }}'\n    on model '{{ varargs[1] }}'\n    {% endset %}\n\n    {{ return(error) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3578591, "supported_languages": null}, "macro.dbt_meta_testing.error_required_tests": {"name": "error_required_tests", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/errors/error_required_tests.sql", "original_file_path": "macros/utils/errors/error_required_tests.sql", "unique_id": "macro.dbt_meta_testing.error_required_tests", "macro_sql": "{% macro error_required_tests() %}\n\t{{ return(adapter.dispatch(\"error_required_tests\", \"dbt_meta_testing\")(varargs))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.default__error_required_tests"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.358175, "supported_languages": null}, "macro.dbt_meta_testing.default__error_required_tests": {"name": "default__error_required_tests", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/errors/error_required_tests.sql", "original_file_path": "macros/utils/errors/error_required_tests.sql", "unique_id": "macro.dbt_meta_testing.default__error_required_tests", "macro_sql": "{% macro default__error_required_tests(varargs) %}\n\n    {% set all_errors = [\"Insufficient test coverage from the 'required_tests' config on the following models:\"]\n        + dbt_meta_testing.format_error_tests(varargs[0]) %}\n        \n    {{ return(all_errors | join('\\n')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.format_error_tests"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.358467, "supported_languages": null}, "macro.dbt_meta_testing.errors_invalid_config_tests": {"name": "errors_invalid_config_tests", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/errors/error_invalid_config_tests.sql", "original_file_path": "macros/utils/errors/error_invalid_config_tests.sql", "unique_id": "macro.dbt_meta_testing.errors_invalid_config_tests", "macro_sql": "{% macro errors_invalid_config_tests() %}\n\t{{ return(adapter.dispatch(\"errors_invalid_config_tests\", \"dbt_meta_testing\")(varargs))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_meta_testing.default__errors_invalid_config_tests"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.358801, "supported_languages": null}, "macro.dbt_meta_testing.default__errors_invalid_config_tests": {"name": "default__errors_invalid_config_tests", "resource_type": "macro", "package_name": "dbt_meta_testing", "path": "macros/utils/errors/error_invalid_config_tests.sql", "original_file_path": "macros/utils/errors/error_invalid_config_tests.sql", "unique_id": "macro.dbt_meta_testing.default__errors_invalid_config_tests", "macro_sql": "{% macro default__errors_invalid_config_tests(varargs) %}\n\n    {% set error %}\n    Invalid 'required_tests' configuration.\n    Expected dict or None. Received: '{{ varargs[0] }}'\n    on model '{{ varargs[1] }}'\n    {% endset %}\n\n    {{ return(error) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.359078, "supported_languages": null}, "macro.codegen.generate_model_import_ctes": {"name": "generate_model_import_ctes", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_import_ctes.sql", "original_file_path": "macros/generate_model_import_ctes.sql", "unique_id": "macro.codegen.generate_model_import_ctes", "macro_sql": "{% macro generate_model_import_ctes(model_name, leading_commas = False) %}\n    {{ return(adapter.dispatch('generate_model_import_ctes', 'codegen')(model_name, leading_commas)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_model_import_ctes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.367202, "supported_languages": null}, "macro.codegen.default__generate_model_import_ctes": {"name": "default__generate_model_import_ctes", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_import_ctes.sql", "original_file_path": "macros/generate_model_import_ctes.sql", "unique_id": "macro.codegen.default__generate_model_import_ctes", "macro_sql": "{% macro default__generate_model_import_ctes(model_name, leading_commas) %}\n\n    {%- if execute -%}\n    {%- set nodes = graph.nodes.values() -%}\n\n    {%- set model = (nodes\n        | selectattr('name', 'equalto', model_name) \n        | selectattr('resource_type', 'equalto', 'model')\n        | list).pop() -%}\n\n    {%- set model_raw_sql = model.raw_sql or model.raw_code -%}\n    {%- else -%}\n    {%- set model_raw_sql = '' -%}\n    {%- endif -%}\n\n    {#-\n\n        REGEX Explanations\n\n        # with_regex\n        - matches (start of file followed by anything then whitespace\n        or whitespace\n        or a comma) followed by the word with then a space   \n\n        # from_ref \n        - matches (from or join) followed by some spaces and then {{ref(<something>)}}\n\n        # from_source \n        - matches (from or join) followed by some spaces and then {{source(<something>,<something_else>)}}\n\n        # from_var_1\n        - matches (from or join) followed by some spaces and then {{var(<something>)}}\n\n        # from_var_2\n        - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n\n        # from_table_1\n        - matches (from or join) followed by some spaces and then <something>.<something_else>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_2\n        - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_3\n        - matches (from or join) followed by some spaces and then <something>\n          where <something> is enclosed by (` or [ or \" or ')\n\n        # config block\n        - matches the start of the file followed by anything and then {{config(<something>)}}\n\n    -#}\n\n    {%- set re = modules.re -%}\n\n    {%- set with_regex = '(?i)(?s)(^.*\\s*|\\s+|,)with\\s' -%}\n    {%- set does_raw_sql_contain_cte = re.search(with_regex, model_raw_sql) -%}\n\n    {%- set from_regexes = {\n        'from_ref':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), ref, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*ref\\s*\\(\\s*[\\'\\\"]?)\n            \n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n            \n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n        \n            ',\n        'from_source':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), source, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*source\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a comma\n            (,)\n\n            # sixth matching group\n            # 0 or more whitespace character(s), 1 or 0 quotation mark\n            (\\s*[\\'\\\"]?)\n\n            # seventh matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # eighth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # ninth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n\n            ',\n        'from_var_1':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n            \n            ',\n        'from_var_2':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n            \n            # second matching group\n            # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark            \n            ([^)\\'\\\"]+)\n            \n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a comma\n            (,)\n\n            # sixth matching group\n            # 0 or more whitespace character(s), 1 or 0 quotation mark            \n            (\\s*[\\'\\\"]?)\n\n            # seventh matching group\n            # at least 1 of anything except a parenthesis or quotation mark            \n            ([^)\\'\\\"]+)\n\n            # eighth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)            \n            ([\\'\\\"]?\\s*)\n\n            # ninth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}            \n            (\\)\\s*}})\n            \n            ',\n        'from_table_1':\n            '(?ix)\n            \n            # first matching group\n            # from or join followed by at least 1 whitespace character            \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n            \n            # third matching group\n            # at least 1 word character\n            (\\w+)\n            \n            # fouth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)\n            ([\\]`\\\"\\']?)\n            \n            # fifth matching group\n            # a period\n            (\\.)\n            \n            # sixth matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n            \n            # seventh matching group\n            # at least 1 word character\n            (\\w+)\n            \n            # eighth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\']?)(?=\\s|$)\n            \n            ',\n        'from_table_2':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)            \n            ([\\[`\\\"\\']?)\n            \n            # third matching group\n            # at least 1 word character\n            (\\w+)\n\n            # fouth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)            \n            ([\\]`\\\"\\']?)\n            \n            # fifth matching group\n            # a period            \n            (\\.)\n            \n            # sixth matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n\n            # seventh matching group\n            # at least 1 word character            \n            (\\w+)\n            \n            # eighth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) \n            ([\\]`\\\"\\']?)\n            \n            # ninth matching group\n            # a period             \n            (\\.)\n            \n            # tenth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)             \n            ([\\[`\\\"\\']?)\n            \n            # eleventh matching group\n            # at least 1 word character   \n            (\\w+)\n\n            # twelfth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\']?)(?=\\s|$)\n            \n            ',\n        'from_table_3':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character             \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)            \n            ([\\[`\\\"\\'])\n            \n            # third matching group\n            # at least 1 word character or space \n            ([\\w ]+)\n\n            # fourth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\'])(?=\\s|$)\n            \n            ',\n        'config_block':'(?i)(?s)^.*{{\\s*config\\s*\\([^)]+\\)\\s*}}'\n    } -%}\n\n    {%- set from_list = [] -%}\n    {%- set config_list = [] -%}\n    {%- set ns = namespace(model_sql = model_raw_sql) -%}\n\n    {%- for regex_name, regex_pattern in from_regexes.items() -%}\n\n        {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql) -%}\n\n        {%- for match in all_regex_matches -%}\n\n            {%- if regex_name == 'config_block' -%}\n                {%- set match_tuple = (match|trim, regex_name) -%}\n                {%- do config_list.append(match_tuple) -%}\n            {%- elif regex_name == 'from_source' -%}    \n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = 'source_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%} \n            {%- elif regex_name == 'from_table_1' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}   \n            {%- elif regex_name == 'from_table_2' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower + '_' + match[10]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}                     \n            {%- else -%}\n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = match[2]|trim|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n        {%- if regex_name == 'config_block' -%}\n        {%- elif regex_name == 'from_source' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> source_\\g<7>', ns.model_sql) -%}            \n        {%- elif regex_name == 'from_table_1' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>', ns.model_sql) -%}     \n        {%- elif regex_name == 'from_table_2' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>_\\g<11>', ns.model_sql) -%} \n        {%- else -%}   \n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>', ns.model_sql) -%}         \n        {% endif %}\n\n    {%- endfor -%}\n\n{%- if from_list|length > 0 -%}\n\n{%- set model_import_ctes -%}\n\n    {%- for config_obj in config_list -%}\n\n    {%- set ns.model_sql = ns.model_sql|replace(config_obj[0], '') -%}\n\n{{ config_obj[0] }}\n\n{% endfor -%}\n\n    {%- for from_obj in from_list|unique|sort -%}\n\n{%- if loop.first -%}with {% else -%}{%- if leading_commas -%},{%- endif -%}{%- endif -%}{{ from_obj[0] }} as (\n\n    select * from {{ from_obj[1] }}\n    {%- if from_obj[2] == 'from_source' and from_list|length > 1 %} \n    -- CAUTION: It's best practice to create staging layer for raw sources\n    {%- elif from_obj[2] == 'from_table_1' or from_obj[2] == 'from_table_2' or from_obj[2] == 'from_table_3' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a direct reference\n    {%- elif from_obj[2] == 'from_var_1' or from_obj[2] == 'from_var_2' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a var\n    {%- endif %}\n  \n){%- if ((loop.last and does_raw_sql_contain_cte) or (not loop.last)) and not leading_commas -%},{%- endif %}\n\n{% endfor -%}\n\n{%- if does_raw_sql_contain_cte -%}\n    {%- if leading_commas -%}\n        {%- set replace_with = '\\g<1>,' -%}\n    {%- else -%}\n        {%- set replace_with = '\\g<1>' -%}\n    {%- endif -%}\n{{ re.sub(with_regex, replace_with, ns.model_sql, 1)|trim }}\n{%- else -%}\n{{ ns.model_sql|trim }}\n{%- endif -%}\n\n{%- endset -%}\n\n{%- else -%}\n\n{% set model_import_ctes = model_raw_sql %}\n\n{%- endif -%}\n\n{%- if execute -%}\n\n{{ print(model_import_ctes) }}\n{% do return(model_import_ctes) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.372938, "supported_languages": null}, "macro.codegen.generate_column_yaml": {"name": "generate_column_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_column_yaml", "macro_sql": "{% macro generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types, parent_column_name=\"\") %}\n  {{ return(adapter.dispatch('generate_column_yaml', 'codegen')(column, model_yaml, column_desc_dict, include_data_types, parent_column_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.375621, "supported_languages": null}, "macro.codegen.default__generate_column_yaml": {"name": "default__generate_column_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.default__generate_column_yaml", "macro_sql": "{% macro default__generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types, parent_column_name) %}\n    {% if parent_column_name %}\n        {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n    {% else %}\n        {% set column_name = column.name %}\n    {% endif %}\n\n    {% do model_yaml.append('      - name: ' ~ column_name  | lower ) %}\n    {% if include_data_types %}\n        {% do model_yaml.append('        data_type: ' ~ codegen.data_type_format_model(column)) %}\n    {% endif %}\n    {% do model_yaml.append('        description: \"' ~ column_desc_dict.get(column.name | lower,'') ~ '\"') %}\n    {% do model_yaml.append('') %}\n\n    {% if column.fields|length > 0 %}\n        {% for child_column in column.fields %}\n            {% set model_yaml = codegen.generate_column_yaml(child_column, model_yaml, column_desc_dict, include_data_types, parent_column_name=column_name) %}\n        {% endfor %}\n    {% endif %}\n    {% do return(model_yaml) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.data_type_format_model", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.376735, "supported_languages": null}, "macro.codegen.generate_model_yaml": {"name": "generate_model_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_names=[], upstream_descriptions=False, include_data_types=True) -%}\n  {{ return(adapter.dispatch('generate_model_yaml', 'codegen')(model_names, upstream_descriptions, include_data_types)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_model_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.377038, "supported_languages": null}, "macro.codegen.default__generate_model_yaml": {"name": "default__generate_model_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.default__generate_model_yaml", "macro_sql": "{% macro default__generate_model_yaml(model_names, upstream_descriptions, include_data_types) %}\n\n    {% set model_yaml=[] %}\n\n    {% do model_yaml.append('version: 2') %}\n    {% do model_yaml.append('') %}\n    {% do model_yaml.append('models:') %}\n\n    {% if model_names is string %}\n        {{ exceptions.raise_compiler_error(\"The `model_names` argument must always be a list, even if there is only one model.\") }}\n    {% else %}\n        {% for model in model_names %}\n            {% do model_yaml.append('  - name: ' ~ model | lower) %}\n            {% do model_yaml.append('    description: \"\"') %}\n            {% do model_yaml.append('    columns:') %}\n\n            {% set relation=ref(model) %}\n            {%- set columns = adapter.get_columns_in_relation(relation) -%}\n            {% set column_desc_dict =  codegen.build_dict_column_descriptions(model) if upstream_descriptions else {} %}\n\n            {% for column in columns %}\n                {% set model_yaml = codegen.generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types) %}\n            {% endfor %}\n        {% endfor %}\n    {% endif %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ print(joined) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.build_dict_column_descriptions", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.378419, "supported_languages": null}, "macro.codegen.create_base_models": {"name": "create_base_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/create_base_models.sql", "original_file_path": "macros/create_base_models.sql", "unique_id": "macro.codegen.create_base_models", "macro_sql": "{% macro create_base_models(source_name, tables) %}\n    {{ return(adapter.dispatch('create_base_models', 'codegen')(source_name, tables)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__create_base_models"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.378884, "supported_languages": null}, "macro.codegen.default__create_base_models": {"name": "default__create_base_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/create_base_models.sql", "original_file_path": "macros/create_base_models.sql", "unique_id": "macro.codegen.default__create_base_models", "macro_sql": "{% macro default__create_base_models(source_name, tables) %}\n\n{% set source_name = \"\"~ source_name ~\"\" %}\n\n{% set zsh_command_models = \"source dbt_packages/codegen/bash_scripts/base_model_creation.sh \"\"\"~ source_name ~\"\"\" \" %}\n\n{%- set models_array = [] -%}\n\n{% for t in tables %}\n    {% set help_command = zsh_command_models + t %}\n    {{ models_array.append(help_command) }}\n{% endfor %}\n\n{{ log(\"Run these commands in your shell to generate the models:\\n\" ~ models_array|join(' && \\n'), info=True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3794508, "supported_languages": null}, "macro.codegen.generate_base_model": {"name": "generate_base_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "unique_id": "macro.codegen.generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False, case_sensitive_cols=False, materialized=None) %}\n  {{ return(adapter.dispatch('generate_base_model', 'codegen')(source_name, table_name, leading_commas, case_sensitive_cols, materialized)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_base_model"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.380801, "supported_languages": null}, "macro.codegen.default__generate_base_model": {"name": "default__generate_base_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "unique_id": "macro.codegen.default__generate_base_model", "macro_sql": "{% macro default__generate_base_model(source_name, table_name, leading_commas, case_sensitive_cols, materialized) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\n\n{%- if materialized is not none -%}\n    {{ \"{{ config(materialized='\" ~ materialized ~ \"') }}\" }}\n{%- endif %}\n\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ print(base_model_sql) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3822038, "supported_languages": null}, "macro.codegen.get_tables_in_schema": {"name": "get_tables_in_schema", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.385348, "supported_languages": null}, "macro.codegen.generate_source": {"name": "generate_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, include_data_types=True, table_pattern='%', exclude='', name=schema_name, table_names=None, include_database=False, include_schema=False) %}\n    {{ return(adapter.dispatch('generate_source', 'codegen')(schema_name, database_name, generate_columns, include_descriptions, include_data_types, table_pattern, exclude, name, table_names, include_database, include_schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.385931, "supported_languages": null}, "macro.codegen.default__generate_source": {"name": "default__generate_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.default__generate_source", "macro_sql": "{% macro default__generate_source(schema_name, database_name, generate_columns, include_descriptions, include_data_types, table_pattern, exclude, name, table_names, include_database, include_schema) %}\n\n{% set sources_yaml=[] %}\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ name | lower) %}\n\n{% if include_descriptions %}\n    {% do sources_yaml.append('    description: \"\"' ) %}\n{% endif %}\n\n{% if database_name != target.database or include_database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% if schema_name != name or include_schema %}\n{% do sources_yaml.append('    schema: ' ~ schema_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% if table_names is none %}\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n{% else %}\n{% set tables = table_names %}\n{% endif %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n    {% if include_descriptions %}\n        {% do sources_yaml.append('        description: \"\"' ) %}\n    {% endif %}\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_data_types %}\n                {% do sources_yaml.append('            data_type: ' ~ codegen.data_type_format_source(column)) %}\n            {% endif %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ print(joined) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_tables_in_schema", "macro.codegen.data_type_format_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.388482, "supported_languages": null}, "macro.codegen.format_column": {"name": "format_column", "resource_type": "macro", "package_name": "codegen", "path": "macros/vendored/dbt_core/format_column.sql", "original_file_path": "macros/vendored/dbt_core/format_column.sql", "unique_id": "macro.codegen.format_column", "macro_sql": "{% macro format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3889549, "supported_languages": null}, "macro.codegen.get_model_dependencies": {"name": "get_model_dependencies", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_model_dependencies", "macro_sql": "{% macro get_model_dependencies(model_name) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {{ return(node.depends_on.nodes) }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.390603, "supported_languages": null}, "macro.codegen.add_model_column_descriptions_to_dict": {"name": "add_model_column_descriptions_to_dict", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.add_model_column_descriptions_to_dict", "macro_sql": "{% macro add_model_column_descriptions_to_dict(model_name,dict_with_descriptions={}) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {% for col_name, col_values in node.columns.items() %}\n            {% do dict_with_descriptions.update( {col_name: col_values.description} ) %}\n        {% endfor %}\n    {% endfor %}\n    {{ return(dict_with_descriptions) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.391127, "supported_languages": null}, "macro.codegen.build_dict_column_descriptions": {"name": "build_dict_column_descriptions", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.build_dict_column_descriptions", "macro_sql": "{% macro build_dict_column_descriptions(model_name) %}\n    {% if execute %}\n        {% set glob_dict = {} %}\n        {% for full_model in codegen.get_model_dependencies(model_name) %}\n            {% do codegen.add_model_column_descriptions_to_dict(full_model.split('.')[-1],glob_dict) %}\n        {% endfor %}\n        {{ return(glob_dict) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_model_dependencies", "macro.codegen.add_model_column_descriptions_to_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.391598, "supported_languages": null}, "macro.codegen.get_models": {"name": "get_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_models", "macro_sql": "{% macro get_models(directory=None, prefix=None) %}\n    {% set model_names=[] %}\n    {% set models = graph.nodes.values() | selectattr('resource_type', \"equalto\", 'model') %}\n    {% if directory and prefix %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory and model.name.startswith(prefix) %}\n                {% do model_names.append(model.name) %}\n            {% endif %} \n        {% endfor %}\n    {% elif directory %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory %}\n                {% do model_names.append(model.name) %}\n            {% endif %}\n        {% endfor %}\n    {% elif prefix %}\n        {% for model in models if model.name.startswith(prefix) %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% else %}\n        {% for model in models %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% endif %}\n    {{ return(model_names) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.393142, "supported_languages": null}, "macro.codegen.data_type_format_source": {"name": "data_type_format_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.data_type_format_source", "macro_sql": "{% macro data_type_format_source(column) -%}\n  {{ return(adapter.dispatch('data_type_format_source', 'codegen')(column)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.codegen.default__data_type_format_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.393353, "supported_languages": null}, "macro.codegen.default__data_type_format_source": {"name": "default__data_type_format_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.default__data_type_format_source", "macro_sql": "{% macro default__data_type_format_source(column) %}\n    {% set formatted = codegen.format_column(column) %}\n    {{ return(formatted['data_type'] | lower) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.393597, "supported_languages": null}, "macro.codegen.data_type_format_model": {"name": "data_type_format_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.data_type_format_model", "macro_sql": "{% macro data_type_format_model(column) -%}\n  {{ return(adapter.dispatch('data_type_format_model', 'codegen')(column)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.codegen.default__data_type_format_model"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3938031, "supported_languages": null}, "macro.codegen.default__data_type_format_model": {"name": "default__data_type_format_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.default__data_type_format_model", "macro_sql": "{% macro default__data_type_format_model(column) %}\n    {% set formatted = codegen.format_column(column) %}\n    {{ return(formatted['data_type'] | lower) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.3940532, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4040189, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.406519, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.409036, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.410979, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.411791, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as datetime )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as datetime )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.412533, "supported_languages": null}, "macro.dbt_date.trino__get_base_dates": {"name": "trino__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.trino__get_base_dates", "macro_sql": "{% macro trino__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.now()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.413353, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.414177, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4148202, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.415066, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"(row_number() over (order by 1) - 1)\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4154649, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.416426, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.416874, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.417082, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.417643, "supported_languages": null}, "macro.dbt_date.date": {"name": "date", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/modules_datetime.sql", "original_file_path": "macros/_utils/modules_datetime.sql", "unique_id": "macro.dbt_date.date", "macro_sql": "{% macro date(year, month, day) %}\n    {{ return(modules.datetime.date(year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.41803, "supported_languages": null}, "macro.dbt_date.datetime": {"name": "datetime", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/modules_datetime.sql", "original_file_path": "macros/_utils/modules_datetime.sql", "unique_id": "macro.dbt_date.datetime", "macro_sql": "{% macro datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tz=None) %}\n    {% set tz = tz if tz else var(\"dbt_date:time_zone\") %}\n    {{ return(\n        modules.datetime.datetime(\n            year=year, month=month, day=day, hour=hour,\n            minute=minute, second=second, microsecond=microsecond,\n            tzinfo=modules.pytz.timezone(tz)\n        )\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.418632, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.420765, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith fsc_date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        fsc_date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        fsc_date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        fsc_date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.421452, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.422564, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4228091, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.423006, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.423342, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.423549, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4244978, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4247282, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.424961, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.425306, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.425714, "supported_languages": null}, "macro.dbt_date.duckdb__day_name": {"name": "duckdb__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.duckdb__day_name", "macro_sql": "\n\n{%- macro duckdb__day_name(date, short) -%}\n    {%- if short -%}\n    substr(dayname({{ date }}), 1, 3)\n    {%- else -%}\n    dayname({{ date }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4259992, "supported_languages": null}, "macro.dbt_date.spark__day_name": {"name": "spark__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.spark__day_name", "macro_sql": "\n\n{%- macro spark__day_name(date, short) -%}\n{%- set f = 'E' if short else 'EEEE' -%}\n    date_format({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4262981, "supported_languages": null}, "macro.dbt_date.trino__day_name": {"name": "trino__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.trino__day_name", "macro_sql": "\n\n{%- macro trino__day_name(date, short) -%}\n{%- set f = 'a' if short else 'W' -%}\n    date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4265978, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.427231, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.427382, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.427584, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4276962, "supported_languages": null}, "macro.dbt_date.spark__to_unixtimestamp": {"name": "spark__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.spark__to_unixtimestamp", "macro_sql": "\n\n{%- macro spark__to_unixtimestamp(timestamp) -%}\n    unix_timestamp({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.427802, "supported_languages": null}, "macro.dbt_date.trino__to_unixtimestamp": {"name": "trino__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.trino__to_unixtimestamp", "macro_sql": "\n\n{%- macro trino__to_unixtimestamp(timestamp) -%}\n    to_unixtime({{ timestamp }} AT TIME ZONE 'UTC')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.428013, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4283671, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.429124, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.429329, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.429858, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.430201, "supported_languages": null}, "macro.dbt_date.duckdb__week_start": {"name": "duckdb__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.duckdb__week_start", "macro_sql": "\n\n{%- macro duckdb__week_start(date) -%}\n{{ return(dbt_date.postgres__week_start(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4304159, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4312918, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4314592, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.431602, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.43183, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.432076, "supported_languages": null}, "macro.dbt_date.duckdb__iso_week_start": {"name": "duckdb__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.duckdb__iso_week_start", "macro_sql": "\n\n{%- macro duckdb__iso_week_start(date) -%}\n{{ return(dbt_date.postgres__iso_week_start(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.43228, "supported_languages": null}, "macro.dbt_date.spark__iso_week_start": {"name": "spark__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.spark__iso_week_start", "macro_sql": "\n\n{%- macro spark__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.432468, "supported_languages": null}, "macro.dbt_date.trino__iso_week_start": {"name": "trino__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.trino__iso_week_start", "macro_sql": "\n\n{%- macro trino__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.432611, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.433048, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4332669, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.43349, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.433825, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4341261, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4343941, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.435029, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4352179, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4354188, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.435781, "supported_languages": null}, "macro.dbt_date.spark__day_of_year": {"name": "spark__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.spark__day_of_year", "macro_sql": "\n\n{%- macro spark__day_of_year(date) -%}\n    dayofyear({{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.436039, "supported_languages": null}, "macro.dbt_date.trino__day_of_year": {"name": "trino__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.trino__day_of_year", "macro_sql": "\n\n{%- macro trino__day_of_year(date) -%}\n    {{ dbt_date.date_part('day_of_year', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.43624, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/round_timestamp.sql", "original_file_path": "macros/calendar_date/round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.436564, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4399722, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.440316, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.440654, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.441252, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4417212, "supported_languages": null}, "macro.dbt_date.trino__from_unixtimestamp": {"name": "trino__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.trino__from_unixtimestamp", "macro_sql": "\n\n{%- macro trino__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        cast(from_unixtime({{ epochs }}) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"milliseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }} * pow(10, 6)) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"microseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }} * pow(10, 3)) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"nanoseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }}) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.442514, "supported_languages": null}, "macro.dbt_date.duckdb__from_unixtimestamp": {"name": "duckdb__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.duckdb__from_unixtimestamp", "macro_sql": "\n\n\n{%- macro duckdb__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4428391, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.443279, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.443734, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.443889, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4440598, "supported_languages": null}, "macro.dbt_date.trino__date_part": {"name": "trino__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.trino__date_part", "macro_sql": "{% macro trino__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4442291, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.444643, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.444961, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.445172, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.445441, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.449919, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.450274, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4508219, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4511611, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4516668, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4521759, "supported_languages": null}, "macro.dbt_date.duckdb__day_of_week": {"name": "duckdb__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.duckdb__day_of_week", "macro_sql": "\n\n{%- macro duckdb__day_of_week(date, isoweek) -%}\n{{ return(dbt_date.postgres__day_of_week(date, isoweek)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.452377, "supported_languages": null}, "macro.dbt_date.spark__day_of_week": {"name": "spark__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.spark__day_of_week", "macro_sql": "\n\n\n{%- macro spark__day_of_week(date, isoweek) -%}\n\n    {%- set dow = \"dayofweek_iso\" if isoweek else \"dayofweek\" -%}\n\n    {{ dbt_date.date_part(dow, date) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.452621, "supported_languages": null}, "macro.dbt_date.trino__day_of_week": {"name": "trino__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.trino__day_of_week", "macro_sql": "\n\n\n{%- macro trino__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('day_of_week', date) -%}\n\n    {%- if isoweek -%}\n        {{ dow }}\n    {%- else -%}\n        case\n            when {{ dow }} = 7 then 1\n            else {{ dow }} + 1\n        end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4529762, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.453589, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.453869, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4540758, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.454265, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.454695, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.45552, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.455762, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.45603, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.456254, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.45648, "supported_languages": null}, "macro.dbt_date.duckdb__month_name": {"name": "duckdb__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.duckdb__month_name", "macro_sql": "\n\n\n{%- macro duckdb__month_name(date, short) -%}\n    {%- if short -%}\n    substr(monthname({{ date }}), 1, 3)\n    {%- else -%}\n    monthname({{ date }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.456715, "supported_languages": null}, "macro.dbt_date.spark__month_name": {"name": "spark__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.spark__month_name", "macro_sql": "\n\n{%- macro spark__month_name(date, short) -%}\n{%- set f = 'MMM' if short else 'MMMM' -%}\n    date_format({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.457039, "supported_languages": null}, "macro.dbt_date.trino__month_name": {"name": "trino__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.trino__month_name", "macro_sql": "\n\n{%- macro trino__month_name(date, short) -%}\n{%- set f = 'b' if short else 'M' -%}\n    date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.457324, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.45761, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.458146, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.458362, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.458534, "supported_languages": null}, "macro.dbt_date.duckdb__week_of_year": {"name": "duckdb__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.duckdb__week_of_year", "macro_sql": "\n\n{%- macro duckdb__week_of_year(date) -%}\ncast(ceil(dayofyear({{ date }}) / 7) as int)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4586492, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.bigquery__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4601972, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.460476, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.46067, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.460981, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.461237, "supported_languages": null}, "macro.dbt_date.duckdb__convert_timezone": {"name": "duckdb__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.duckdb__convert_timezone", "macro_sql": "{% macro duckdb__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.postgres__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.postgres__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.461466, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.461665, "supported_languages": null}, "macro.dbt_date.trino__convert_timezone": {"name": "trino__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.trino__convert_timezone", "macro_sql": "{%- macro trino__convert_timezone(column, target_tz, source_tz) -%}\n    cast((at_timezone(with_timezone(cast({{ column }} as {{ dbt.type_timestamp() }}), '{{ source_tz }}'), '{{ target_tz }}')) as {{ dbt.type_timestamp() }})\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.461977, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.462395, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.463279, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.463507, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.463679, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.463839, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.464355, "supported_languages": null}, "macro.dbt_date.duckdb__iso_week_of_year": {"name": "duckdb__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.duckdb__iso_week_of_year", "macro_sql": "\n\n{%- macro duckdb__iso_week_of_year(date) -%}\n{{ return(dbt_date.postgres__iso_week_of_year(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.464531, "supported_languages": null}, "macro.dbt_date.spark__iso_week_of_year": {"name": "spark__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.spark__iso_week_of_year", "macro_sql": "\n\n{%- macro spark__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.464714, "supported_languages": null}, "macro.dbt_date.trino__iso_week_of_year": {"name": "trino__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.trino__iso_week_of_year", "macro_sql": "\n\n{%- macro trino__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.464894, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.465547, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4657102, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4659562, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.466238, "supported_languages": null}, "macro.dbt_date.duckdb__week_end": {"name": "duckdb__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.duckdb__week_end", "macro_sql": "\n\n{%- macro duckdb__week_end(date) -%}\n{{ return(dbt_date.postgres__week_end(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.466419, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.466688, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.466944, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.467554, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.467645, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.467741, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4678311, "supported_languages": null}, "macro.dbt_expectations.trino__type_timestamp": {"name": "trino__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.trino__type_timestamp", "macro_sql": "{% macro trino__type_timestamp() -%}\n    timestamp(3)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.467917, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"name": "type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.46811, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"name": "default__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.468214, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"name": "snowflake__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.468309, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"name": "postgres__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4684029, "supported_languages": null}, "macro.dbt_expectations.duckdb__type_datetime": {"name": "duckdb__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.duckdb__type_datetime", "macro_sql": "{% macro duckdb__type_datetime() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.468524, "supported_languages": null}, "macro.dbt_expectations.spark__type_datetime": {"name": "spark__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.spark__type_datetime", "macro_sql": "{% macro spark__type_datetime() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.468708, "supported_languages": null}, "macro.dbt_expectations.trino__type_datetime": {"name": "trino__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.trino__type_datetime", "macro_sql": "{% macro trino__type_datetime() -%}\n    timestamp(3)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.468811, "supported_languages": null}, "macro.dbt_expectations.md5": {"name": "md5", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/md5.sql", "original_file_path": "macros/utils/md5.sql", "unique_id": "macro.dbt_expectations.md5", "macro_sql": "{%- macro md5(string_value) -%}\n    {{ return(adapter.dispatch('md5', 'dbt_expectations')(string_value)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__md5"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.469217, "supported_languages": null}, "macro.dbt_expectations.default__md5": {"name": "default__md5", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/md5.sql", "original_file_path": "macros/utils/md5.sql", "unique_id": "macro.dbt_expectations.default__md5", "macro_sql": "\n\n{%- macro default__md5(string_value) -%}\n\n  {{ dbt.hash(string_value) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.469395, "supported_languages": null}, "macro.dbt_expectations.trino__md5": {"name": "trino__md5", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/md5.sql", "original_file_path": "macros/utils/md5.sql", "unique_id": "macro.dbt_expectations.trino__md5", "macro_sql": "{%- macro trino__md5(string_value) -%}\n\n  md5(cast({{ string_value }} as varbinary))\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.469534, "supported_languages": null}, "macro.dbt_expectations.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.469852, "supported_languages": null}, "macro.dbt_expectations.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.470172, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"name": "regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw, flags\n    ) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.bigquery__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.47222, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"name": "default__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{# unclear if other databases support raw strings or flags #}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.472627, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"name": "snowflake__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.473182, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"name": "bigquery__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}\n    {{ dbt_expectations._validate_re2_flags(flags) }}\n    {# BigQuery prepends \"(?flags)\" to set flags for current group #}\n    {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n{% endif %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.473762, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"name": "postgres__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\ncoalesce(array_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1), 0)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.474166, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"name": "redshift__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.474561, "supported_languages": null}, "macro.dbt_expectations.duckdb__regexp_instr": {"name": "duckdb__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.duckdb__regexp_instr", "macro_sql": "{% macro duckdb__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.474907, "supported_languages": null}, "macro.dbt_expectations.spark__regexp_instr": {"name": "spark__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nlength(regexp_extract({{ source_value }}, '{{ regexp }}', 0))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.475253, "supported_languages": null}, "macro.dbt_expectations.trino__regexp_instr": {"name": "trino__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.trino__regexp_instr", "macro_sql": "{% macro trino__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n    {% if flags %}\n        {{ dbt_expectations._validate_re2_flags(flags) }}\n        {# Trino prepends \"(?flags)\" to set flags for current group #}\n        {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n    {% endif %}\n    {% if is_raw %}\n        {{ exceptions.warn(\n                \"is_raw option is not supported for this adapter \"\n                ~ \"and is being ignored.\"\n        ) }}\n    {% endif %}\n    {%- set regexp_query = \"regexp_position(\" ~ source_value ~ \", '\" ~ regexp ~ \"', \" ~ position ~ \", \" ~ occurrence ~ \")\" -%}\n    {# Trino regexp_position returns -1 if not found. Change it to 0, to be consistent with other adapters #}\n    if({{ regexp_query}} = -1, 0, {{ regexp_query}})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.47597, "supported_languages": null}, "macro.dbt_expectations._validate_flags": {"name": "_validate_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_flags", "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\n{% for flag in flags %}\n    {% if flag not in alphabet %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\n    ) }}\n    {% endif %}\n{% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.476481, "supported_languages": null}, "macro.dbt_expectations._validate_re2_flags": {"name": "_validate_re2_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_re2_flags", "macro_sql": "{% macro _validate_re2_flags(flags) %}\n{# Re2 supports following flags: #}\n{# i  :  case-insensitive (default fault) #}\n{# m  :  multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false) #}\n{# s  :  let . match \\n (default false) #}\n{# U  :  ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false) #}\n{# Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z).  #}\n\n{# Regex explanation: do not allow consecutive dashes, accept all re2 flags and clear operator, do not end with a dash  #}\n{% set re2_flags_pattern = '^(?!.*--)[-imsU]*(?<!-)$' %}\n{% set re = modules.re %}\n{% set is_match = re.match(re2_flags_pattern, flags) %}\n{% if not is_match %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flags \" ~ flags ~ \" isn't a valid re2 flag pattern\"\n    ) }}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.477063, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"name": "log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.bigquery__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.477491, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"name": "default__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.477632, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"name": "bigquery__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.477752, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"name": "snowflake__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.47788, "supported_languages": null}, "macro.dbt_expectations.spark__log_natural": {"name": "spark__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.spark__log_natural", "macro_sql": "{% macro spark__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4780118, "supported_languages": null}, "macro.dbt_expectations.rand": {"name": "rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.bigquery__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.478417, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"name": "default__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.478505, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"name": "bigquery__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4785888, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"name": "snowflake__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4786801, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"name": "postgres__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4787588, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"name": "redshift__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4788458, "supported_languages": null}, "macro.dbt_expectations.duckdb__rand": {"name": "duckdb__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.duckdb__rand", "macro_sql": "{% macro duckdb__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.47894, "supported_languages": null}, "macro.dbt_expectations.median": {"name": "median", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "unique_id": "macro.dbt_expectations.median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.479218, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"name": "percentile_cont", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.bigquery__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4799201, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"name": "default__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4801762, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"name": "bigquery__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.480431, "supported_languages": null}, "macro.dbt_expectations.spark__quantile": {"name": "spark__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.spark__quantile", "macro_sql": "{% macro spark__quantile(field, quantile, partition) -%}\n    percentile({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4806662, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"name": "ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.481214, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"name": "default__ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.482039, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"name": "test_expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.484473, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"name": "expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.485457, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.486901, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"name": "expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4872599, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"name": "default__expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.488053, "supported_languages": null}, "macro.dbt_expectations.get_select": {"name": "get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.496564, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"name": "default__get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4972422, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"name": "test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.497843, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"name": "default__test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.4993448, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"name": "truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.499625, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"name": "default__truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.499747, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"name": "test_expect_column_values_to_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.500489, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"name": "test_expect_column_values_to_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.501966, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"name": "test_expect_column_values_to_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.503192, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"name": "test_expect_column_value_lengths_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.503959, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"name": "test_expect_column_value_lengths_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.505122, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"name": "test_expect_column_values_to_not_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.506094, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"name": "test_expect_column_values_to_not_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.507711, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"name": "test_expect_column_values_to_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.50927, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"name": "test_expect_column_values_to_not_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.5106719, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"name": "_get_like_pattern_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "unique_id": "macro.dbt_expectations._get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.510973, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"name": "test_expect_column_values_to_not_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.511849, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"name": "test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.5135171, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"name": "default__test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\n        <\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.5142038, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"name": "test_expect_table_columns_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.515541, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"name": "test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\n                                            compare_model,\n                                            group_by=None,\n                                            compare_group_by=None,\n                                            factor=1,\n                                            row_condition=None,\n                                            compare_row_condition=None\n                                        ) -%}\n\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                group_by,\n                                                compare_group_by,\n                                                factor,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.516994, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {"name": "default__test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\n                                                    compare_model,\n                                                    group_by,\n                                                    compare_group_by,\n                                                    factor,\n                                                    row_condition,\n                                                    compare_row_condition\n                                                    ) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.517396, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"name": "test_expect_table_columns_to_not_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.518686, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"name": "test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.522141, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"name": "default__test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_expectations.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.5232692, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"name": "test_expect_column_to_exist", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.524599, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"name": "test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                            value,\n                                            group_by=None,\n                                            row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.525526, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"name": "default__test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n    expression=expression,\n    group_by_columns=group_by,\n    row_condition=row_condition)\n    }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.525846, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"name": "test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\n                        'dbt_expectations') (model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.5271192, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {"name": "default__test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_be_between(model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n    expression=expression,\n    min_value=min_value,\n    max_value=max_value,\n    group_by_columns=group_by,\n    row_condition=row_condition,\n    strictly=strictly\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.527592, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by=None,\n                                                                    compare_group_by=None,\n                                                                    row_condition=None,\n                                                                    compare_row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                factor,\n                                                group_by,\n                                                compare_group_by,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.5292659, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "default__test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by,\n                                                                    compare_group_by,\n                                                                    row_condition,\n                                                                    compare_row_condition\n                                                                    ) -%}\n\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\n    compare_model,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.529612, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"name": "test_expect_table_columns_to_match_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.530992, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"name": "_get_column_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "unique_id": "macro.dbt_expectations._get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.531411, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"name": "test_expect_table_columns_to_match_ordered_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.5329752, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {"name": "test_expect_table_aggregation_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\n                                                expression,\n                                                compare_model,\n                                                compare_expression=None,\n                                                group_by=None,\n                                                compare_group_by=None,\n                                                row_condition=None,\n                                                compare_row_condition=None,\n                                                tolerance=0.0,\n                                                tolerance_percent=None\n                                                ) -%}\n\n\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    tolerance=tolerance,\n    tolerance_percent=tolerance_percent\n) }}\n\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.5337338, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"name": "_list_intersect", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "unique_id": "macro.dbt_expectations._list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.534192, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"name": "test_expect_table_column_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.534729, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"name": "test_expect_table_column_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.535159, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"name": "test_expect_table_column_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None\n                                                    ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.5362508, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"name": "test_expect_column_values_to_not_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.537235, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"name": "test_expect_column_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.538286, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"name": "test_expect_column_values_to_be_increasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.539872, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"name": "test_expect_column_values_to_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.54046, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"name": "test_expect_column_values_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.54074, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"name": "test_expect_column_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.541708, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"name": "test_expect_column_values_to_be_decreasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.543185, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"name": "test_expect_column_values_to_be_in_type_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ escape_single_quotes(column.name | upper) }}' as {{ dbt.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.544414, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"name": "test_expect_column_values_to_be_of_type", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.544677, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"name": "test_expect_column_values_to_have_consistent_casing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.545164, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"name": "test_expect_column_values_to_not_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.5457761, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"name": "test_expect_column_min_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.5468009, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"name": "test_expect_column_unique_value_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.547853, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"name": "test_expect_column_quantile_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.549035, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"name": "test_expect_column_median_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.550117, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"name": "test_expect_column_proportion_of_unique_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncast(count(distinct {{ column_name }}) as {{ dbt.type_float() }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_float", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.551362, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"name": "test_expect_column_distinct_values_to_equal_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.5524192, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"name": "test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\n                                                       column_name,\n                                                       value_set,\n                                                       top_n,\n                                                       quote_values=True,\n                                                       data_type=\"decimal\",\n                                                       row_condition=None\n                                                       ) -%}\n\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\n        ) }}\n\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.5548952, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"name": "default__test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\n                                                                      column_name,\n                                                                      value_set,\n                                                                      top_n,\n                                                                      quote_values,\n                                                                      data_type,\n                                                                      row_condition\n                                                                      ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.555756, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"name": "test_expect_column_distinct_values_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.5568168, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"name": "test_expect_column_distinct_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                column_name,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.557635, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"name": "test_expect_column_distinct_count_to_be_less_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                       column_name,\n                                                       value,\n                                                       group_by=None,\n                                                       row_condition=None\n                                                       ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.5584, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"name": "test_expect_column_sum_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.559423, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"name": "test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.5615811, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"name": "default__test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.562069, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"name": "test_expect_column_mean_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.563123, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"name": "test_expect_column_max_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.564207, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"name": "test_expect_column_distinct_count_to_be_greater_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                          column_name,\n                                                          value,\n                                                          group_by=None,\n                                                          row_condition=None\n                                                          ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.5650182, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"name": "test_expect_column_distinct_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\n                                                     column_name,\n                                                     value_set,\n                                                     quote_values=True,\n                                                     row_condition=None\n                                                     ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.566092, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"name": "test_expect_column_distinct_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.5669801, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"name": "test_expect_row_values_to_have_data_for_every_n_datepart", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min(cast({{ date_col }} as date)) as start_{{ date_part }},\n            max(cast({{ date_col }} as date)) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n\n    {%- set db_start_date = dr.columns[0].values()[0] -%}\n    {%- set db_end_date = dr.columns[1].values()[0] -%}\n\n    {% if db_start_date is not string %}\n        {%- set db_start_date = db_start_date.strftime('%Y-%m-%d') -%}\n        {%- set db_end_date = db_end_date.strftime('%Y-%m-%d') -%}\n    {% endif %}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\n\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\n            cast({{interval}} as {{ dbt.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{ dbt.dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt.datediff", "macro.dbt.type_int", "macro.dbt.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.571775, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"name": "_get_metric_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations._get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.578149, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.578763, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_expectations.type_timestamp() }})\n    and\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.580416, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"name": "test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.5814898, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.5821152, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"name": "test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.584061, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"name": "default__test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by {{ columns|join(', ') }}) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ dbt_expectations.md5(column) }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression", "macro.dbt_expectations.md5"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.585726, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }},\n        {%- endfor %}\n        count(*) as {{adapter.quote(\"n_records\")}}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.5880141, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"name": "test_expect_multicolumn_sum_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{# the if just allows for column names or literal numbers #}\n{% endfor %} = {% if sum_total is number %}{{sum_total}}{% else %}sum({{ sum_total }}){% endif %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.589351, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"name": "test_expect_column_pair_values_to_be_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.590162, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"name": "test_expect_column_pair_values_A_to_be_greater_than_B", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.591011, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"name": "test_expect_column_pair_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726233318.592799, "supported_languages": null}}, "docs": {"doc.dbt_analytics_engine.orders_status": {"name": "orders_status", "resource_type": "doc", "package_name": "dbt_analytics_engine", "path": "docs.md", "original_file_path": "docs/docs.md", "unique_id": "doc.dbt_analytics_engine.orders_status", "block_contents": "Orders can be one of the following statuses:\n\n| status         | description                                                               |\n|----------------|---------------------------------------------------------------------------|\n| completed      | The order has been placed and all payments were successful                |\n| failed         | The order has been placed and at least one payment failed                 |"}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {"exposure.dbt_analytics_engine.sales_performance": {"name": "sales_performance", "resource_type": "exposure", "package_name": "dbt_analytics_engine", "path": "marts/_marts_exposures.yml", "original_file_path": "models/marts/_marts_exposures.yml", "unique_id": "exposure.dbt_analytics_engine.sales_performance", "fqn": ["dbt_analytics_engine", "marts", "sales_performance"], "type": "dashboard", "owner": {"email": null, "name": "Moe Abbas"}, "description": "A high-maturity dashboard utilized by the sales team to monitor real-time sales performance and evaluate key metrics. This dashboard provides detailed insights into daily sales figures, trends, and overall performance, enabling the sales team to make informed decisions and adjust strategies as needed. It is built on the `fct_orders` table, ensuring that all sales data is up-to-date and accurately reflected.", "label": null, "maturity": "high", "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "url": "https://lookerstudio.google.com/reporting/6ad69971-0993-4db3-ad40-026bdc428629", "depends_on": {"macros": [], "nodes": ["model.dbt_analytics_engine.fct_orders"]}, "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1726248164.475468}, "exposure.dbt_analytics_engine.product_performance": {"name": "product_performance", "resource_type": "exposure", "package_name": "dbt_analytics_engine", "path": "marts/_marts_exposures.yml", "original_file_path": "models/marts/_marts_exposures.yml", "unique_id": "exposure.dbt_analytics_engine.product_performance", "fqn": ["dbt_analytics_engine", "marts", "product_performance"], "type": "dashboard", "owner": {"email": null, "name": "Moe Abbas"}, "description": "A detailed dashboard utilized by the product and sales teams to analyze the performance of individual products across different categories. The dashboard provides insights into key metrics such as product sales volume, revenue, and profit margins. It helps identify top-performing products, underperforming items, and overall trends in product categories, enabling teams to make data-driven decisions about inventory management, pricing strategies, and promotional efforts. Built on the dim_products table, this dashboard ensures that all product-related data is accurate and updated in real-time.", "label": null, "maturity": "high", "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "url": "https://lookerstudio.google.com/reporting/6ad69971-0993-4db3-ad40-026bdc428629", "depends_on": {"macros": [], "nodes": ["model.dbt_analytics_engine.dim_products"]}, "refs": [{"name": "dim_products", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1726248164.476376}, "exposure.dbt_analytics_engine.sales_forecasting": {"name": "sales_forecasting", "resource_type": "exposure", "package_name": "dbt_analytics_engine", "path": "marts/_marts_exposures.yml", "original_file_path": "models/marts/_marts_exposures.yml", "unique_id": "exposure.dbt_analytics_engine.sales_forecasting", "fqn": ["dbt_analytics_engine", "marts", "sales_forecasting"], "type": "dashboard", "owner": {"email": null, "name": "Moe Abbas"}, "description": "A comprehensive dashboard used by the sales team to monitor and forecast sales performance. The dashboard provides insights into sales trends, forecasts future sales based on historical data, and helps identify potential market fluctuations. It relies on the `fct_orders_timeseries_sma` table to deliver key metrics such as Simple Moving Averages (SMA) and Bollinger Bands, making it an essential tool for data-driven decision-making in sales strategy.", "label": null, "maturity": "high", "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "url": "https://lookerstudio.google.com/reporting/6ad69971-0993-4db3-ad40-026bdc428629", "depends_on": {"macros": [], "nodes": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"]}, "refs": [{"name": "fct_orders_timeseries_sma", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1726248164.477199}, "exposure.dbt_analytics_engine.payment_methods_performance": {"name": "payment_methods_performance", "resource_type": "exposure", "package_name": "dbt_analytics_engine", "path": "marts/_marts_exposures.yml", "original_file_path": "models/marts/_marts_exposures.yml", "unique_id": "exposure.dbt_analytics_engine.payment_methods_performance", "fqn": ["dbt_analytics_engine", "marts", "payment_methods_performance"], "type": "dashboard", "owner": {"email": null, "name": "Moe Abbas"}, "description": "A specialized dashboard designed to analyze the performance of various payment methods across different countries. This dashboard provides detailed insights into the usage frequency, revenue contributions, and associated fees for payment methods such as Amazon Pay, Apple Pay, Bitcoin, and Stripe. It also tracks the success and failure rates of transactions, helping the sales team optimize payment strategies and identify opportunities for cost reduction. The dashboard is built on the `fct_payment_methods` table, ensuring accurate and up-to-date metrics that support data-driven decision-making.", "label": null, "maturity": "high", "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "url": "https://lookerstudio.google.com/reporting/6ad69971-0993-4db3-ad40-026bdc428629", "depends_on": {"macros": [], "nodes": ["model.dbt_analytics_engine.fct_payment_methods"]}, "refs": [{"name": "fct_payment_methods", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1726251874.99885}}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.dbt_analytics_engine.stg_products": ["seed.dbt_analytics_engine.seed_products"], "model.dbt_analytics_engine.stg_payment_fees": ["seed.dbt_analytics_engine.seed_payment_fees"], "model.dbt_analytics_engine.stg_taxes": ["seed.dbt_analytics_engine.seed_taxes"], "seed.dbt_analytics_engine.seed_taxes": [], "test.dbt_analytics_engine.unique_seed_taxes_tax_id.f8c4c43c3b": ["seed.dbt_analytics_engine.seed_taxes"], "test.dbt_analytics_engine.not_null_seed_taxes_tax_id.f55a6ff871": ["seed.dbt_analytics_engine.seed_taxes"], "test.dbt_analytics_engine.seed_taxes_unexpected_tax_id.fad3776053": ["seed.dbt_analytics_engine.seed_taxes"], "test.dbt_analytics_engine.unique_seed_taxes_tax_country.af4f5dce37": ["seed.dbt_analytics_engine.seed_taxes"], "test.dbt_analytics_engine.not_null_seed_taxes_tax_country.0252c9f25c": ["seed.dbt_analytics_engine.seed_taxes"], "test.dbt_analytics_engine.not_null_seed_taxes_tax_rate.9483e90a15": ["seed.dbt_analytics_engine.seed_taxes"], "test.dbt_analytics_engine.seed_taxes_unexpected_tax_rate.f785d7f3ab": ["seed.dbt_analytics_engine.seed_taxes"], "seed.dbt_analytics_engine.seed_products": [], "test.dbt_analytics_engine.not_null_seed_products_product_category_id.4022d64939": ["seed.dbt_analytics_engine.seed_products"], "test.dbt_analytics_engine.seed_products__unexpected_product_category_id.65766e3428": ["seed.dbt_analytics_engine.seed_products"], "test.dbt_analytics_engine.not_null_seed_products_product_category.f11e3a13e9": ["seed.dbt_analytics_engine.seed_products"], "test.dbt_analytics_engine.seed_products_unexpected_product_category.fec78e49d1": ["seed.dbt_analytics_engine.seed_products"], "test.dbt_analytics_engine.not_null_seed_products_product_id.a4fccf3ddc": ["seed.dbt_analytics_engine.seed_products"], "test.dbt_analytics_engine.seed_products_unexpected_product_id.741bb2630b": ["seed.dbt_analytics_engine.seed_products"], "test.dbt_analytics_engine.unique_seed_products_product_name.c6936fa379": ["seed.dbt_analytics_engine.seed_products"], "test.dbt_analytics_engine.not_null_seed_products_product_name.0b363a2b14": ["seed.dbt_analytics_engine.seed_products"], "test.dbt_analytics_engine.not_null_seed_products_inbound_shipping_cost.f798cf8f2f": ["seed.dbt_analytics_engine.seed_products"], "test.dbt_analytics_engine.seed_products_assert_positive_inbound_shipping_cost.d4c0fd2082": ["seed.dbt_analytics_engine.seed_products"], "test.dbt_analytics_engine.not_null_seed_products_product_cost.d8f2f71464": ["seed.dbt_analytics_engine.seed_products"], "test.dbt_analytics_engine.seed_products_assert_positive_product_cost.b09ee25c64": ["seed.dbt_analytics_engine.seed_products"], "model.dbt_analytics_engine.int_orders": ["model.dbt_analytics_engine.stg_customers", "model.dbt_analytics_engine.stg_nps", "model.dbt_analytics_engine.stg_orders", "model.dbt_analytics_engine.stg_products", "model.dbt_analytics_engine.stg_returns", "model.dbt_analytics_engine.stg_shipping"], "model.dbt_analytics_engine.stg_customers": ["source.dbt_analytics_engine.raw.customers"], "model.dbt_analytics_engine.stg_nps": ["source.dbt_analytics_engine.raw.nps"], "model.dbt_analytics_engine.stg_orders": ["source.dbt_analytics_engine.raw.orders"], "model.dbt_analytics_engine.int_payments": ["model.dbt_analytics_engine.stg_payment_fees", "model.dbt_analytics_engine.stg_payments", "model.dbt_analytics_engine.stg_taxes"], "model.dbt_analytics_engine.stg_payments": ["source.dbt_analytics_engine.raw.payments"], "model.dbt_analytics_engine.stg_returns": ["source.dbt_analytics_engine.raw.returns"], "model.dbt_analytics_engine.stg_shipping": ["source.dbt_analytics_engine.raw.shipping"], "test.dbt_analytics_engine.stg_nps_unexpected_nps_date.8918cb98fd": ["model.dbt_analytics_engine.stg_nps"], "test.dbt_analytics_engine.stg_orders_unexpected_order_date.e63e94672f": ["model.dbt_analytics_engine.stg_orders"], "test.dbt_analytics_engine.stg_payments_unexpected_created_at.c6758e1cb0": ["model.dbt_analytics_engine.stg_payments"], "test.dbt_analytics_engine.stg_returns_unexpected_return_date.12ec6a0b35": ["model.dbt_analytics_engine.stg_returns"], "test.dbt_analytics_engine.stg_shipping_unexpected_shipping_date.8b549f2bc4": ["model.dbt_analytics_engine.stg_shipping"], "test.dbt_analytics_engine.not_null_int_orders_product_category_id.9633448692": ["model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.not_null_int_orders_product_id.d2b92956f6": ["model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.unique_int_orders_order_id.63cc4f3a7a": ["model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.not_null_int_orders_order_id.383134cc66": ["model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.relationships_int_orders_order_id__order_id__ref_stg_orders_.ff87b11be6": ["model.dbt_analytics_engine.int_orders", "model.dbt_analytics_engine.stg_orders"], "test.dbt_analytics_engine.not_null_int_orders_customer_id.e78a71eed3": ["model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.relationships_int_orders_customer_id__customer_id__ref_stg_customers_.9d7e39b587": ["model.dbt_analytics_engine.int_orders", "model.dbt_analytics_engine.stg_customers"], "test.dbt_analytics_engine.not_null_int_orders_order_status.c9525f7b76": ["model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.not_null_int_orders_order_date.c8d13500bb": ["model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.not_null_int_orders_first_name.41e8be1f95": ["model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.not_null_int_orders_last_name.729e6f5a4c": ["model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.unique_int_orders_shipping_id.071fd1d880": ["model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.relationships_int_orders_shipping_id__shipping_id__ref_stg_shipping_.598a58922f": ["model.dbt_analytics_engine.int_orders", "model.dbt_analytics_engine.stg_shipping"], "test.dbt_analytics_engine.not_null_int_orders_is_shipped.ac59b50b97": ["model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.int_orders_unexpected_is_shipped_bool.c2b5343dec": ["model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.unique_int_orders_return_id.402c65096c": ["model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.not_null_int_orders_is_returned.5428c59e02": ["model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.int_orders_unexpected_is_returned_bool.a3cea4213e": ["model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.not_null_int_orders_is_nps.e463bb19a8": ["model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.int_orders_unexpected_is_nps_bool.89b6608341": ["model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.not_null_int_orders_product_category.81718e6804": ["model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.not_null_int_orders_product_name.3b4cb7f6ad": ["model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.not_null_int_orders_inbound_shipping_cost.06ccde673e": ["model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.not_null_int_orders_product_cost.b326ad5229": ["model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.dbt_utils_equal_rowcount_int_orders_ref_stg_orders_.5dc9604002": ["model.dbt_analytics_engine.int_orders", "model.dbt_analytics_engine.stg_orders"], "test.dbt_analytics_engine.int_orders_unequal_agg_shipping_amount.8085e0b065": ["model.dbt_analytics_engine.int_orders", "model.dbt_analytics_engine.stg_shipping"], "test.dbt_analytics_engine.not_null_int_payments_order_id.557bf2eea0": ["model.dbt_analytics_engine.int_payments"], "test.dbt_analytics_engine.not_null_int_payments_payment_id.02e0f4bd25": ["model.dbt_analytics_engine.int_payments"], "test.dbt_analytics_engine.not_null_int_payments_payment_method.a8fd5df74d": ["model.dbt_analytics_engine.int_payments"], "test.dbt_analytics_engine.relationships_int_payments_payment_method__payment_method__ref_stg_payment_fees_.1e68484b11": ["model.dbt_analytics_engine.int_payments", "model.dbt_analytics_engine.stg_payment_fees"], "test.dbt_analytics_engine.not_null_int_payments_payment_status.e9f85fff44": ["model.dbt_analytics_engine.int_payments"], "test.dbt_analytics_engine.not_null_int_payments_country_id.d477883ad0": ["model.dbt_analytics_engine.int_payments"], "test.dbt_analytics_engine.relationships_int_payments_country_id__country_id__ref_stg_taxes_.df4c4ee979": ["model.dbt_analytics_engine.int_payments", "model.dbt_analytics_engine.stg_taxes"], "test.dbt_analytics_engine.not_null_int_payments_country.18d4938d90": ["model.dbt_analytics_engine.int_payments"], "test.dbt_analytics_engine.not_null_int_payments_created_at.da6f256d05": ["model.dbt_analytics_engine.int_payments"], "test.dbt_analytics_engine.not_null_int_payments_gross_revenue.3fab8f131f": ["model.dbt_analytics_engine.int_payments"], "test.dbt_analytics_engine.not_null_int_payments_tax_rate.da4366e257": ["model.dbt_analytics_engine.int_payments"], "test.dbt_analytics_engine.not_null_int_payments_percentage_fee.cb94ecc835": ["model.dbt_analytics_engine.int_payments"], "test.dbt_analytics_engine.not_null_int_payments_fixed_fee.e735f0304a": ["model.dbt_analytics_engine.int_payments"], "test.dbt_analytics_engine.not_null_int_payments_payment_fee.e6ecdd7240": ["model.dbt_analytics_engine.int_payments"], "test.dbt_analytics_engine.int_payments_unexpected_payment_fee.3dbfa94602": ["model.dbt_analytics_engine.int_payments"], "test.dbt_analytics_engine.dbt_utils_equal_rowcount_int_payments_ref_stg_payments_.70f412c4b6": ["model.dbt_analytics_engine.int_payments", "model.dbt_analytics_engine.stg_payments"], "test.dbt_analytics_engine.int_payments_unequal_agg_gross_revenue.28f31da523": ["model.dbt_analytics_engine.int_payments", "model.dbt_analytics_engine.stg_payments"], "test.dbt_analytics_engine.source_unique_raw_customers_customer_id.3579d23017": ["source.dbt_analytics_engine.raw.customers"], "test.dbt_analytics_engine.source_not_null_raw_customers_customer_id.e869432dbb": ["source.dbt_analytics_engine.raw.customers"], "test.dbt_analytics_engine.source_customers_unexpected_customer_id_length.fafa7939c9": ["source.dbt_analytics_engine.raw.customers"], "test.dbt_analytics_engine.source_not_null_raw_customers_first_name.b1fe98db61": ["source.dbt_analytics_engine.raw.customers"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_customers_first_name.1aa711fefa": ["source.dbt_analytics_engine.raw.customers"], "test.dbt_analytics_engine.source_customers_unexpected_first_name_length.787dbb0899": ["source.dbt_analytics_engine.raw.customers"], "test.dbt_analytics_engine.source_not_null_raw_customers_last_name.ef2fe0f207": ["source.dbt_analytics_engine.raw.customers"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_customers_last_name.6ffe283ff9": ["source.dbt_analytics_engine.raw.customers"], "test.dbt_analytics_engine.source_customers_unexpected_last_name_length.01feba77f5": ["source.dbt_analytics_engine.raw.customers"], "test.dbt_analytics_engine.source_unique_raw_nps_order_id.aae4faebb6": ["source.dbt_analytics_engine.raw.nps"], "test.dbt_analytics_engine.source_not_null_raw_nps_order_id.2eccdcf1e2": ["source.dbt_analytics_engine.raw.nps"], "test.dbt_analytics_engine.source_nps_unexpected_order_id_length.d9115f851b": ["source.dbt_analytics_engine.raw.nps"], "test.dbt_analytics_engine.source_not_null_raw_nps_customer_id.5fda13b29c": ["source.dbt_analytics_engine.raw.nps"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_nps_customer_id.1d8ada62fb": ["source.dbt_analytics_engine.raw.nps"], "test.dbt_analytics_engine.source_nps_unexpected_customer_id_length.ee58215e3f": ["source.dbt_analytics_engine.raw.nps"], "test.dbt_analytics_engine.source_not_null_raw_nps_is_nps.a69d0af618": ["source.dbt_analytics_engine.raw.nps"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_nps_is_nps.bcbc991b6e": ["source.dbt_analytics_engine.raw.nps"], "test.dbt_analytics_engine.source_nps_unexpected_is_nps_bool.78259a7eb7": ["source.dbt_analytics_engine.raw.nps"], "test.dbt_analytics_engine.source_not_null_raw_nps_nps_score.7d4a90987a": ["source.dbt_analytics_engine.raw.nps"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_nps_nps_score.971c38316b": ["source.dbt_analytics_engine.raw.nps"], "test.dbt_analytics_engine.source_nps_unexpected_nps_score.8a16a09fd2": ["source.dbt_analytics_engine.raw.nps"], "test.dbt_analytics_engine.source_not_null_raw_nps_nps_date.1abdb6c60a": ["source.dbt_analytics_engine.raw.nps"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_nps_nps_date.5268efe72d": ["source.dbt_analytics_engine.raw.nps"], "test.dbt_analytics_engine.source_unique_raw_orders_order_id.2e0765462f": ["source.dbt_analytics_engine.raw.orders"], "test.dbt_analytics_engine.source_not_null_raw_orders_order_id.03a065a98f": ["source.dbt_analytics_engine.raw.orders"], "test.dbt_analytics_engine.source_orders_unexpected_order_id_length.717f86d8cf": ["source.dbt_analytics_engine.raw.orders"], "test.dbt_analytics_engine.source_not_null_raw_orders_customer_id.3962c6ab03": ["source.dbt_analytics_engine.raw.orders"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_customer_id.5c0a7aeec1": ["source.dbt_analytics_engine.raw.orders"], "test.dbt_analytics_engine.source_orders_unexpected_custoemr_id_length.4e34b069bd": ["source.dbt_analytics_engine.raw.orders"], "test.dbt_analytics_engine.source_not_null_raw_orders_order_status.0e4e88bed2": ["source.dbt_analytics_engine.raw.orders"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_order_status.7efa1990d7": ["source.dbt_analytics_engine.raw.orders"], "test.dbt_analytics_engine.source_orders_unexpected_order_status.6f35c0bf12": ["source.dbt_analytics_engine.raw.orders"], "test.dbt_analytics_engine.source_not_null_raw_orders_order_date.4c6c74964f": ["source.dbt_analytics_engine.raw.orders"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_order_date.80ff9d08cd": ["source.dbt_analytics_engine.raw.orders"], "test.dbt_analytics_engine.source_not_null_raw_orders_product_category_id.5538cf78d2": ["source.dbt_analytics_engine.raw.orders"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_product_category_id.a1bffe5382": ["source.dbt_analytics_engine.raw.orders"], "test.dbt_analytics_engine.source_orders_unexpected_product_category_id.c5b406ac9f": ["source.dbt_analytics_engine.raw.orders"], "test.dbt_analytics_engine.source_not_null_raw_orders_product_id.47f01cfc3d": ["source.dbt_analytics_engine.raw.orders"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_product_id.c3e441e90b": ["source.dbt_analytics_engine.raw.orders"], "test.dbt_analytics_engine.source_orders_unexpected_product__id.6d1bf7a4a2": ["source.dbt_analytics_engine.raw.orders"], "test.dbt_analytics_engine.source_not_null_raw_payments_order_id.def3cb6fc9": ["source.dbt_analytics_engine.raw.payments"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_order_id.f225e51aa8": ["source.dbt_analytics_engine.raw.payments"], "test.dbt_analytics_engine.source_payments_unexpected_order_id_length.b7725a5e3e": ["source.dbt_analytics_engine.raw.payments"], "test.dbt_analytics_engine.source_not_null_raw_payments_payment_id.a7f5b41ef5": ["source.dbt_analytics_engine.raw.payments"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_payment_id.757e26661f": ["source.dbt_analytics_engine.raw.payments"], "test.dbt_analytics_engine.source_not_null_raw_payments_payment_method.9aca47f72c": ["source.dbt_analytics_engine.raw.payments"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_payment_method.5b7ec2ca0a": ["source.dbt_analytics_engine.raw.payments"], "test.dbt_analytics_engine.source_payments_unexpected_payment_method.010f8676de": ["source.dbt_analytics_engine.raw.payments"], "test.dbt_analytics_engine.source_not_null_raw_payments_payment_amount.391c03161a": ["source.dbt_analytics_engine.raw.payments"], "test.dbt_analytics_engine.source_payments_assert_positive_payment_amount.d0159c6dbe": ["source.dbt_analytics_engine.raw.payments"], "test.dbt_analytics_engine.source_not_null_raw_payments_payment_country_id.672aaa798a": ["source.dbt_analytics_engine.raw.payments"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_payment_country_id.11cb76a07e": ["source.dbt_analytics_engine.raw.payments"], "test.dbt_analytics_engine.source_payments_unexpected_country_id.e6838f7725": ["source.dbt_analytics_engine.raw.payments"], "test.dbt_analytics_engine.source_not_null_raw_payments_payment_status.54558a6ea3": ["source.dbt_analytics_engine.raw.payments"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_payment_status.bf12f29150": ["source.dbt_analytics_engine.raw.payments"], "test.dbt_analytics_engine.source_payments_unexpected_payment_status.cdd31bef7c": ["source.dbt_analytics_engine.raw.payments"], "test.dbt_analytics_engine.source_not_null_raw_payments_created_at.710d6129ed": ["source.dbt_analytics_engine.raw.payments"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_created_at.f13e871fc3": ["source.dbt_analytics_engine.raw.payments"], "test.dbt_analytics_engine.source_unique_raw_returns_order_id.a8aef5caa0": ["source.dbt_analytics_engine.raw.returns"], "test.dbt_analytics_engine.source_not_null_raw_returns_order_id.6d0a5fcbbe": ["source.dbt_analytics_engine.raw.returns"], "test.dbt_analytics_engine.source_returns_unexpected_order_id_length.66bc0666d6": ["source.dbt_analytics_engine.raw.returns"], "test.dbt_analytics_engine.source_unique_raw_returns_return_id.1d09b09e28": ["source.dbt_analytics_engine.raw.returns"], "test.dbt_analytics_engine.source_not_null_raw_returns_return_id.18df885383": ["source.dbt_analytics_engine.raw.returns"], "test.dbt_analytics_engine.source_returns_unexpected_return_id_length.3da49c526e": ["source.dbt_analytics_engine.raw.returns"], "test.dbt_analytics_engine.source_not_null_raw_returns_is_returned.148b12a528": ["source.dbt_analytics_engine.raw.returns"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_returns_is_returned.cd1f0f7ac5": ["source.dbt_analytics_engine.raw.returns"], "test.dbt_analytics_engine.source_returns_unexpected_is_returned_bool.c8835a46b6": ["source.dbt_analytics_engine.raw.returns"], "test.dbt_analytics_engine.source_not_null_raw_returns_return_date.d74bba5b49": ["source.dbt_analytics_engine.raw.returns"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_returns_return_date.b667e51d4b": ["source.dbt_analytics_engine.raw.returns"], "test.dbt_analytics_engine.source_not_null_raw_returns_return_reason.005573374b": ["source.dbt_analytics_engine.raw.returns"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_returns_return_reason.8a55d4b196": ["source.dbt_analytics_engine.raw.returns"], "test.dbt_analytics_engine.source_returns_unexpected_return_reason.bbd49bceac": ["source.dbt_analytics_engine.raw.returns"], "test.dbt_analytics_engine.source_unique_raw_shipping_order_id.d5a8aa62ce": ["source.dbt_analytics_engine.raw.shipping"], "test.dbt_analytics_engine.source_not_null_raw_shipping_order_id.4459e0b7d6": ["source.dbt_analytics_engine.raw.shipping"], "test.dbt_analytics_engine.source_shipping_unexpected_order_id_length.2ba4519514": ["source.dbt_analytics_engine.raw.shipping"], "test.dbt_analytics_engine.source_unique_raw_shipping_shipping_id.c6c0e38145": ["source.dbt_analytics_engine.raw.shipping"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_shipping_shipping_id.71eae1e42f": ["source.dbt_analytics_engine.raw.shipping"], "test.dbt_analytics_engine.source_shipping_unexpected_shipping_id_length.3c4d89d925": ["source.dbt_analytics_engine.raw.shipping"], "test.dbt_analytics_engine.source_not_null_raw_shipping_is_shipped.3766118adb": ["source.dbt_analytics_engine.raw.shipping"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_shipping_is_shipped.a565383871": ["source.dbt_analytics_engine.raw.shipping"], "test.dbt_analytics_engine.source_shipping_unexpected_is_shipped_bool.6a63595654": ["source.dbt_analytics_engine.raw.shipping"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_shipping_shipping_date.019f309d0c": ["source.dbt_analytics_engine.raw.shipping"], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_shipping_shipping_amount.e4a06339ae": ["source.dbt_analytics_engine.raw.shipping"], "test.dbt_analytics_engine.source_shipping_assert_positive_shipping_amount.8d0c1a37a8": ["source.dbt_analytics_engine.raw.shipping"], "seed.dbt_analytics_engine.seed_payment_fees": [], "test.dbt_analytics_engine.unique_seed_payment_fees_payment_method_id.e75aa7b850": ["seed.dbt_analytics_engine.seed_payment_fees"], "test.dbt_analytics_engine.not_null_seed_payment_fees_payment_method_id.ed89636986": ["seed.dbt_analytics_engine.seed_payment_fees"], "test.dbt_analytics_engine.seed_payment_fees_unexpected_payment_method_id.c1100364e1": ["seed.dbt_analytics_engine.seed_payment_fees"], "test.dbt_analytics_engine.unique_seed_payment_fees_payment_method.d1803efcb4": ["seed.dbt_analytics_engine.seed_payment_fees"], "test.dbt_analytics_engine.not_null_seed_payment_fees_payment_method.c7d24bb82e": ["seed.dbt_analytics_engine.seed_payment_fees"], "test.dbt_analytics_engine.seed_payment_fees_unexpected_payment_method.a712880c05": ["seed.dbt_analytics_engine.seed_payment_fees"], "test.dbt_analytics_engine.not_null_seed_payment_fees_percentage_fee.697d087974": ["seed.dbt_analytics_engine.seed_payment_fees"], "test.dbt_analytics_engine.seed_payment_fees_unexpected_percentage_fee.f4ed1ee461": ["seed.dbt_analytics_engine.seed_payment_fees"], "test.dbt_analytics_engine.not_null_seed_payment_fees_fixed_fee.2e54ee1bd7": ["seed.dbt_analytics_engine.seed_payment_fees"], "test.dbt_analytics_engine.seed_payment_fees_unexpected_fixed_fee.ff8eab6f52": ["seed.dbt_analytics_engine.seed_payment_fees"], "model.dbt_analytics_engine.dim_products": ["model.dbt_analytics_engine.fct_orders"], "model.dbt_analytics_engine.fct_orders_timeseries_sma": ["model.dbt_analytics_engine.fct_orders"], "model.dbt_analytics_engine.fct_orders": ["model.dbt_analytics_engine.int_orders", "model.dbt_analytics_engine.int_payments"], "model.dbt_analytics_engine.fct_payment_methods": ["model.dbt_analytics_engine.int_payments"], "test.dbt_analytics_engine.not_null_dim_products_date.574048cf21": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_date.f4fc713dc9": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dim_products_unexpected_date.8ba6ea57ff": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.not_null_dim_products_country_id.ebbcb8b76e": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_country_id.ed74d915c2": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dim_products_unexpected_country_id.87d133469b": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.not_null_dim_products_country.5bb34d1877": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_country.3c8ed213c7": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.not_null_dim_products_product_category.069796c541": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_product_category.4a89a363ad": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dim_products_unexpected_product_category.c192a37430": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.not_null_dim_products_product_name.991aec73f3": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_product_name.76f63d55df": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.not_null_dim_products_nb_order_id.3bd5159215": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_nb_order_id.72ef84204a": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.not_null_dim_products_nb_shipping_id.6210429e27": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_nb_shipping_id.de0c73bde0": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.not_null_dim_products_nb_return_id.496158f2a9": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_nb_return_id.6fc6712643": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_avg_fulfillment_days.feb31904d2": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dim_products_assert_positive_avg_fulfillment_days.089c583b64": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_avg_nps_score.58fba2347f": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dim_products_assert_positive_avg_nps_score.e3d03c7b27": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.not_null_dim_products_total_gross_revenue.de39c2a3eb": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_gross_revenue.372735f062": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dim_products_assert_positive_total_gross_revenue.c2247b3969": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.not_null_dim_products_total_tax_amount.54c3118144": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_tax_amount.4428565fd6": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dim_products_assert_positive_total_tax_amount.c699116ec6": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.not_null_dim_products_total_net_revenue_before_tax.47c7127675": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_net_revenue_before_tax.d40cce386b": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dim_products_assert_positive_total_net_revenue_before_tax.c43767ddeb": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.not_null_dim_products_total_net_revenue_after_tax.f2faaacfd9": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_net_revenue_after_tax.efb6a5d29f": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dim_products_assert_positive_total_net_revenue_after_tax.ba2c6febe9": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.not_null_dim_products_total_cogs.4764d28c01": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_cogs.ec17a924f7": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dim_products_assert_positive_total_cogs.4fcaffbba3": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.not_null_dim_products_total_returned_cogs.a5ad2fc4e6": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_returned_cogs.f6c63eb1d6": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.not_null_dim_products_total_refund_amount.8811aa6bc7": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_refund_amount.438fc2fc1b": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.not_null_dim_products_total_payment_fee.31a176c2f7": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_payment_fee.b6c559fc4a": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dim_products_assert_positive_total_payment_fee.b1975067f6": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.not_null_dim_products_total_cm.1e2bfa8ee1": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_cm.30608c74a2": ["model.dbt_analytics_engine.dim_products"], "test.dbt_analytics_engine.dim_products_unequal_agg_total_gross_revenue.c37f597c7f": ["model.dbt_analytics_engine.dim_products", "model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dim_products_unequal_agg_total_tax_amount.639980c235": ["model.dbt_analytics_engine.dim_products", "model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dim_products_unequal_agg_total_net_revenue_before_tax.cf29af6db1": ["model.dbt_analytics_engine.dim_products", "model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dim_products_unequal_agg_total_net_revenue_after_tax.f97dfdf7da": ["model.dbt_analytics_engine.dim_products", "model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dim_products_unequal_agg_total_cogs.1d3a202822": ["model.dbt_analytics_engine.dim_products", "model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dim_products_unequal_agg_total_returned_cogs.7fe2b08a8f": ["model.dbt_analytics_engine.dim_products", "model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dim_products_unequal_agg_total_refund_amount.9e245aca75": ["model.dbt_analytics_engine.dim_products", "model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dim_products_unequal_agg_total_payment_fee.83ef9782e7": ["model.dbt_analytics_engine.dim_products", "model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dim_products_unequal_agg_total_cm.5e6ccd2b8c": ["model.dbt_analytics_engine.dim_products", "model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_date.37657c660a": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_date.ead3fe64c2": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.fct_orders_timeseries_sma_unexpected_date.2d619508ac": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales.7a3076ff3b": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales.58b8af4604": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales.198d3bbf9d": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_14.374235e955": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_14.709a4347be": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_14.3ae2dd3033": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_30.adbc238496": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_30.849fb34bf2": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_30.392bd7ab05": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_60.4b8826df23": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_60.6fc3dc75b8": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_60.b5373e8eb0": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_120.db9f6c7bd9": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_120.afc9bae971": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_120.2c2a4416a5": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_250.331ff4411b": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_250.49bd8abee2": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_250.b40dc14c84": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_14.83ff08e036": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_14.172d14f4a0": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_30.023a9ab431": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_30.c31a4454bb": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_60.816ab699e5": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_60.28285eb4a6": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_120.a9c9b9f6e3": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_120.4f2cb282c0": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_250.3cae461508": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_250.3cbe02f36d": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_14.63f8b4a3fd": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_14.d2b180e7d3": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_14.ec877c63cd": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_14.484861a84e": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_30.06ef189e4a": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_30.7edd812f30": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_30.ca28376bdb": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_30.8c23c0accd": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_60.22e8c9233c": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_60.92afcb3b14": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_60.e33970618f": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_60.669d910d99": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_120.96650466e0": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_120.0d6017c9ee": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_120.efe9376cd5": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_120.3d2213ced4": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_250.be8915d053": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_250.c11ad8a798": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_250.6bc0b85c8b": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_250.6f8940f530": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.fct_orders_timeseries_sma_unequal_agg_sales.36b2dec339": ["model.dbt_analytics_engine.fct_orders", "model.dbt_analytics_engine.fct_orders_timeseries_sma"], "test.dbt_analytics_engine.not_null_fct_orders_country_id.dd87008526": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_country_id.7ac8b5f6b7": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_country_id.f51b3be77c": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_country.0edcc91e35": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_country.0a27dd05bc": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_order_id.4e687af8d0": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.unique_fct_orders_order_id.523ddb6ce5": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.relationships_fct_orders_order_id__order_id__ref_int_orders_.5a03fd2117": ["model.dbt_analytics_engine.fct_orders", "model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.not_null_fct_orders_order_status.b83f07f66b": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_order_status.0b6286ed95": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_order_status.a694a31b07": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_customer_id.16fe324f7b": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_customer_id.1e994fbbd6": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_nb_payments.3cd88a1cae": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_nb_payments.bcd85f6c8a": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_nb_payments.fb52011391": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_first_name.a89a0764e2": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_first_name.0e5bb2183e": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_last_name.1e39458222": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_last_name.1db1f3d23b": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_is_shipped_bool.281259375c": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.unique_fct_orders_shipping_id.b0be835405": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_shipping_id.1f5b4e61fa": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_assert_positive_shipping_amount.97b89a1e69": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_payment_method.552e8460b4": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_payment_method.e6ed76876e": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_payment_method.143499598b": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_gross_revenue.e9774c74d8": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_gross_revenue.be21114f63": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_assert_positive_gross_revenue.d0522b6f57": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_tax_rate.83abb81011": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_tax_rate.c8727ca0c5": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_tax_rate.888f839f9c": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_assert_positive_tax_rate.3bb0614ec6": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_tax_amount.405019f249": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_tax_amount.9d065212d2": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_tax_amount.8d62b11a90": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_net_revenue_before_tax.bb8578a9c6": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_net_revenue_before_tax.1c691828cc": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_net_revenue_before_tax.35c5c243a5": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_net_revenue_after_tax.e01b375b4e": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_net_revenue_after_tax.d5134dd3ec": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_net_revenue_after_tax.cf4c030292": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_order_date.84f0a76362": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_order_date.369ca05d4f": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_order_date.4a7d73acb5": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_shipping_date.e1289987ed": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_shipping_date.2e6bb5ce4f": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_is_returned_bool.3e7d7bb86e": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.unique_fct_orders_return_id.87582f9770": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_return_id.f0a57fcf42": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_return_date.c4a12821ab": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_return_date.faa60b5a52": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_return_reason.10f36c5ab1": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_return_reason.bf2d1cade2": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_fulfillment_days.6ba87ed360": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_fulfillment_days.224a79c537": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_is_nps.ec1b06649e": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_is_nps_bool.e8cc54079b": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_nps_score.4801b7fe57": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_accepted_range_fct_orders_nps_score__10__0.7918938823": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_nps_date.d14f37bd0e": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_nps_date.18b8cb456d": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_product_category_id.da74e704f7": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_product_category_id.92b52ba0ee": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_product_category_id.0e1442b69c": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_product_category.1766c71bb2": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_product_category.112df2d465": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_product_category.796f7162be": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_product_id.8e73ef4e24": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_product_id.f591e3ef76": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_product_id.03e8fa5b21": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_product_name.a9a0af8e44": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_product_name.04af613d46": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_cogs.0b19f968ef": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_cogs.68c7e7b990": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_cogs.001142e58f": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_returned_cogs.5259a715e3": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_returned_cogs.ce6d78c725": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_returned_cogs.72a465536d": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_refund_amount.f6e3861bf0": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_refund_amount.3a865afd77": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_refund_amount.79c3344f36": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_payment_fee.cb62252086": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_payment_fee.51eecf2763": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_assert_positive_payment_fee.3fc91c0b12": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_cm.e44709b283": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_cm.8fc3956ee5": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_cm.8fd4691b5f": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_customer_order_nb.79c7350630": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_customer_order_nb.b5fec9bc97": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.not_null_fct_orders_customer_type.5d273b0b2b": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_customer_type.5b997d97e0": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unexpected_customer_type.69983a7d22": ["model.dbt_analytics_engine.fct_orders"], "test.dbt_analytics_engine.fct_orders_unequal_agg_gross_revenue.91ab358fda": ["model.dbt_analytics_engine.fct_orders", "model.dbt_analytics_engine.int_payments"], "test.dbt_analytics_engine.fct_orders_unequal_agg_cogs.39983bc63a": ["model.dbt_analytics_engine.fct_orders", "model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.fct_orders_unequal_agg_shipping_amount.f398ff09f4": ["model.dbt_analytics_engine.fct_orders", "model.dbt_analytics_engine.int_orders"], "test.dbt_analytics_engine.not_null_fct_payment_methods_country_id.b66edb05ed": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_country_id.b42ed05717": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.fct_payment_methods_unexpected_country_id.63b418f2a9": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.not_null_fct_payment_methods_country.eb06966f71": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_country.f361beadad": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.not_null_fct_payment_methods_order_id.ddee004099": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.unique_fct_payment_methods_order_id.acc4722fd2": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_order_id.00cc07e79d": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.relationships_fct_payment_methods_order_id__order_id__ref_int_payments_.05d9a1bed3": ["model.dbt_analytics_engine.fct_payment_methods", "model.dbt_analytics_engine.int_payments"], "test.dbt_analytics_engine.not_null_fct_payment_methods_nb_payments.7a94409e31": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.fct_payment_methods_assert_positive_nb_payments.bcb7a7d8c9": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.not_null_fct_payment_methods_payment_methods.b1f93b15ca": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.not_null_fct_payment_methods_order_date.21aeb8313c": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_order_date.c02b07ac0e": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.fct_payment_methods_unexpected_order_date.01981f60c8": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.not_null_fct_payment_methods_order_status.c48b155ca0": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.fct_payment_methods_unexpected_order_status.35a4bb0b99": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.not_null_fct_payment_methods_total_gross_revenue.afe445581b": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.fct_payment_methods_assert_positive_total_gross_revenue.c0d9bfabd1": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.not_null_fct_payment_methods_total_payment_fees.7bda1ae723": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.fct_payment_methods_assert_positive_total_payment_fees.e8836651e3": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.not_null_fct_payment_methods_amazon_pay_payment_fees.8ccf82be46": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_amazon_pay_payment_fees.5ca4935050": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.fct_payment_methods_unexpected_amazon_pay_payment_fees.ee2028ca88": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.not_null_fct_payment_methods_apple_pay_payment_fees.ca555fc60d": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_apple_pay_payment_fees.e0ab54115b": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.fct_payment_methods_unexpected_apple_pay_payment_fees.8d0aed3e47": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.not_null_fct_payment_methods_bitcoin_payment_fees.cf4eee780e": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_bitcoin_payment_fees.4cfe95cb5e": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.fct_payment_methods_unexpected_bitcoin_payment_fees.2680568c3c": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.not_null_fct_payment_methods_stripe_payment_fees.78f2cdbed9": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_stripe_payment_fees.df8b964557": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.fct_payment_methods_unexpected_stripe_payment_fees.09c5a52271": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.not_null_fct_payment_methods_amazon_pay_amount.470294cec0": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_amazon_pay_amount.7d9e9abbfd": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.fct_payment_methods_unexpected_amazon_pay_amount.d41fa1103d": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.not_null_fct_payment_methods_apple_pay_amount.35570bd1df": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_apple_pay_amount.269ff4d35e": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.fct_payment_methods_unexpected_apple_pay_amount.d0161e7049": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.not_null_fct_payment_methods_bitcoin_amount.d7592abe44": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_bitcoin_amount.15818a9c60": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.fct_payment_methods_unexpected_bitcoin_amount.00b3640521": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.not_null_fct_payment_methods_stripe_amount.3e4367e046": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_stripe_amount.9456b323b5": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.fct_payment_methods_unexpected_stripe_amount.d0d4124728": ["model.dbt_analytics_engine.fct_payment_methods"], "test.dbt_analytics_engine.fct_payment_methods_unequal_agg_gross_revenue.61f110d7e7": ["model.dbt_analytics_engine.fct_payment_methods", "model.dbt_analytics_engine.int_payments"], "test.dbt_analytics_engine.fct_payment_methods_unequal_agg_payment_fees.41bf364193": ["model.dbt_analytics_engine.fct_payment_methods", "model.dbt_analytics_engine.int_payments"], "source.dbt_analytics_engine.raw.customers": [], "source.dbt_analytics_engine.raw.nps": [], "source.dbt_analytics_engine.raw.orders": [], "source.dbt_analytics_engine.raw.payments": [], "source.dbt_analytics_engine.raw.returns": [], "source.dbt_analytics_engine.raw.shipping": [], "exposure.dbt_analytics_engine.sales_performance": ["model.dbt_analytics_engine.fct_orders"], "exposure.dbt_analytics_engine.product_performance": ["model.dbt_analytics_engine.dim_products"], "exposure.dbt_analytics_engine.sales_forecasting": ["model.dbt_analytics_engine.fct_orders_timeseries_sma"], "exposure.dbt_analytics_engine.payment_methods_performance": ["model.dbt_analytics_engine.fct_payment_methods"]}, "child_map": {"model.dbt_analytics_engine.stg_products": ["model.dbt_analytics_engine.int_orders"], "model.dbt_analytics_engine.stg_payment_fees": ["model.dbt_analytics_engine.int_payments", "test.dbt_analytics_engine.relationships_int_payments_payment_method__payment_method__ref_stg_payment_fees_.1e68484b11"], "model.dbt_analytics_engine.stg_taxes": ["model.dbt_analytics_engine.int_payments", "test.dbt_analytics_engine.relationships_int_payments_country_id__country_id__ref_stg_taxes_.df4c4ee979"], "seed.dbt_analytics_engine.seed_taxes": ["model.dbt_analytics_engine.stg_taxes", "test.dbt_analytics_engine.not_null_seed_taxes_tax_country.0252c9f25c", "test.dbt_analytics_engine.not_null_seed_taxes_tax_id.f55a6ff871", "test.dbt_analytics_engine.not_null_seed_taxes_tax_rate.9483e90a15", "test.dbt_analytics_engine.seed_taxes_unexpected_tax_id.fad3776053", "test.dbt_analytics_engine.seed_taxes_unexpected_tax_rate.f785d7f3ab", "test.dbt_analytics_engine.unique_seed_taxes_tax_country.af4f5dce37", "test.dbt_analytics_engine.unique_seed_taxes_tax_id.f8c4c43c3b"], "test.dbt_analytics_engine.unique_seed_taxes_tax_id.f8c4c43c3b": [], "test.dbt_analytics_engine.not_null_seed_taxes_tax_id.f55a6ff871": [], "test.dbt_analytics_engine.seed_taxes_unexpected_tax_id.fad3776053": [], "test.dbt_analytics_engine.unique_seed_taxes_tax_country.af4f5dce37": [], "test.dbt_analytics_engine.not_null_seed_taxes_tax_country.0252c9f25c": [], "test.dbt_analytics_engine.not_null_seed_taxes_tax_rate.9483e90a15": [], "test.dbt_analytics_engine.seed_taxes_unexpected_tax_rate.f785d7f3ab": [], "seed.dbt_analytics_engine.seed_products": ["model.dbt_analytics_engine.stg_products", "test.dbt_analytics_engine.not_null_seed_products_inbound_shipping_cost.f798cf8f2f", "test.dbt_analytics_engine.not_null_seed_products_product_category.f11e3a13e9", "test.dbt_analytics_engine.not_null_seed_products_product_category_id.4022d64939", "test.dbt_analytics_engine.not_null_seed_products_product_cost.d8f2f71464", "test.dbt_analytics_engine.not_null_seed_products_product_id.a4fccf3ddc", "test.dbt_analytics_engine.not_null_seed_products_product_name.0b363a2b14", "test.dbt_analytics_engine.seed_products__unexpected_product_category_id.65766e3428", "test.dbt_analytics_engine.seed_products_assert_positive_inbound_shipping_cost.d4c0fd2082", "test.dbt_analytics_engine.seed_products_assert_positive_product_cost.b09ee25c64", "test.dbt_analytics_engine.seed_products_unexpected_product_category.fec78e49d1", "test.dbt_analytics_engine.seed_products_unexpected_product_id.741bb2630b", "test.dbt_analytics_engine.unique_seed_products_product_name.c6936fa379"], "test.dbt_analytics_engine.not_null_seed_products_product_category_id.4022d64939": [], "test.dbt_analytics_engine.seed_products__unexpected_product_category_id.65766e3428": [], "test.dbt_analytics_engine.not_null_seed_products_product_category.f11e3a13e9": [], "test.dbt_analytics_engine.seed_products_unexpected_product_category.fec78e49d1": [], "test.dbt_analytics_engine.not_null_seed_products_product_id.a4fccf3ddc": [], "test.dbt_analytics_engine.seed_products_unexpected_product_id.741bb2630b": [], "test.dbt_analytics_engine.unique_seed_products_product_name.c6936fa379": [], "test.dbt_analytics_engine.not_null_seed_products_product_name.0b363a2b14": [], "test.dbt_analytics_engine.not_null_seed_products_inbound_shipping_cost.f798cf8f2f": [], "test.dbt_analytics_engine.seed_products_assert_positive_inbound_shipping_cost.d4c0fd2082": [], "test.dbt_analytics_engine.not_null_seed_products_product_cost.d8f2f71464": [], "test.dbt_analytics_engine.seed_products_assert_positive_product_cost.b09ee25c64": [], "model.dbt_analytics_engine.int_orders": ["model.dbt_analytics_engine.fct_orders", "test.dbt_analytics_engine.dbt_utils_equal_rowcount_int_orders_ref_stg_orders_.5dc9604002", "test.dbt_analytics_engine.fct_orders_unequal_agg_cogs.39983bc63a", "test.dbt_analytics_engine.fct_orders_unequal_agg_shipping_amount.f398ff09f4", "test.dbt_analytics_engine.int_orders_unequal_agg_shipping_amount.8085e0b065", "test.dbt_analytics_engine.int_orders_unexpected_is_nps_bool.89b6608341", "test.dbt_analytics_engine.int_orders_unexpected_is_returned_bool.a3cea4213e", "test.dbt_analytics_engine.int_orders_unexpected_is_shipped_bool.c2b5343dec", "test.dbt_analytics_engine.not_null_int_orders_customer_id.e78a71eed3", "test.dbt_analytics_engine.not_null_int_orders_first_name.41e8be1f95", "test.dbt_analytics_engine.not_null_int_orders_inbound_shipping_cost.06ccde673e", "test.dbt_analytics_engine.not_null_int_orders_is_nps.e463bb19a8", "test.dbt_analytics_engine.not_null_int_orders_is_returned.5428c59e02", "test.dbt_analytics_engine.not_null_int_orders_is_shipped.ac59b50b97", "test.dbt_analytics_engine.not_null_int_orders_last_name.729e6f5a4c", "test.dbt_analytics_engine.not_null_int_orders_order_date.c8d13500bb", "test.dbt_analytics_engine.not_null_int_orders_order_id.383134cc66", "test.dbt_analytics_engine.not_null_int_orders_order_status.c9525f7b76", "test.dbt_analytics_engine.not_null_int_orders_product_category.81718e6804", "test.dbt_analytics_engine.not_null_int_orders_product_category_id.9633448692", "test.dbt_analytics_engine.not_null_int_orders_product_cost.b326ad5229", "test.dbt_analytics_engine.not_null_int_orders_product_id.d2b92956f6", "test.dbt_analytics_engine.not_null_int_orders_product_name.3b4cb7f6ad", "test.dbt_analytics_engine.relationships_fct_orders_order_id__order_id__ref_int_orders_.5a03fd2117", "test.dbt_analytics_engine.relationships_int_orders_customer_id__customer_id__ref_stg_customers_.9d7e39b587", "test.dbt_analytics_engine.relationships_int_orders_order_id__order_id__ref_stg_orders_.ff87b11be6", "test.dbt_analytics_engine.relationships_int_orders_shipping_id__shipping_id__ref_stg_shipping_.598a58922f", "test.dbt_analytics_engine.unique_int_orders_order_id.63cc4f3a7a", "test.dbt_analytics_engine.unique_int_orders_return_id.402c65096c", "test.dbt_analytics_engine.unique_int_orders_shipping_id.071fd1d880"], "model.dbt_analytics_engine.stg_customers": ["model.dbt_analytics_engine.int_orders", "test.dbt_analytics_engine.relationships_int_orders_customer_id__customer_id__ref_stg_customers_.9d7e39b587"], "model.dbt_analytics_engine.stg_nps": ["model.dbt_analytics_engine.int_orders", "test.dbt_analytics_engine.stg_nps_unexpected_nps_date.8918cb98fd"], "model.dbt_analytics_engine.stg_orders": ["model.dbt_analytics_engine.int_orders", "test.dbt_analytics_engine.dbt_utils_equal_rowcount_int_orders_ref_stg_orders_.5dc9604002", "test.dbt_analytics_engine.relationships_int_orders_order_id__order_id__ref_stg_orders_.ff87b11be6", "test.dbt_analytics_engine.stg_orders_unexpected_order_date.e63e94672f"], "model.dbt_analytics_engine.int_payments": ["model.dbt_analytics_engine.fct_orders", "model.dbt_analytics_engine.fct_payment_methods", "test.dbt_analytics_engine.dbt_utils_equal_rowcount_int_payments_ref_stg_payments_.70f412c4b6", "test.dbt_analytics_engine.fct_orders_unequal_agg_gross_revenue.91ab358fda", "test.dbt_analytics_engine.fct_payment_methods_unequal_agg_gross_revenue.61f110d7e7", "test.dbt_analytics_engine.fct_payment_methods_unequal_agg_payment_fees.41bf364193", "test.dbt_analytics_engine.int_payments_unequal_agg_gross_revenue.28f31da523", "test.dbt_analytics_engine.int_payments_unexpected_payment_fee.3dbfa94602", "test.dbt_analytics_engine.not_null_int_payments_country.18d4938d90", "test.dbt_analytics_engine.not_null_int_payments_country_id.d477883ad0", "test.dbt_analytics_engine.not_null_int_payments_created_at.da6f256d05", "test.dbt_analytics_engine.not_null_int_payments_fixed_fee.e735f0304a", "test.dbt_analytics_engine.not_null_int_payments_gross_revenue.3fab8f131f", "test.dbt_analytics_engine.not_null_int_payments_order_id.557bf2eea0", "test.dbt_analytics_engine.not_null_int_payments_payment_fee.e6ecdd7240", "test.dbt_analytics_engine.not_null_int_payments_payment_id.02e0f4bd25", "test.dbt_analytics_engine.not_null_int_payments_payment_method.a8fd5df74d", "test.dbt_analytics_engine.not_null_int_payments_payment_status.e9f85fff44", "test.dbt_analytics_engine.not_null_int_payments_percentage_fee.cb94ecc835", "test.dbt_analytics_engine.not_null_int_payments_tax_rate.da4366e257", "test.dbt_analytics_engine.relationships_fct_payment_methods_order_id__order_id__ref_int_payments_.05d9a1bed3", "test.dbt_analytics_engine.relationships_int_payments_country_id__country_id__ref_stg_taxes_.df4c4ee979", "test.dbt_analytics_engine.relationships_int_payments_payment_method__payment_method__ref_stg_payment_fees_.1e68484b11"], "model.dbt_analytics_engine.stg_payments": ["model.dbt_analytics_engine.int_payments", "test.dbt_analytics_engine.dbt_utils_equal_rowcount_int_payments_ref_stg_payments_.70f412c4b6", "test.dbt_analytics_engine.int_payments_unequal_agg_gross_revenue.28f31da523", "test.dbt_analytics_engine.stg_payments_unexpected_created_at.c6758e1cb0"], "model.dbt_analytics_engine.stg_returns": ["model.dbt_analytics_engine.int_orders", "test.dbt_analytics_engine.stg_returns_unexpected_return_date.12ec6a0b35"], "model.dbt_analytics_engine.stg_shipping": ["model.dbt_analytics_engine.int_orders", "test.dbt_analytics_engine.int_orders_unequal_agg_shipping_amount.8085e0b065", "test.dbt_analytics_engine.relationships_int_orders_shipping_id__shipping_id__ref_stg_shipping_.598a58922f", "test.dbt_analytics_engine.stg_shipping_unexpected_shipping_date.8b549f2bc4"], "test.dbt_analytics_engine.stg_nps_unexpected_nps_date.8918cb98fd": [], "test.dbt_analytics_engine.stg_orders_unexpected_order_date.e63e94672f": [], "test.dbt_analytics_engine.stg_payments_unexpected_created_at.c6758e1cb0": [], "test.dbt_analytics_engine.stg_returns_unexpected_return_date.12ec6a0b35": [], "test.dbt_analytics_engine.stg_shipping_unexpected_shipping_date.8b549f2bc4": [], "test.dbt_analytics_engine.not_null_int_orders_product_category_id.9633448692": [], "test.dbt_analytics_engine.not_null_int_orders_product_id.d2b92956f6": [], "test.dbt_analytics_engine.unique_int_orders_order_id.63cc4f3a7a": [], "test.dbt_analytics_engine.not_null_int_orders_order_id.383134cc66": [], "test.dbt_analytics_engine.relationships_int_orders_order_id__order_id__ref_stg_orders_.ff87b11be6": [], "test.dbt_analytics_engine.not_null_int_orders_customer_id.e78a71eed3": [], "test.dbt_analytics_engine.relationships_int_orders_customer_id__customer_id__ref_stg_customers_.9d7e39b587": [], "test.dbt_analytics_engine.not_null_int_orders_order_status.c9525f7b76": [], "test.dbt_analytics_engine.not_null_int_orders_order_date.c8d13500bb": [], "test.dbt_analytics_engine.not_null_int_orders_first_name.41e8be1f95": [], "test.dbt_analytics_engine.not_null_int_orders_last_name.729e6f5a4c": [], "test.dbt_analytics_engine.unique_int_orders_shipping_id.071fd1d880": [], "test.dbt_analytics_engine.relationships_int_orders_shipping_id__shipping_id__ref_stg_shipping_.598a58922f": [], "test.dbt_analytics_engine.not_null_int_orders_is_shipped.ac59b50b97": [], "test.dbt_analytics_engine.int_orders_unexpected_is_shipped_bool.c2b5343dec": [], "test.dbt_analytics_engine.unique_int_orders_return_id.402c65096c": [], "test.dbt_analytics_engine.not_null_int_orders_is_returned.5428c59e02": [], "test.dbt_analytics_engine.int_orders_unexpected_is_returned_bool.a3cea4213e": [], "test.dbt_analytics_engine.not_null_int_orders_is_nps.e463bb19a8": [], "test.dbt_analytics_engine.int_orders_unexpected_is_nps_bool.89b6608341": [], "test.dbt_analytics_engine.not_null_int_orders_product_category.81718e6804": [], "test.dbt_analytics_engine.not_null_int_orders_product_name.3b4cb7f6ad": [], "test.dbt_analytics_engine.not_null_int_orders_inbound_shipping_cost.06ccde673e": [], "test.dbt_analytics_engine.not_null_int_orders_product_cost.b326ad5229": [], "test.dbt_analytics_engine.dbt_utils_equal_rowcount_int_orders_ref_stg_orders_.5dc9604002": [], "test.dbt_analytics_engine.int_orders_unequal_agg_shipping_amount.8085e0b065": [], "test.dbt_analytics_engine.not_null_int_payments_order_id.557bf2eea0": [], "test.dbt_analytics_engine.not_null_int_payments_payment_id.02e0f4bd25": [], "test.dbt_analytics_engine.not_null_int_payments_payment_method.a8fd5df74d": [], "test.dbt_analytics_engine.relationships_int_payments_payment_method__payment_method__ref_stg_payment_fees_.1e68484b11": [], "test.dbt_analytics_engine.not_null_int_payments_payment_status.e9f85fff44": [], "test.dbt_analytics_engine.not_null_int_payments_country_id.d477883ad0": [], "test.dbt_analytics_engine.relationships_int_payments_country_id__country_id__ref_stg_taxes_.df4c4ee979": [], "test.dbt_analytics_engine.not_null_int_payments_country.18d4938d90": [], "test.dbt_analytics_engine.not_null_int_payments_created_at.da6f256d05": [], "test.dbt_analytics_engine.not_null_int_payments_gross_revenue.3fab8f131f": [], "test.dbt_analytics_engine.not_null_int_payments_tax_rate.da4366e257": [], "test.dbt_analytics_engine.not_null_int_payments_percentage_fee.cb94ecc835": [], "test.dbt_analytics_engine.not_null_int_payments_fixed_fee.e735f0304a": [], "test.dbt_analytics_engine.not_null_int_payments_payment_fee.e6ecdd7240": [], "test.dbt_analytics_engine.int_payments_unexpected_payment_fee.3dbfa94602": [], "test.dbt_analytics_engine.dbt_utils_equal_rowcount_int_payments_ref_stg_payments_.70f412c4b6": [], "test.dbt_analytics_engine.int_payments_unequal_agg_gross_revenue.28f31da523": [], "test.dbt_analytics_engine.source_unique_raw_customers_customer_id.3579d23017": [], "test.dbt_analytics_engine.source_not_null_raw_customers_customer_id.e869432dbb": [], "test.dbt_analytics_engine.source_customers_unexpected_customer_id_length.fafa7939c9": [], "test.dbt_analytics_engine.source_not_null_raw_customers_first_name.b1fe98db61": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_customers_first_name.1aa711fefa": [], "test.dbt_analytics_engine.source_customers_unexpected_first_name_length.787dbb0899": [], "test.dbt_analytics_engine.source_not_null_raw_customers_last_name.ef2fe0f207": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_customers_last_name.6ffe283ff9": [], "test.dbt_analytics_engine.source_customers_unexpected_last_name_length.01feba77f5": [], "test.dbt_analytics_engine.source_unique_raw_nps_order_id.aae4faebb6": [], "test.dbt_analytics_engine.source_not_null_raw_nps_order_id.2eccdcf1e2": [], "test.dbt_analytics_engine.source_nps_unexpected_order_id_length.d9115f851b": [], "test.dbt_analytics_engine.source_not_null_raw_nps_customer_id.5fda13b29c": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_nps_customer_id.1d8ada62fb": [], "test.dbt_analytics_engine.source_nps_unexpected_customer_id_length.ee58215e3f": [], "test.dbt_analytics_engine.source_not_null_raw_nps_is_nps.a69d0af618": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_nps_is_nps.bcbc991b6e": [], "test.dbt_analytics_engine.source_nps_unexpected_is_nps_bool.78259a7eb7": [], "test.dbt_analytics_engine.source_not_null_raw_nps_nps_score.7d4a90987a": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_nps_nps_score.971c38316b": [], "test.dbt_analytics_engine.source_nps_unexpected_nps_score.8a16a09fd2": [], "test.dbt_analytics_engine.source_not_null_raw_nps_nps_date.1abdb6c60a": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_nps_nps_date.5268efe72d": [], "test.dbt_analytics_engine.source_unique_raw_orders_order_id.2e0765462f": [], "test.dbt_analytics_engine.source_not_null_raw_orders_order_id.03a065a98f": [], "test.dbt_analytics_engine.source_orders_unexpected_order_id_length.717f86d8cf": [], "test.dbt_analytics_engine.source_not_null_raw_orders_customer_id.3962c6ab03": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_customer_id.5c0a7aeec1": [], "test.dbt_analytics_engine.source_orders_unexpected_custoemr_id_length.4e34b069bd": [], "test.dbt_analytics_engine.source_not_null_raw_orders_order_status.0e4e88bed2": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_order_status.7efa1990d7": [], "test.dbt_analytics_engine.source_orders_unexpected_order_status.6f35c0bf12": [], "test.dbt_analytics_engine.source_not_null_raw_orders_order_date.4c6c74964f": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_order_date.80ff9d08cd": [], "test.dbt_analytics_engine.source_not_null_raw_orders_product_category_id.5538cf78d2": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_product_category_id.a1bffe5382": [], "test.dbt_analytics_engine.source_orders_unexpected_product_category_id.c5b406ac9f": [], "test.dbt_analytics_engine.source_not_null_raw_orders_product_id.47f01cfc3d": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_product_id.c3e441e90b": [], "test.dbt_analytics_engine.source_orders_unexpected_product__id.6d1bf7a4a2": [], "test.dbt_analytics_engine.source_not_null_raw_payments_order_id.def3cb6fc9": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_order_id.f225e51aa8": [], "test.dbt_analytics_engine.source_payments_unexpected_order_id_length.b7725a5e3e": [], "test.dbt_analytics_engine.source_not_null_raw_payments_payment_id.a7f5b41ef5": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_payment_id.757e26661f": [], "test.dbt_analytics_engine.source_not_null_raw_payments_payment_method.9aca47f72c": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_payment_method.5b7ec2ca0a": [], "test.dbt_analytics_engine.source_payments_unexpected_payment_method.010f8676de": [], "test.dbt_analytics_engine.source_not_null_raw_payments_payment_amount.391c03161a": [], "test.dbt_analytics_engine.source_payments_assert_positive_payment_amount.d0159c6dbe": [], "test.dbt_analytics_engine.source_not_null_raw_payments_payment_country_id.672aaa798a": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_payment_country_id.11cb76a07e": [], "test.dbt_analytics_engine.source_payments_unexpected_country_id.e6838f7725": [], "test.dbt_analytics_engine.source_not_null_raw_payments_payment_status.54558a6ea3": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_payment_status.bf12f29150": [], "test.dbt_analytics_engine.source_payments_unexpected_payment_status.cdd31bef7c": [], "test.dbt_analytics_engine.source_not_null_raw_payments_created_at.710d6129ed": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_created_at.f13e871fc3": [], "test.dbt_analytics_engine.source_unique_raw_returns_order_id.a8aef5caa0": [], "test.dbt_analytics_engine.source_not_null_raw_returns_order_id.6d0a5fcbbe": [], "test.dbt_analytics_engine.source_returns_unexpected_order_id_length.66bc0666d6": [], "test.dbt_analytics_engine.source_unique_raw_returns_return_id.1d09b09e28": [], "test.dbt_analytics_engine.source_not_null_raw_returns_return_id.18df885383": [], "test.dbt_analytics_engine.source_returns_unexpected_return_id_length.3da49c526e": [], "test.dbt_analytics_engine.source_not_null_raw_returns_is_returned.148b12a528": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_returns_is_returned.cd1f0f7ac5": [], "test.dbt_analytics_engine.source_returns_unexpected_is_returned_bool.c8835a46b6": [], "test.dbt_analytics_engine.source_not_null_raw_returns_return_date.d74bba5b49": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_returns_return_date.b667e51d4b": [], "test.dbt_analytics_engine.source_not_null_raw_returns_return_reason.005573374b": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_returns_return_reason.8a55d4b196": [], "test.dbt_analytics_engine.source_returns_unexpected_return_reason.bbd49bceac": [], "test.dbt_analytics_engine.source_unique_raw_shipping_order_id.d5a8aa62ce": [], "test.dbt_analytics_engine.source_not_null_raw_shipping_order_id.4459e0b7d6": [], "test.dbt_analytics_engine.source_shipping_unexpected_order_id_length.2ba4519514": [], "test.dbt_analytics_engine.source_unique_raw_shipping_shipping_id.c6c0e38145": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_shipping_shipping_id.71eae1e42f": [], "test.dbt_analytics_engine.source_shipping_unexpected_shipping_id_length.3c4d89d925": [], "test.dbt_analytics_engine.source_not_null_raw_shipping_is_shipped.3766118adb": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_shipping_is_shipped.a565383871": [], "test.dbt_analytics_engine.source_shipping_unexpected_is_shipped_bool.6a63595654": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_shipping_shipping_date.019f309d0c": [], "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_shipping_shipping_amount.e4a06339ae": [], "test.dbt_analytics_engine.source_shipping_assert_positive_shipping_amount.8d0c1a37a8": [], "seed.dbt_analytics_engine.seed_payment_fees": ["model.dbt_analytics_engine.stg_payment_fees", "test.dbt_analytics_engine.not_null_seed_payment_fees_fixed_fee.2e54ee1bd7", "test.dbt_analytics_engine.not_null_seed_payment_fees_payment_method.c7d24bb82e", "test.dbt_analytics_engine.not_null_seed_payment_fees_payment_method_id.ed89636986", "test.dbt_analytics_engine.not_null_seed_payment_fees_percentage_fee.697d087974", "test.dbt_analytics_engine.seed_payment_fees_unexpected_fixed_fee.ff8eab6f52", "test.dbt_analytics_engine.seed_payment_fees_unexpected_payment_method.a712880c05", "test.dbt_analytics_engine.seed_payment_fees_unexpected_payment_method_id.c1100364e1", "test.dbt_analytics_engine.seed_payment_fees_unexpected_percentage_fee.f4ed1ee461", "test.dbt_analytics_engine.unique_seed_payment_fees_payment_method.d1803efcb4", "test.dbt_analytics_engine.unique_seed_payment_fees_payment_method_id.e75aa7b850"], "test.dbt_analytics_engine.unique_seed_payment_fees_payment_method_id.e75aa7b850": [], "test.dbt_analytics_engine.not_null_seed_payment_fees_payment_method_id.ed89636986": [], "test.dbt_analytics_engine.seed_payment_fees_unexpected_payment_method_id.c1100364e1": [], "test.dbt_analytics_engine.unique_seed_payment_fees_payment_method.d1803efcb4": [], "test.dbt_analytics_engine.not_null_seed_payment_fees_payment_method.c7d24bb82e": [], "test.dbt_analytics_engine.seed_payment_fees_unexpected_payment_method.a712880c05": [], "test.dbt_analytics_engine.not_null_seed_payment_fees_percentage_fee.697d087974": [], "test.dbt_analytics_engine.seed_payment_fees_unexpected_percentage_fee.f4ed1ee461": [], "test.dbt_analytics_engine.not_null_seed_payment_fees_fixed_fee.2e54ee1bd7": [], "test.dbt_analytics_engine.seed_payment_fees_unexpected_fixed_fee.ff8eab6f52": [], "model.dbt_analytics_engine.dim_products": ["exposure.dbt_analytics_engine.product_performance", "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_avg_fulfillment_days.feb31904d2", "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_avg_nps_score.58fba2347f", "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_country.3c8ed213c7", "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_country_id.ed74d915c2", "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_date.f4fc713dc9", "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_nb_order_id.72ef84204a", "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_nb_return_id.6fc6712643", "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_nb_shipping_id.de0c73bde0", "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_product_category.4a89a363ad", "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_product_name.76f63d55df", "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_cm.30608c74a2", "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_cogs.ec17a924f7", "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_gross_revenue.372735f062", "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_net_revenue_after_tax.efb6a5d29f", "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_net_revenue_before_tax.d40cce386b", "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_payment_fee.b6c559fc4a", "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_refund_amount.438fc2fc1b", "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_returned_cogs.f6c63eb1d6", "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_tax_amount.4428565fd6", "test.dbt_analytics_engine.dim_products_assert_positive_avg_fulfillment_days.089c583b64", "test.dbt_analytics_engine.dim_products_assert_positive_avg_nps_score.e3d03c7b27", "test.dbt_analytics_engine.dim_products_assert_positive_total_cogs.4fcaffbba3", "test.dbt_analytics_engine.dim_products_assert_positive_total_gross_revenue.c2247b3969", "test.dbt_analytics_engine.dim_products_assert_positive_total_net_revenue_after_tax.ba2c6febe9", "test.dbt_analytics_engine.dim_products_assert_positive_total_net_revenue_before_tax.c43767ddeb", "test.dbt_analytics_engine.dim_products_assert_positive_total_payment_fee.b1975067f6", "test.dbt_analytics_engine.dim_products_assert_positive_total_tax_amount.c699116ec6", "test.dbt_analytics_engine.dim_products_unequal_agg_total_cm.5e6ccd2b8c", "test.dbt_analytics_engine.dim_products_unequal_agg_total_cogs.1d3a202822", "test.dbt_analytics_engine.dim_products_unequal_agg_total_gross_revenue.c37f597c7f", "test.dbt_analytics_engine.dim_products_unequal_agg_total_net_revenue_after_tax.f97dfdf7da", "test.dbt_analytics_engine.dim_products_unequal_agg_total_net_revenue_before_tax.cf29af6db1", "test.dbt_analytics_engine.dim_products_unequal_agg_total_payment_fee.83ef9782e7", "test.dbt_analytics_engine.dim_products_unequal_agg_total_refund_amount.9e245aca75", "test.dbt_analytics_engine.dim_products_unequal_agg_total_returned_cogs.7fe2b08a8f", "test.dbt_analytics_engine.dim_products_unequal_agg_total_tax_amount.639980c235", "test.dbt_analytics_engine.dim_products_unexpected_country_id.87d133469b", "test.dbt_analytics_engine.dim_products_unexpected_date.8ba6ea57ff", "test.dbt_analytics_engine.dim_products_unexpected_product_category.c192a37430", "test.dbt_analytics_engine.not_null_dim_products_country.5bb34d1877", "test.dbt_analytics_engine.not_null_dim_products_country_id.ebbcb8b76e", "test.dbt_analytics_engine.not_null_dim_products_date.574048cf21", "test.dbt_analytics_engine.not_null_dim_products_nb_order_id.3bd5159215", "test.dbt_analytics_engine.not_null_dim_products_nb_return_id.496158f2a9", "test.dbt_analytics_engine.not_null_dim_products_nb_shipping_id.6210429e27", "test.dbt_analytics_engine.not_null_dim_products_product_category.069796c541", "test.dbt_analytics_engine.not_null_dim_products_product_name.991aec73f3", "test.dbt_analytics_engine.not_null_dim_products_total_cm.1e2bfa8ee1", "test.dbt_analytics_engine.not_null_dim_products_total_cogs.4764d28c01", "test.dbt_analytics_engine.not_null_dim_products_total_gross_revenue.de39c2a3eb", "test.dbt_analytics_engine.not_null_dim_products_total_net_revenue_after_tax.f2faaacfd9", "test.dbt_analytics_engine.not_null_dim_products_total_net_revenue_before_tax.47c7127675", "test.dbt_analytics_engine.not_null_dim_products_total_payment_fee.31a176c2f7", "test.dbt_analytics_engine.not_null_dim_products_total_refund_amount.8811aa6bc7", "test.dbt_analytics_engine.not_null_dim_products_total_returned_cogs.a5ad2fc4e6", "test.dbt_analytics_engine.not_null_dim_products_total_tax_amount.54c3118144"], "model.dbt_analytics_engine.fct_orders_timeseries_sma": ["exposure.dbt_analytics_engine.sales_forecasting", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_date.ead3fe64c2", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales.58b8af4604", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_120.afc9bae971", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_14.709a4347be", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_250.49bd8abee2", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_30.849fb34bf2", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_60.6fc3dc75b8", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_120.3d2213ced4", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_14.484861a84e", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_250.6f8940f530", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_30.8c23c0accd", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_60.669d910d99", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_120.0d6017c9ee", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_14.d2b180e7d3", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_250.c11ad8a798", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_30.7edd812f30", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_60.92afcb3b14", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_120.4f2cb282c0", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_14.172d14f4a0", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_250.3cbe02f36d", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_30.c31a4454bb", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_60.28285eb4a6", "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales.198d3bbf9d", "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_120.2c2a4416a5", "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_14.3ae2dd3033", "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_250.b40dc14c84", "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_30.392bd7ab05", "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_60.b5373e8eb0", "test.dbt_analytics_engine.fct_orders_timeseries_sma_unequal_agg_sales.36b2dec339", "test.dbt_analytics_engine.fct_orders_timeseries_sma_unexpected_date.2d619508ac", "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_date.37657c660a", "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales.7a3076ff3b", "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_120.db9f6c7bd9", "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_14.374235e955", "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_250.331ff4411b", "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_30.adbc238496", "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_60.4b8826df23", "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_120.efe9376cd5", "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_14.ec877c63cd", "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_250.6bc0b85c8b", "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_30.ca28376bdb", "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_60.e33970618f", "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_120.96650466e0", "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_14.63f8b4a3fd", "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_250.be8915d053", "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_30.06ef189e4a", "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_60.22e8c9233c", "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_120.a9c9b9f6e3", "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_14.83ff08e036", "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_250.3cae461508", "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_30.023a9ab431", "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_60.816ab699e5"], "model.dbt_analytics_engine.fct_orders": ["exposure.dbt_analytics_engine.sales_performance", "model.dbt_analytics_engine.dim_products", "model.dbt_analytics_engine.fct_orders_timeseries_sma", "test.dbt_analytics_engine.dbt_utils_accepted_range_fct_orders_nps_score__10__0.7918938823", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_cm.8fc3956ee5", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_cogs.68c7e7b990", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_country.0a27dd05bc", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_country_id.7ac8b5f6b7", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_customer_id.1e994fbbd6", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_customer_order_nb.b5fec9bc97", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_customer_type.5b997d97e0", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_first_name.0e5bb2183e", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_fulfillment_days.6ba87ed360", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_gross_revenue.be21114f63", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_is_nps.ec1b06649e", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_last_name.1db1f3d23b", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_nb_payments.bcd85f6c8a", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_net_revenue_after_tax.d5134dd3ec", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_net_revenue_before_tax.1c691828cc", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_nps_date.d14f37bd0e", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_nps_score.4801b7fe57", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_order_date.369ca05d4f", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_order_status.0b6286ed95", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_payment_fee.51eecf2763", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_payment_method.e6ed76876e", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_product_category.112df2d465", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_product_category_id.92b52ba0ee", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_product_id.f591e3ef76", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_product_name.04af613d46", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_refund_amount.3a865afd77", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_return_date.c4a12821ab", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_return_id.f0a57fcf42", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_return_reason.10f36c5ab1", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_returned_cogs.ce6d78c725", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_shipping_date.e1289987ed", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_shipping_id.1f5b4e61fa", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_tax_amount.9d065212d2", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_tax_rate.c8727ca0c5", "test.dbt_analytics_engine.dim_products_unequal_agg_total_cm.5e6ccd2b8c", "test.dbt_analytics_engine.dim_products_unequal_agg_total_cogs.1d3a202822", "test.dbt_analytics_engine.dim_products_unequal_agg_total_gross_revenue.c37f597c7f", "test.dbt_analytics_engine.dim_products_unequal_agg_total_net_revenue_after_tax.f97dfdf7da", "test.dbt_analytics_engine.dim_products_unequal_agg_total_net_revenue_before_tax.cf29af6db1", "test.dbt_analytics_engine.dim_products_unequal_agg_total_payment_fee.83ef9782e7", "test.dbt_analytics_engine.dim_products_unequal_agg_total_refund_amount.9e245aca75", "test.dbt_analytics_engine.dim_products_unequal_agg_total_returned_cogs.7fe2b08a8f", "test.dbt_analytics_engine.dim_products_unequal_agg_total_tax_amount.639980c235", "test.dbt_analytics_engine.fct_orders_assert_positive_gross_revenue.d0522b6f57", "test.dbt_analytics_engine.fct_orders_assert_positive_payment_fee.3fc91c0b12", "test.dbt_analytics_engine.fct_orders_assert_positive_shipping_amount.97b89a1e69", "test.dbt_analytics_engine.fct_orders_assert_positive_tax_rate.3bb0614ec6", "test.dbt_analytics_engine.fct_orders_timeseries_sma_unequal_agg_sales.36b2dec339", "test.dbt_analytics_engine.fct_orders_unequal_agg_cogs.39983bc63a", "test.dbt_analytics_engine.fct_orders_unequal_agg_gross_revenue.91ab358fda", "test.dbt_analytics_engine.fct_orders_unequal_agg_shipping_amount.f398ff09f4", "test.dbt_analytics_engine.fct_orders_unexpected_cm.8fd4691b5f", "test.dbt_analytics_engine.fct_orders_unexpected_cogs.001142e58f", "test.dbt_analytics_engine.fct_orders_unexpected_country_id.f51b3be77c", "test.dbt_analytics_engine.fct_orders_unexpected_customer_type.69983a7d22", "test.dbt_analytics_engine.fct_orders_unexpected_fulfillment_days.224a79c537", "test.dbt_analytics_engine.fct_orders_unexpected_is_nps_bool.e8cc54079b", "test.dbt_analytics_engine.fct_orders_unexpected_is_returned_bool.3e7d7bb86e", "test.dbt_analytics_engine.fct_orders_unexpected_is_shipped_bool.281259375c", "test.dbt_analytics_engine.fct_orders_unexpected_nb_payments.fb52011391", "test.dbt_analytics_engine.fct_orders_unexpected_net_revenue_after_tax.cf4c030292", "test.dbt_analytics_engine.fct_orders_unexpected_net_revenue_before_tax.35c5c243a5", "test.dbt_analytics_engine.fct_orders_unexpected_nps_date.18b8cb456d", "test.dbt_analytics_engine.fct_orders_unexpected_order_date.4a7d73acb5", "test.dbt_analytics_engine.fct_orders_unexpected_order_status.a694a31b07", "test.dbt_analytics_engine.fct_orders_unexpected_payment_method.143499598b", "test.dbt_analytics_engine.fct_orders_unexpected_product_category.796f7162be", "test.dbt_analytics_engine.fct_orders_unexpected_product_category_id.0e1442b69c", "test.dbt_analytics_engine.fct_orders_unexpected_product_id.03e8fa5b21", "test.dbt_analytics_engine.fct_orders_unexpected_refund_amount.79c3344f36", "test.dbt_analytics_engine.fct_orders_unexpected_return_date.faa60b5a52", "test.dbt_analytics_engine.fct_orders_unexpected_return_reason.bf2d1cade2", "test.dbt_analytics_engine.fct_orders_unexpected_returned_cogs.72a465536d", "test.dbt_analytics_engine.fct_orders_unexpected_shipping_date.2e6bb5ce4f", "test.dbt_analytics_engine.fct_orders_unexpected_tax_amount.8d62b11a90", "test.dbt_analytics_engine.fct_orders_unexpected_tax_rate.888f839f9c", "test.dbt_analytics_engine.not_null_fct_orders_cm.e44709b283", "test.dbt_analytics_engine.not_null_fct_orders_cogs.0b19f968ef", "test.dbt_analytics_engine.not_null_fct_orders_country.0edcc91e35", "test.dbt_analytics_engine.not_null_fct_orders_country_id.dd87008526", "test.dbt_analytics_engine.not_null_fct_orders_customer_id.16fe324f7b", "test.dbt_analytics_engine.not_null_fct_orders_customer_order_nb.79c7350630", "test.dbt_analytics_engine.not_null_fct_orders_customer_type.5d273b0b2b", "test.dbt_analytics_engine.not_null_fct_orders_first_name.a89a0764e2", "test.dbt_analytics_engine.not_null_fct_orders_gross_revenue.e9774c74d8", "test.dbt_analytics_engine.not_null_fct_orders_last_name.1e39458222", "test.dbt_analytics_engine.not_null_fct_orders_nb_payments.3cd88a1cae", "test.dbt_analytics_engine.not_null_fct_orders_net_revenue_after_tax.e01b375b4e", "test.dbt_analytics_engine.not_null_fct_orders_net_revenue_before_tax.bb8578a9c6", "test.dbt_analytics_engine.not_null_fct_orders_order_date.84f0a76362", "test.dbt_analytics_engine.not_null_fct_orders_order_id.4e687af8d0", "test.dbt_analytics_engine.not_null_fct_orders_order_status.b83f07f66b", "test.dbt_analytics_engine.not_null_fct_orders_payment_fee.cb62252086", "test.dbt_analytics_engine.not_null_fct_orders_payment_method.552e8460b4", "test.dbt_analytics_engine.not_null_fct_orders_product_category.1766c71bb2", "test.dbt_analytics_engine.not_null_fct_orders_product_category_id.da74e704f7", "test.dbt_analytics_engine.not_null_fct_orders_product_id.8e73ef4e24", "test.dbt_analytics_engine.not_null_fct_orders_product_name.a9a0af8e44", "test.dbt_analytics_engine.not_null_fct_orders_refund_amount.f6e3861bf0", "test.dbt_analytics_engine.not_null_fct_orders_returned_cogs.5259a715e3", "test.dbt_analytics_engine.not_null_fct_orders_tax_amount.405019f249", "test.dbt_analytics_engine.not_null_fct_orders_tax_rate.83abb81011", "test.dbt_analytics_engine.relationships_fct_orders_order_id__order_id__ref_int_orders_.5a03fd2117", "test.dbt_analytics_engine.unique_fct_orders_order_id.523ddb6ce5", "test.dbt_analytics_engine.unique_fct_orders_return_id.87582f9770", "test.dbt_analytics_engine.unique_fct_orders_shipping_id.b0be835405"], "model.dbt_analytics_engine.fct_payment_methods": ["exposure.dbt_analytics_engine.payment_methods_performance", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_amazon_pay_amount.7d9e9abbfd", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_amazon_pay_payment_fees.5ca4935050", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_apple_pay_amount.269ff4d35e", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_apple_pay_payment_fees.e0ab54115b", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_bitcoin_amount.15818a9c60", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_bitcoin_payment_fees.4cfe95cb5e", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_country.f361beadad", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_country_id.b42ed05717", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_order_date.c02b07ac0e", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_order_id.00cc07e79d", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_stripe_amount.9456b323b5", "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_stripe_payment_fees.df8b964557", "test.dbt_analytics_engine.fct_payment_methods_assert_positive_nb_payments.bcb7a7d8c9", "test.dbt_analytics_engine.fct_payment_methods_assert_positive_total_gross_revenue.c0d9bfabd1", "test.dbt_analytics_engine.fct_payment_methods_assert_positive_total_payment_fees.e8836651e3", "test.dbt_analytics_engine.fct_payment_methods_unequal_agg_gross_revenue.61f110d7e7", "test.dbt_analytics_engine.fct_payment_methods_unequal_agg_payment_fees.41bf364193", "test.dbt_analytics_engine.fct_payment_methods_unexpected_amazon_pay_amount.d41fa1103d", "test.dbt_analytics_engine.fct_payment_methods_unexpected_amazon_pay_payment_fees.ee2028ca88", "test.dbt_analytics_engine.fct_payment_methods_unexpected_apple_pay_amount.d0161e7049", "test.dbt_analytics_engine.fct_payment_methods_unexpected_apple_pay_payment_fees.8d0aed3e47", "test.dbt_analytics_engine.fct_payment_methods_unexpected_bitcoin_amount.00b3640521", "test.dbt_analytics_engine.fct_payment_methods_unexpected_bitcoin_payment_fees.2680568c3c", "test.dbt_analytics_engine.fct_payment_methods_unexpected_country_id.63b418f2a9", "test.dbt_analytics_engine.fct_payment_methods_unexpected_order_date.01981f60c8", "test.dbt_analytics_engine.fct_payment_methods_unexpected_order_status.35a4bb0b99", "test.dbt_analytics_engine.fct_payment_methods_unexpected_stripe_amount.d0d4124728", "test.dbt_analytics_engine.fct_payment_methods_unexpected_stripe_payment_fees.09c5a52271", "test.dbt_analytics_engine.not_null_fct_payment_methods_amazon_pay_amount.470294cec0", "test.dbt_analytics_engine.not_null_fct_payment_methods_amazon_pay_payment_fees.8ccf82be46", "test.dbt_analytics_engine.not_null_fct_payment_methods_apple_pay_amount.35570bd1df", "test.dbt_analytics_engine.not_null_fct_payment_methods_apple_pay_payment_fees.ca555fc60d", "test.dbt_analytics_engine.not_null_fct_payment_methods_bitcoin_amount.d7592abe44", "test.dbt_analytics_engine.not_null_fct_payment_methods_bitcoin_payment_fees.cf4eee780e", "test.dbt_analytics_engine.not_null_fct_payment_methods_country.eb06966f71", "test.dbt_analytics_engine.not_null_fct_payment_methods_country_id.b66edb05ed", "test.dbt_analytics_engine.not_null_fct_payment_methods_nb_payments.7a94409e31", "test.dbt_analytics_engine.not_null_fct_payment_methods_order_date.21aeb8313c", "test.dbt_analytics_engine.not_null_fct_payment_methods_order_id.ddee004099", "test.dbt_analytics_engine.not_null_fct_payment_methods_order_status.c48b155ca0", "test.dbt_analytics_engine.not_null_fct_payment_methods_payment_methods.b1f93b15ca", "test.dbt_analytics_engine.not_null_fct_payment_methods_stripe_amount.3e4367e046", "test.dbt_analytics_engine.not_null_fct_payment_methods_stripe_payment_fees.78f2cdbed9", "test.dbt_analytics_engine.not_null_fct_payment_methods_total_gross_revenue.afe445581b", "test.dbt_analytics_engine.not_null_fct_payment_methods_total_payment_fees.7bda1ae723", "test.dbt_analytics_engine.relationships_fct_payment_methods_order_id__order_id__ref_int_payments_.05d9a1bed3", "test.dbt_analytics_engine.unique_fct_payment_methods_order_id.acc4722fd2"], "test.dbt_analytics_engine.not_null_dim_products_date.574048cf21": [], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_date.f4fc713dc9": [], "test.dbt_analytics_engine.dim_products_unexpected_date.8ba6ea57ff": [], "test.dbt_analytics_engine.not_null_dim_products_country_id.ebbcb8b76e": [], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_country_id.ed74d915c2": [], "test.dbt_analytics_engine.dim_products_unexpected_country_id.87d133469b": [], "test.dbt_analytics_engine.not_null_dim_products_country.5bb34d1877": [], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_country.3c8ed213c7": [], "test.dbt_analytics_engine.not_null_dim_products_product_category.069796c541": [], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_product_category.4a89a363ad": [], "test.dbt_analytics_engine.dim_products_unexpected_product_category.c192a37430": [], "test.dbt_analytics_engine.not_null_dim_products_product_name.991aec73f3": [], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_product_name.76f63d55df": [], "test.dbt_analytics_engine.not_null_dim_products_nb_order_id.3bd5159215": [], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_nb_order_id.72ef84204a": [], "test.dbt_analytics_engine.not_null_dim_products_nb_shipping_id.6210429e27": [], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_nb_shipping_id.de0c73bde0": [], "test.dbt_analytics_engine.not_null_dim_products_nb_return_id.496158f2a9": [], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_nb_return_id.6fc6712643": [], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_avg_fulfillment_days.feb31904d2": [], "test.dbt_analytics_engine.dim_products_assert_positive_avg_fulfillment_days.089c583b64": [], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_avg_nps_score.58fba2347f": [], "test.dbt_analytics_engine.dim_products_assert_positive_avg_nps_score.e3d03c7b27": [], "test.dbt_analytics_engine.not_null_dim_products_total_gross_revenue.de39c2a3eb": [], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_gross_revenue.372735f062": [], "test.dbt_analytics_engine.dim_products_assert_positive_total_gross_revenue.c2247b3969": [], "test.dbt_analytics_engine.not_null_dim_products_total_tax_amount.54c3118144": [], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_tax_amount.4428565fd6": [], "test.dbt_analytics_engine.dim_products_assert_positive_total_tax_amount.c699116ec6": [], "test.dbt_analytics_engine.not_null_dim_products_total_net_revenue_before_tax.47c7127675": [], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_net_revenue_before_tax.d40cce386b": [], "test.dbt_analytics_engine.dim_products_assert_positive_total_net_revenue_before_tax.c43767ddeb": [], "test.dbt_analytics_engine.not_null_dim_products_total_net_revenue_after_tax.f2faaacfd9": [], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_net_revenue_after_tax.efb6a5d29f": [], "test.dbt_analytics_engine.dim_products_assert_positive_total_net_revenue_after_tax.ba2c6febe9": [], "test.dbt_analytics_engine.not_null_dim_products_total_cogs.4764d28c01": [], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_cogs.ec17a924f7": [], "test.dbt_analytics_engine.dim_products_assert_positive_total_cogs.4fcaffbba3": [], "test.dbt_analytics_engine.not_null_dim_products_total_returned_cogs.a5ad2fc4e6": [], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_returned_cogs.f6c63eb1d6": [], "test.dbt_analytics_engine.not_null_dim_products_total_refund_amount.8811aa6bc7": [], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_refund_amount.438fc2fc1b": [], "test.dbt_analytics_engine.not_null_dim_products_total_payment_fee.31a176c2f7": [], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_payment_fee.b6c559fc4a": [], "test.dbt_analytics_engine.dim_products_assert_positive_total_payment_fee.b1975067f6": [], "test.dbt_analytics_engine.not_null_dim_products_total_cm.1e2bfa8ee1": [], "test.dbt_analytics_engine.dbt_utils_not_constant_dim_products_total_cm.30608c74a2": [], "test.dbt_analytics_engine.dim_products_unequal_agg_total_gross_revenue.c37f597c7f": [], "test.dbt_analytics_engine.dim_products_unequal_agg_total_tax_amount.639980c235": [], "test.dbt_analytics_engine.dim_products_unequal_agg_total_net_revenue_before_tax.cf29af6db1": [], "test.dbt_analytics_engine.dim_products_unequal_agg_total_net_revenue_after_tax.f97dfdf7da": [], "test.dbt_analytics_engine.dim_products_unequal_agg_total_cogs.1d3a202822": [], "test.dbt_analytics_engine.dim_products_unequal_agg_total_returned_cogs.7fe2b08a8f": [], "test.dbt_analytics_engine.dim_products_unequal_agg_total_refund_amount.9e245aca75": [], "test.dbt_analytics_engine.dim_products_unequal_agg_total_payment_fee.83ef9782e7": [], "test.dbt_analytics_engine.dim_products_unequal_agg_total_cm.5e6ccd2b8c": [], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_date.37657c660a": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_date.ead3fe64c2": [], "test.dbt_analytics_engine.fct_orders_timeseries_sma_unexpected_date.2d619508ac": [], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales.7a3076ff3b": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales.58b8af4604": [], "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales.198d3bbf9d": [], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_14.374235e955": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_14.709a4347be": [], "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_14.3ae2dd3033": [], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_30.adbc238496": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_30.849fb34bf2": [], "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_30.392bd7ab05": [], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_60.4b8826df23": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_60.6fc3dc75b8": [], "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_60.b5373e8eb0": [], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_120.db9f6c7bd9": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_120.afc9bae971": [], "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_120.2c2a4416a5": [], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_250.331ff4411b": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_250.49bd8abee2": [], "test.dbt_analytics_engine.fct_orders_timeseries_sma_assert_positive_sales_sma_250.b40dc14c84": [], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_14.83ff08e036": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_14.172d14f4a0": [], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_30.023a9ab431": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_30.c31a4454bb": [], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_60.816ab699e5": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_60.28285eb4a6": [], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_120.a9c9b9f6e3": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_120.4f2cb282c0": [], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_stddev_250.3cae461508": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_stddev_250.3cbe02f36d": [], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_14.63f8b4a3fd": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_14.d2b180e7d3": [], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_14.ec877c63cd": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_14.484861a84e": [], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_30.06ef189e4a": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_30.7edd812f30": [], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_30.ca28376bdb": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_30.8c23c0accd": [], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_60.22e8c9233c": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_60.92afcb3b14": [], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_60.e33970618f": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_60.669d910d99": [], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_120.96650466e0": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_120.0d6017c9ee": [], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_120.efe9376cd5": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_120.3d2213ced4": [], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_upper_250.be8915d053": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_upper_250.c11ad8a798": [], "test.dbt_analytics_engine.not_null_fct_orders_timeseries_sma_sales_sma_lower_250.6bc0b85c8b": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_timeseries_sma_sales_sma_lower_250.6f8940f530": [], "test.dbt_analytics_engine.fct_orders_timeseries_sma_unequal_agg_sales.36b2dec339": [], "test.dbt_analytics_engine.not_null_fct_orders_country_id.dd87008526": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_country_id.7ac8b5f6b7": [], "test.dbt_analytics_engine.fct_orders_unexpected_country_id.f51b3be77c": [], "test.dbt_analytics_engine.not_null_fct_orders_country.0edcc91e35": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_country.0a27dd05bc": [], "test.dbt_analytics_engine.not_null_fct_orders_order_id.4e687af8d0": [], "test.dbt_analytics_engine.unique_fct_orders_order_id.523ddb6ce5": [], "test.dbt_analytics_engine.relationships_fct_orders_order_id__order_id__ref_int_orders_.5a03fd2117": [], "test.dbt_analytics_engine.not_null_fct_orders_order_status.b83f07f66b": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_order_status.0b6286ed95": [], "test.dbt_analytics_engine.fct_orders_unexpected_order_status.a694a31b07": [], "test.dbt_analytics_engine.not_null_fct_orders_customer_id.16fe324f7b": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_customer_id.1e994fbbd6": [], "test.dbt_analytics_engine.not_null_fct_orders_nb_payments.3cd88a1cae": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_nb_payments.bcd85f6c8a": [], "test.dbt_analytics_engine.fct_orders_unexpected_nb_payments.fb52011391": [], "test.dbt_analytics_engine.not_null_fct_orders_first_name.a89a0764e2": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_first_name.0e5bb2183e": [], "test.dbt_analytics_engine.not_null_fct_orders_last_name.1e39458222": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_last_name.1db1f3d23b": [], "test.dbt_analytics_engine.fct_orders_unexpected_is_shipped_bool.281259375c": [], "test.dbt_analytics_engine.unique_fct_orders_shipping_id.b0be835405": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_shipping_id.1f5b4e61fa": [], "test.dbt_analytics_engine.fct_orders_assert_positive_shipping_amount.97b89a1e69": [], "test.dbt_analytics_engine.not_null_fct_orders_payment_method.552e8460b4": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_payment_method.e6ed76876e": [], "test.dbt_analytics_engine.fct_orders_unexpected_payment_method.143499598b": [], "test.dbt_analytics_engine.not_null_fct_orders_gross_revenue.e9774c74d8": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_gross_revenue.be21114f63": [], "test.dbt_analytics_engine.fct_orders_assert_positive_gross_revenue.d0522b6f57": [], "test.dbt_analytics_engine.not_null_fct_orders_tax_rate.83abb81011": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_tax_rate.c8727ca0c5": [], "test.dbt_analytics_engine.fct_orders_unexpected_tax_rate.888f839f9c": [], "test.dbt_analytics_engine.fct_orders_assert_positive_tax_rate.3bb0614ec6": [], "test.dbt_analytics_engine.not_null_fct_orders_tax_amount.405019f249": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_tax_amount.9d065212d2": [], "test.dbt_analytics_engine.fct_orders_unexpected_tax_amount.8d62b11a90": [], "test.dbt_analytics_engine.not_null_fct_orders_net_revenue_before_tax.bb8578a9c6": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_net_revenue_before_tax.1c691828cc": [], "test.dbt_analytics_engine.fct_orders_unexpected_net_revenue_before_tax.35c5c243a5": [], "test.dbt_analytics_engine.not_null_fct_orders_net_revenue_after_tax.e01b375b4e": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_net_revenue_after_tax.d5134dd3ec": [], "test.dbt_analytics_engine.fct_orders_unexpected_net_revenue_after_tax.cf4c030292": [], "test.dbt_analytics_engine.not_null_fct_orders_order_date.84f0a76362": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_order_date.369ca05d4f": [], "test.dbt_analytics_engine.fct_orders_unexpected_order_date.4a7d73acb5": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_shipping_date.e1289987ed": [], "test.dbt_analytics_engine.fct_orders_unexpected_shipping_date.2e6bb5ce4f": [], "test.dbt_analytics_engine.fct_orders_unexpected_is_returned_bool.3e7d7bb86e": [], "test.dbt_analytics_engine.unique_fct_orders_return_id.87582f9770": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_return_id.f0a57fcf42": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_return_date.c4a12821ab": [], "test.dbt_analytics_engine.fct_orders_unexpected_return_date.faa60b5a52": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_return_reason.10f36c5ab1": [], "test.dbt_analytics_engine.fct_orders_unexpected_return_reason.bf2d1cade2": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_fulfillment_days.6ba87ed360": [], "test.dbt_analytics_engine.fct_orders_unexpected_fulfillment_days.224a79c537": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_is_nps.ec1b06649e": [], "test.dbt_analytics_engine.fct_orders_unexpected_is_nps_bool.e8cc54079b": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_nps_score.4801b7fe57": [], "test.dbt_analytics_engine.dbt_utils_accepted_range_fct_orders_nps_score__10__0.7918938823": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_nps_date.d14f37bd0e": [], "test.dbt_analytics_engine.fct_orders_unexpected_nps_date.18b8cb456d": [], "test.dbt_analytics_engine.not_null_fct_orders_product_category_id.da74e704f7": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_product_category_id.92b52ba0ee": [], "test.dbt_analytics_engine.fct_orders_unexpected_product_category_id.0e1442b69c": [], "test.dbt_analytics_engine.not_null_fct_orders_product_category.1766c71bb2": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_product_category.112df2d465": [], "test.dbt_analytics_engine.fct_orders_unexpected_product_category.796f7162be": [], "test.dbt_analytics_engine.not_null_fct_orders_product_id.8e73ef4e24": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_product_id.f591e3ef76": [], "test.dbt_analytics_engine.fct_orders_unexpected_product_id.03e8fa5b21": [], "test.dbt_analytics_engine.not_null_fct_orders_product_name.a9a0af8e44": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_product_name.04af613d46": [], "test.dbt_analytics_engine.not_null_fct_orders_cogs.0b19f968ef": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_cogs.68c7e7b990": [], "test.dbt_analytics_engine.fct_orders_unexpected_cogs.001142e58f": [], "test.dbt_analytics_engine.not_null_fct_orders_returned_cogs.5259a715e3": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_returned_cogs.ce6d78c725": [], "test.dbt_analytics_engine.fct_orders_unexpected_returned_cogs.72a465536d": [], "test.dbt_analytics_engine.not_null_fct_orders_refund_amount.f6e3861bf0": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_refund_amount.3a865afd77": [], "test.dbt_analytics_engine.fct_orders_unexpected_refund_amount.79c3344f36": [], "test.dbt_analytics_engine.not_null_fct_orders_payment_fee.cb62252086": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_payment_fee.51eecf2763": [], "test.dbt_analytics_engine.fct_orders_assert_positive_payment_fee.3fc91c0b12": [], "test.dbt_analytics_engine.not_null_fct_orders_cm.e44709b283": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_cm.8fc3956ee5": [], "test.dbt_analytics_engine.fct_orders_unexpected_cm.8fd4691b5f": [], "test.dbt_analytics_engine.not_null_fct_orders_customer_order_nb.79c7350630": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_customer_order_nb.b5fec9bc97": [], "test.dbt_analytics_engine.not_null_fct_orders_customer_type.5d273b0b2b": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_orders_customer_type.5b997d97e0": [], "test.dbt_analytics_engine.fct_orders_unexpected_customer_type.69983a7d22": [], "test.dbt_analytics_engine.fct_orders_unequal_agg_gross_revenue.91ab358fda": [], "test.dbt_analytics_engine.fct_orders_unequal_agg_cogs.39983bc63a": [], "test.dbt_analytics_engine.fct_orders_unequal_agg_shipping_amount.f398ff09f4": [], "test.dbt_analytics_engine.not_null_fct_payment_methods_country_id.b66edb05ed": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_country_id.b42ed05717": [], "test.dbt_analytics_engine.fct_payment_methods_unexpected_country_id.63b418f2a9": [], "test.dbt_analytics_engine.not_null_fct_payment_methods_country.eb06966f71": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_country.f361beadad": [], "test.dbt_analytics_engine.not_null_fct_payment_methods_order_id.ddee004099": [], "test.dbt_analytics_engine.unique_fct_payment_methods_order_id.acc4722fd2": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_order_id.00cc07e79d": [], "test.dbt_analytics_engine.relationships_fct_payment_methods_order_id__order_id__ref_int_payments_.05d9a1bed3": [], "test.dbt_analytics_engine.not_null_fct_payment_methods_nb_payments.7a94409e31": [], "test.dbt_analytics_engine.fct_payment_methods_assert_positive_nb_payments.bcb7a7d8c9": [], "test.dbt_analytics_engine.not_null_fct_payment_methods_payment_methods.b1f93b15ca": [], "test.dbt_analytics_engine.not_null_fct_payment_methods_order_date.21aeb8313c": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_order_date.c02b07ac0e": [], "test.dbt_analytics_engine.fct_payment_methods_unexpected_order_date.01981f60c8": [], "test.dbt_analytics_engine.not_null_fct_payment_methods_order_status.c48b155ca0": [], "test.dbt_analytics_engine.fct_payment_methods_unexpected_order_status.35a4bb0b99": [], "test.dbt_analytics_engine.not_null_fct_payment_methods_total_gross_revenue.afe445581b": [], "test.dbt_analytics_engine.fct_payment_methods_assert_positive_total_gross_revenue.c0d9bfabd1": [], "test.dbt_analytics_engine.not_null_fct_payment_methods_total_payment_fees.7bda1ae723": [], "test.dbt_analytics_engine.fct_payment_methods_assert_positive_total_payment_fees.e8836651e3": [], "test.dbt_analytics_engine.not_null_fct_payment_methods_amazon_pay_payment_fees.8ccf82be46": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_amazon_pay_payment_fees.5ca4935050": [], "test.dbt_analytics_engine.fct_payment_methods_unexpected_amazon_pay_payment_fees.ee2028ca88": [], "test.dbt_analytics_engine.not_null_fct_payment_methods_apple_pay_payment_fees.ca555fc60d": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_apple_pay_payment_fees.e0ab54115b": [], "test.dbt_analytics_engine.fct_payment_methods_unexpected_apple_pay_payment_fees.8d0aed3e47": [], "test.dbt_analytics_engine.not_null_fct_payment_methods_bitcoin_payment_fees.cf4eee780e": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_bitcoin_payment_fees.4cfe95cb5e": [], "test.dbt_analytics_engine.fct_payment_methods_unexpected_bitcoin_payment_fees.2680568c3c": [], "test.dbt_analytics_engine.not_null_fct_payment_methods_stripe_payment_fees.78f2cdbed9": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_stripe_payment_fees.df8b964557": [], "test.dbt_analytics_engine.fct_payment_methods_unexpected_stripe_payment_fees.09c5a52271": [], "test.dbt_analytics_engine.not_null_fct_payment_methods_amazon_pay_amount.470294cec0": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_amazon_pay_amount.7d9e9abbfd": [], "test.dbt_analytics_engine.fct_payment_methods_unexpected_amazon_pay_amount.d41fa1103d": [], "test.dbt_analytics_engine.not_null_fct_payment_methods_apple_pay_amount.35570bd1df": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_apple_pay_amount.269ff4d35e": [], "test.dbt_analytics_engine.fct_payment_methods_unexpected_apple_pay_amount.d0161e7049": [], "test.dbt_analytics_engine.not_null_fct_payment_methods_bitcoin_amount.d7592abe44": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_bitcoin_amount.15818a9c60": [], "test.dbt_analytics_engine.fct_payment_methods_unexpected_bitcoin_amount.00b3640521": [], "test.dbt_analytics_engine.not_null_fct_payment_methods_stripe_amount.3e4367e046": [], "test.dbt_analytics_engine.dbt_utils_not_constant_fct_payment_methods_stripe_amount.9456b323b5": [], "test.dbt_analytics_engine.fct_payment_methods_unexpected_stripe_amount.d0d4124728": [], "test.dbt_analytics_engine.fct_payment_methods_unequal_agg_gross_revenue.61f110d7e7": [], "test.dbt_analytics_engine.fct_payment_methods_unequal_agg_payment_fees.41bf364193": [], "source.dbt_analytics_engine.raw.customers": ["model.dbt_analytics_engine.stg_customers", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_customers_first_name.1aa711fefa", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_customers_last_name.6ffe283ff9", "test.dbt_analytics_engine.source_customers_unexpected_customer_id_length.fafa7939c9", "test.dbt_analytics_engine.source_customers_unexpected_first_name_length.787dbb0899", "test.dbt_analytics_engine.source_customers_unexpected_last_name_length.01feba77f5", "test.dbt_analytics_engine.source_not_null_raw_customers_customer_id.e869432dbb", "test.dbt_analytics_engine.source_not_null_raw_customers_first_name.b1fe98db61", "test.dbt_analytics_engine.source_not_null_raw_customers_last_name.ef2fe0f207", "test.dbt_analytics_engine.source_unique_raw_customers_customer_id.3579d23017"], "source.dbt_analytics_engine.raw.nps": ["model.dbt_analytics_engine.stg_nps", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_nps_customer_id.1d8ada62fb", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_nps_is_nps.bcbc991b6e", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_nps_nps_date.5268efe72d", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_nps_nps_score.971c38316b", "test.dbt_analytics_engine.source_not_null_raw_nps_customer_id.5fda13b29c", "test.dbt_analytics_engine.source_not_null_raw_nps_is_nps.a69d0af618", "test.dbt_analytics_engine.source_not_null_raw_nps_nps_date.1abdb6c60a", "test.dbt_analytics_engine.source_not_null_raw_nps_nps_score.7d4a90987a", "test.dbt_analytics_engine.source_not_null_raw_nps_order_id.2eccdcf1e2", "test.dbt_analytics_engine.source_nps_unexpected_customer_id_length.ee58215e3f", "test.dbt_analytics_engine.source_nps_unexpected_is_nps_bool.78259a7eb7", "test.dbt_analytics_engine.source_nps_unexpected_nps_score.8a16a09fd2", "test.dbt_analytics_engine.source_nps_unexpected_order_id_length.d9115f851b", "test.dbt_analytics_engine.source_unique_raw_nps_order_id.aae4faebb6"], "source.dbt_analytics_engine.raw.orders": ["model.dbt_analytics_engine.stg_orders", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_customer_id.5c0a7aeec1", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_order_date.80ff9d08cd", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_order_status.7efa1990d7", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_product_category_id.a1bffe5382", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_orders_product_id.c3e441e90b", "test.dbt_analytics_engine.source_not_null_raw_orders_customer_id.3962c6ab03", "test.dbt_analytics_engine.source_not_null_raw_orders_order_date.4c6c74964f", "test.dbt_analytics_engine.source_not_null_raw_orders_order_id.03a065a98f", "test.dbt_analytics_engine.source_not_null_raw_orders_order_status.0e4e88bed2", "test.dbt_analytics_engine.source_not_null_raw_orders_product_category_id.5538cf78d2", "test.dbt_analytics_engine.source_not_null_raw_orders_product_id.47f01cfc3d", "test.dbt_analytics_engine.source_orders_unexpected_custoemr_id_length.4e34b069bd", "test.dbt_analytics_engine.source_orders_unexpected_order_id_length.717f86d8cf", "test.dbt_analytics_engine.source_orders_unexpected_order_status.6f35c0bf12", "test.dbt_analytics_engine.source_orders_unexpected_product__id.6d1bf7a4a2", "test.dbt_analytics_engine.source_orders_unexpected_product_category_id.c5b406ac9f", "test.dbt_analytics_engine.source_unique_raw_orders_order_id.2e0765462f"], "source.dbt_analytics_engine.raw.payments": ["model.dbt_analytics_engine.stg_payments", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_created_at.f13e871fc3", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_order_id.f225e51aa8", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_payment_country_id.11cb76a07e", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_payment_id.757e26661f", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_payment_method.5b7ec2ca0a", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_payments_payment_status.bf12f29150", "test.dbt_analytics_engine.source_not_null_raw_payments_created_at.710d6129ed", "test.dbt_analytics_engine.source_not_null_raw_payments_order_id.def3cb6fc9", "test.dbt_analytics_engine.source_not_null_raw_payments_payment_amount.391c03161a", "test.dbt_analytics_engine.source_not_null_raw_payments_payment_country_id.672aaa798a", "test.dbt_analytics_engine.source_not_null_raw_payments_payment_id.a7f5b41ef5", "test.dbt_analytics_engine.source_not_null_raw_payments_payment_method.9aca47f72c", "test.dbt_analytics_engine.source_not_null_raw_payments_payment_status.54558a6ea3", "test.dbt_analytics_engine.source_payments_assert_positive_payment_amount.d0159c6dbe", "test.dbt_analytics_engine.source_payments_unexpected_country_id.e6838f7725", "test.dbt_analytics_engine.source_payments_unexpected_order_id_length.b7725a5e3e", "test.dbt_analytics_engine.source_payments_unexpected_payment_method.010f8676de", "test.dbt_analytics_engine.source_payments_unexpected_payment_status.cdd31bef7c"], "source.dbt_analytics_engine.raw.returns": ["model.dbt_analytics_engine.stg_returns", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_returns_is_returned.cd1f0f7ac5", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_returns_return_date.b667e51d4b", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_returns_return_reason.8a55d4b196", "test.dbt_analytics_engine.source_not_null_raw_returns_is_returned.148b12a528", "test.dbt_analytics_engine.source_not_null_raw_returns_order_id.6d0a5fcbbe", "test.dbt_analytics_engine.source_not_null_raw_returns_return_date.d74bba5b49", "test.dbt_analytics_engine.source_not_null_raw_returns_return_id.18df885383", "test.dbt_analytics_engine.source_not_null_raw_returns_return_reason.005573374b", "test.dbt_analytics_engine.source_returns_unexpected_is_returned_bool.c8835a46b6", "test.dbt_analytics_engine.source_returns_unexpected_order_id_length.66bc0666d6", "test.dbt_analytics_engine.source_returns_unexpected_return_id_length.3da49c526e", "test.dbt_analytics_engine.source_returns_unexpected_return_reason.bbd49bceac", "test.dbt_analytics_engine.source_unique_raw_returns_order_id.a8aef5caa0", "test.dbt_analytics_engine.source_unique_raw_returns_return_id.1d09b09e28"], "source.dbt_analytics_engine.raw.shipping": ["model.dbt_analytics_engine.stg_shipping", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_shipping_is_shipped.a565383871", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_shipping_shipping_amount.e4a06339ae", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_shipping_shipping_date.019f309d0c", "test.dbt_analytics_engine.dbt_utils_source_not_constant_raw_shipping_shipping_id.71eae1e42f", "test.dbt_analytics_engine.source_not_null_raw_shipping_is_shipped.3766118adb", "test.dbt_analytics_engine.source_not_null_raw_shipping_order_id.4459e0b7d6", "test.dbt_analytics_engine.source_shipping_assert_positive_shipping_amount.8d0c1a37a8", "test.dbt_analytics_engine.source_shipping_unexpected_is_shipped_bool.6a63595654", "test.dbt_analytics_engine.source_shipping_unexpected_order_id_length.2ba4519514", "test.dbt_analytics_engine.source_shipping_unexpected_shipping_id_length.3c4d89d925", "test.dbt_analytics_engine.source_unique_raw_shipping_order_id.d5a8aa62ce", "test.dbt_analytics_engine.source_unique_raw_shipping_shipping_id.c6c0e38145"], "exposure.dbt_analytics_engine.sales_performance": [], "exposure.dbt_analytics_engine.product_performance": [], "exposure.dbt_analytics_engine.sales_forecasting": [], "exposure.dbt_analytics_engine.payment_methods_performance": []}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}